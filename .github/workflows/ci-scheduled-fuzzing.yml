#
#  This workflow will normally run on a schedule.
#
#  It can also be invoked manually by pushing to a branch named as follows:
#
#      run-fuzzer[[-<protocol>]-<timeout>]
#
#      <timeout> is total run length, including setup.
#      <protocol> is the name of the unit to fuzz.
#
#  For example:
#
#    - 'run-fuzzer':             Start fuzzing all protocols (default timeout)
#    - 'run-fuzzer-3600':        Start fuzzing all protocols for one hour
#    - 'run-fuzzer-radius-7200': Start fuzzing RADIUS for two hours
#

name: Scheduled fuzzing

on:
  push:
    branches:
      - 'run-fuzzer**'

  schedule:
    - cron: '0 4 * * *'

env:
  ASAN_OPTIONS: symbolize=1 detect_leaks=1 detect_stack_use_after_return=1
  LSAN_OPTIONS: fast_unwind_on_malloc=0:malloc_context_size=50
  KQUEUE_DEBUG: yes
  M_PERTURB: "0x42"
  PANIC_ACTION: "gdb -batch -x raddb/panic.gdb %e %p 1>&0 2>&0"
  ANALYZE_C_DUMP: 1
  FR_GLOBAL_POOL: 4M
  TEST_CERTS: yes
  DO_BUILD: yes
  CI: 1
  GH_ACTIONS: 1
  CC: clang

jobs:

  #
  #  Constructs a matrix of protocols to fuzz as JSON that when set in the main
  #  fuzzer job is equivalent to the following YAML:
  #
  #    matrix:
  #      env:
  #        - { "PROTOCOL": "radius", "TOTAL_RUNTIME": "20000", "UPLOAD_SLOT": "0", "NUM_SLOTS": "15" }
  #        - { "PROTOCOL": "dhcpv4", "TOTAL_RUNTIME": "20000", "UPLOAD_SLOT": "3", "NUM_SLOTS": "15" }
  #        - ...
  #
  set-matrix:

    name: Setup build matrix

    runs-on: ubuntu-latest

    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      starttimestamp: ${{ steps.starttimestamp.outputs.starttimestamp }}

    steps:

    - id: starttimestamp
      name: Record run start time
      run: |
        echo ::set-output name=starttimestamp::`date +%s`

    - uses: actions/checkout@v2
      with:
        lfs: false

    - id: set-matrix
      name: Setup the matrix
      run: |
        #
        #  By default we fuzz all protocols for 20000s (just short of the 6h
        #  GitHub Action run limit)
        #
        TOTAL_RUNTIME=20000
        SLOT_SPREAD=3  # secs
        read -r -a PROTOS <<< $(sed -ne 's/^FUZZER_PROTOCOLS\s\+=\s\+\(.*\)/\1/p' src/bin/all.mk)
        #
        if [[ "$GITHUB_REF" = refs/heads/run-fuzzer-*-* ]]; then
          PROTOS=${GITHUB_REF#refs/heads/run-fuzzer-}
          TOTAL_RUNTIME=${PROTOS##*-}
          PROTOS=( "${PROTOS%-*}" )
        elif [[ "$GITHUB_REF" = refs/heads/run-fuzzer-* ]]; then
          TOTAL_RUNTIME=${GITHUB_REF#refs/heads/run-fuzzer-}
        fi
        P=$(
            for i in ${!PROTOS[@]}; do
              echo "{ \"PROTOCOL\": \"${PROTOS[$i]}\", \"TOTAL_RUNTIME\": \"$TOTAL_RUNTIME\", \"UPLOAD_SLOT\": \"$((i * $SLOT_SPREAD))\", \"NUM_SLOTS\": \"$((${#PROTOS[@]} * $SLOT_SPREAD))\" },"
            done
          )
        M=$(cat <<EOF
        {
          "env": [
            ${P:0:-1}
          ]
        }
        EOF
          )
        echo "Matrix:"
        echo "$M"
        echo ::set-output name=matrix::$M


  fuzzer:

    needs:
      - set-matrix

    runs-on: ubuntu-20.04

    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.set-matrix.outputs.matrix) }}

    env: ${{ matrix.env }}

    name: Fuzzing ${{ matrix.env.PROTOCOL}}

    steps:

    #  Checkout, but defer pulling LFS objects until we've restored the cache
    #
    #  We include a bit of depth since we will walk the tree until we find a
    #  commit that builds.
    #
    - uses: actions/checkout@v2
      with:
        lfs: false
        fetch-depth: 50

    #
    #  We push changes to the corpus to the GH Actions cache, and restore based
    #  on the commit date of the corpus tar file from the repo.
    #
    #  Therefore, if a new corpus is pushed to the repo then we will use it.
    #  Otherwise we will search the cache for a more recently merged version of
    #  the corpus in the repo.
    #
    - name: Get the corpus age
      id: corpusparams
      run: |
        echo "::set-output name=corpusct::$(git log -1 --format=%ct -- src/tests/fuzzer-corpus/$PROTOCOL.tar)"
        echo "::set-output name=corpusage::$((`date +%s` - `git log -1 --format=%ct -- src/tests/fuzzer-corpus/$PROTOCOL.tar`))"

    - name: Restore the fuzzer corpus tar file from cache
      uses: actions/cache@v2
      id: corpus-cache
      with:
        path: src/tests/fuzzer-corpus/${{ matrix.env.PROTOCOL }}.tar
        key: corpus-${{ matrix.env.PROTOCOL }}-${{ steps.corpusparams.outputs.corpusct }}-${{ github.run_number }}
        restore-keys: |
          corpus-${{ matrix.env.PROTOCOL }}-${{ steps.corpusparams.outputs.corpusct }}-

    - name: Package manager performance improvements
      run: |
        sudo sh -c 'echo force-unsafe-io > /etc/dpkg/dpkg.cfg.d/02speedup'
        echo 'man-db man-db/auto-update boolean false' | sudo debconf-set-selections
        sudo dpkg-reconfigure man-db
        sudo sed -i 's/^update_initramfs=.*/update_initramfs=no/' /etc/initramfs-tools/update-initramfs.conf

    - name: Install build dependencies based on Debian packages plus extra CI packages
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends build-essential devscripts equivs quilt
        debian/rules debian/control
        sudo mk-build-deps -irt"apt-get -y --no-install-recommends" debian/control
        sudo mk-build-deps -irt"apt-get -y --no-install-recommends" scripts/ci/extra-packages.debian.control

    - name: Install tacacs_plus
      run: |
        pip3 install tacacs_plus

    - name: Install LLVM 12
      run: |
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add
        sudo apt-add-repository "deb http://apt.llvm.org/focal/ llvm-toolchain-focal main"
        sudo apt-get install -y --no-install-recommends clang-12 llvm-12 gdb
        sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-12 60 && sudo update-alternatives --set clang /usr/bin/clang-12
        sudo update-alternatives --install /usr/bin/llvm-symbolizer llvm-symbolizer /usr/bin/llvm-symbolizer-12 60 && sudo update-alternatives --set llvm-symbolizer /usr/bin/llvm-symbolizer-12

    - name: Show versions
      run: |
        $CC --version
        make --version
        krb5-config --all || :
        pcre-config --libs-posix --version 2>/dev/null || :
        pcre2-config --libs-posix --version 2>/dev/null || :

    #
    #  We walk up the tree if necessary to find a commit that builds so that we
    #  will fuzz something
    #
    - name: Find a commit that builds
      id: pick_commit
      run: |
        while : ; do
          CFLAGS="-DWITH_EVAL_DEBUG -O2 -g3" ./configure -C \
            --enable-werror \
            --enable-address-sanitizer \
            --enable-undefined-behaviour-sanitizer \
            --enable-leak-sanitizer \
            --enable-fuzzer \
            --prefix=$HOME/freeradius \
          || cat ./config.log
          echo "Contents of src/include/autoconf.h"
          cat "./src/include/autoconf.h"
          mkdir -p build/tests/eapol_test
          : > build/tests/eapol_test/eapol_test.mk
          make -j `nproc` build/bin/fuzzer_$PROTOCOL && break || :
          git reset --hard HEAD^
          git clean -fxd
        done
        echo "::set-output name=commit_id::$(git rev-parse --short HEAD)"
        make -j `nproc`
        make test.unit

    - name: Run fuzzer tests
      run: |
        REMAINING_TIME=$(( $TOTAL_RUNTIME + $START_TIMESTAMP - `date +%s` ))
        echo "Started at $START_TIMESTAMP for $TOTAL_RUNTIME secs. Fuzzing ${{ steps.pick_commit.outputs.commit_id }}:$PROTOCOL for $REMAINING_TIME secs"
        [[ "$REMAINING_TIME" -lt 1 ]] && exit 1
        make test.fuzzer.$PROTOCOL FUZZER_TIMEOUT="$REMAINING_TIME" FUZZER_ARGUMENTS="-jobs=`nproc` -workers=`nproc`" || :
        find build/fuzzer -type f ! -path 'build/fuzzer/*.log' | grep . && exit 1 || :
      env:
        GITHUB_REF: "${{ github.ref }}"
        START_TIMESTAMP: "${{ needs.set-matrix.outputs.starttimestamp }}"

    - name: "Clang libFuzzer: Store assets on failure"
      uses: actions/upload-artifact@v2
      with:
        name: clang-fuzzer-${{ matrix.env.PROTOCOL }}-${{ steps.pick_commit.outputs.commit_id }}
        path: build/fuzzer
        retention-days: 30
      if: ${{ failure() }}

    #
    #  Merge the corpus which will be stored in the cache for the next run
    #
    - name: Merge the corpus
      run: |
        make test.fuzzer.$PROTOCOL.merge

    #
    #  We can push the LFS file directly, but we must use the GitHub API to
    #  create the actual commit due to the "signed-commits" branch protection
    #  rule for the master branch.
    #
    - name: Monthly push back of corpus
      run: |
        export FILE=src/tests/fuzzer-corpus/$PROTOCOL.tar
        if ! git diff --exit-code "$FILE"; then
          pip install PyGithub
          git add "$FILE"
          OID="$(git lfs ls-files -l -I "$FILE" | cut -f1 -d ' ')"
          git lfs push --object-id origin "$OID"
          export CONTENTS="$(git show ":$FILE" | base64)"
          SLEEP_FOR=$(( ( $UPLOAD_SLOT - `date +%s` % $NUM_SLOTS + $NUM_SLOTS ) % $NUM_SLOTS ))
          echo Waiting $SLEEP_FOR secs for our upload slot...
          sleep $SLEEP_FOR
          python3 scripts/ci/commit_lfs_file_update.py
        fi
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      if: ${{ steps.corpusparms.outputs.corpusage > 2592000 && github.repository_owner == 'FreeRADIUS' }}
