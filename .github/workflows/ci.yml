name: CI

on:
  push:
    branches-ignore:
      - coverity_scan
  pull_request:

env:
  ASAN_OPTIONS: symbolize=1 detect_leaks=1 detect_stack_use_after_return=1
  LSAN_OPTIONS: fast_unwind_on_malloc=0:malloc_context_size=50
  KQUEUE_DEBUG: yes
  M_PERTURB: "0x42"
  PANIC_ACTION: "gdb -batch -x raddb/panic.gdb %e %p 1>&0 2>&0"
  SMTP_TEST_SERVER: 127.0.0.1
  SMTP_TEST_SERVER_PORT: 2525
  IMAP_TEST_SERVER: 127.0.0.1
  IMAP_TEST_SERVER_PORT: 1430
  IMAP_TEST_SERVER_SSL_PORT: 1431
  SQL_MYSQL_TEST_SERVER: 127.0.0.1
  SQL_POSTGRESQL_TEST_SERVER: 127.0.0.1
  LDAP_TEST_SERVER: 127.0.0.1
  LDAP_TEST_SERVER_PORT: 3890
#  REDIS_TEST_SERVER: 127.0.0.1
#  REDIS_IPPOOL_TEST_SERVER: 127.0.0.1
  ANALYZE_C_DUMP: 1
  FR_GLOBAL_POOL: 4M
  TEST_CERTS: yes
  DO_BUILD: yes
  CI: 1
  GH_ACTIONS: 1

jobs:
  ci:

#
#  Launching these containers takes the best part of a minute, so we configure
#  the pre-installed, local instances of these services instead.
#
#    services:
#      mysql:
#        image: mysql
#        env:
#          MYSQL_ALLOW_EMPTY_PASSWORD: yes
#        ports:
#          - 3306:3306
#        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
#
#      postgres:
#        image: postgres
#        env:
#          POSTGRES_HOST_AUTH_METHOD: trust
#        ports:
#          - 5432:5432
#        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
#

    runs-on: ${{ matrix.env.OS }}

    strategy:
      fail-fast: false
      matrix:
        env:
          - { CC: gcc,   BUILD_CFLAGS: "-DWITH_EVAL_DEBUG",         LIBS_OPTIONAL: no,  LIBS_ALT: no,  TEST_TYPE: fixtures, OS: ubuntu-18.04, NAME: linux-gcc-lean      }
          - { CC: gcc,   BUILD_CFLAGS: "-DWITH_EVAL_DEBUG",         LIBS_OPTIONAL: yes, LIBS_ALT: no,  TEST_TYPE: fixtures, OS: ubuntu-18.04, NAME: linux-gcc           }
          - { CC: gcc,   BUILD_CFLAGS: "-DWITH_EVAL_DEBUG -O2 -g3", LIBS_OPTIONAL: yes, LIBS_ALT: no,  TEST_TYPE: fixtures, OS: ubuntu-18.04, NAME: linux-gcc-O2-g3     }
          - { CC: gcc,   BUILD_CFLAGS: "-DNDEBUG",                  LIBS_OPTIONAL: yes, LIBS_ALT: no,  TEST_TYPE: fixtures, OS: ubuntu-18.04, NAME: linux-gcc-ndebug    }
          - { CC: clang, BUILD_CFLAGS: "-DWITH_EVAL_DEBUG",         LIBS_OPTIONAL: no,  LIBS_ALT: no,  TEST_TYPE: fixtures, OS: ubuntu-18.04, NAME: linux-clang-lean    }
          - { CC: clang, BUILD_CFLAGS: "-DWITH_EVAL_DEBUG",         LIBS_OPTIONAL: yes, LIBS_ALT: no,  TEST_TYPE: fixtures, OS: ubuntu-18.04, NAME: linux-clang         }
          - { CC: clang, BUILD_CFLAGS: "-DWITH_EVAL_DEBUG -O2 -g3", LIBS_OPTIONAL: yes, LIBS_ALT: no,  TEST_TYPE: fixtures, OS: ubuntu-18.04, NAME: linux-clang-O2-g3   }
          - { CC: clang, BUILD_CFLAGS: "-DNDEBUG",                  LIBS_OPTIONAL: yes, LIBS_ALT: no,  TEST_TYPE: fixtures, OS: ubuntu-18.04, NAME: linux-clang-ndebug  }
          - { CC: clang, BUILD_CFLAGS: "-DWITH_EVAL_DEBUG",         LIBS_OPTIONAL: yes, LIBS_ALT: yes, TEST_TYPE: fixtures, OS: ubuntu-18.04, NAME: linux-clang-altlibs }
          - { CC: clang, BUILD_CFLAGS: "-DWITH_EVAL_DEBUG",         LIBS_OPTIONAL: yes, LIBS_ALT: no,  TEST_TYPE: macos,    OS: macos-10.15,  NAME: macos-clang         }
          - { CC: clang, BUILD_CFLAGS: "-DWITH_EVAL_DEBUG -O2 -g3", LIBS_OPTIONAL: yes, LIBS_ALT: no,  TEST_TYPE: fuzzing,  OS: ubuntu-18.04, NAME: linux-fuzzer        }

    env: ${{ matrix.env }}

    name: "${{ matrix.env.NAME }} ${{ toJson(matrix.env) }}"

    steps:

    # Checkout, but defer pulling LFS objects until we've restored the cache
    - uses: actions/checkout@v2
      with:
        lfs: false

    - name: Create LFS file list as cache key
      run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

    - name: Restore LFS cache
      uses: actions/cache@v2
      id: lfs-cache
      with:
        path: .git/lfs
        key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}-v1

    # Now the LFS pull will be local if we hit the cache, or remote otherwise
    - name: Git LFS pull
      run: git lfs pull

    - name: Package manager performance improvements
      if: ${{ runner.os != 'macOS' }}
      run: |
        sudo sh -c 'echo force-unsafe-io > /etc/dpkg/dpkg.cfg.d/02speedup'
        echo 'man-db man-db/auto-update boolean false' | sudo debconf-set-selections
        sudo dpkg-reconfigure man-db
        sudo sed -i 's/^update_initramfs=.*/update_initramfs=no/' /etc/initramfs-tools/update-initramfs.conf

    - name: Install build dependencies based on Debian packages plus extra CI packages
      if: ${{ runner.os != 'macOS' }}
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends build-essential devscripts equivs quilt
        debian/rules debian/control
        sudo mk-build-deps -irt"apt-get -y --no-install-recommends" debian/control
        sudo mk-build-deps -irt"apt-get -y --no-install-recommends" scripts/ci/extra-packages.debian.control

    - uses: actions/setup-ruby@v1
      if: ${{ matrix.env.TEST_TYPE == 'fixtures' }}

    - name: Install cassandra driver (not yet available on 20.04)
      if: ${{ matrix.env.OS == 'ubuntu-18.04' }}
      run: sudo ./scripts/ci/cassandra-install.sh

    - name: Install dependencies (MacOS)
      if: ${{ runner.os == 'macOS' }}
      run: |
        brew install \
          cassandra-cpp-driver \
          gperftools \
          hiredis \
          json-c \
          libidn \
          libmemcached \
          luajit \
          mariadb \
          make \
          mruby \
          talloc
        ln -s `brew --prefix`/opt/make/bin/gmake /usr/local/bin/make
        echo "#! /bin/sh"               >> /usr/local/bin/nproc
        echo "sysctl -n hw.physicalcpu" >> /usr/local/bin/nproc
        chmod +x /usr/local/bin/nproc
      env:
        HOMEBREW_NO_AUTO_UPDATE: 1
        HOMEBREW_NO_INSTALL_CLEANUP: 1
        HOMEBREW_CLEANUP_PERIODIC_FULL_DAYS: 3650

    - name: Install tacacs_plus
      run: |
        pip3 install tacacs_plus

    - name: Install LLVM 10
      if: ${{ matrix.env.CC == 'clang' && runner.os != 'macOS' }}
      run: |
        . /etc/os-release
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add
        sudo apt-add-repository "deb http://apt.llvm.org/${UBUNTU_CODENAME}/ llvm-toolchain-${UBUNTU_CODENAME}-10 main"
        sudo apt-get install -y --no-install-recommends clang-10 llvm-10 gdb
        sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-10 60 && sudo update-alternatives --set clang /usr/bin/clang-10
        sudo update-alternatives --install /usr/bin/llvm-symbolizer llvm-symbolizer /usr/bin/llvm-symbolizer-10 60 && sudo update-alternatives --set llvm-symbolizer /usr/bin/llvm-symbolizer-10

    - name: Install GCC 10
      if: ${{ matrix.env.CC == 'gcc' }}
      run: |
        sudo apt-get install -y --no-install-recommends gcc-10 gccgo-10 gdb
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 60 && sudo update-alternatives --set gcc /usr/bin/gcc-10

    #
    #  Build using some alternative libraries
    #
    #    PCRE 2       -> PCRE 1
    #    MIT Kerberos -> HEIMDAL Kerberos
    #
    - name: Use alternative libraries
      if: ${{ matrix.env.LIBS_ALT == 'yes' }}
      run: |
        sudo apt-get install -y --no-install-recommends libpcre3-dev  # "PCRE 1"
        sudo apt-get purge -y libpcre2-dev  # Remove default PCRE 2, leaving only PCRE 1
        sudo apt-get install -y --no-install-recommends heimdal-dev

    - name: Show versions
      run: |
        $CC --version
        make --version
        krb5-config --all || :
        pcre-config --libs-posix --version 2>/dev/null || :
        pcre2-config --libs-posix --version 2>/dev/null || :

    - name: Hacks to silence clang-12 warnings in talloc and json-c (MacOS)
      if: ${{ runner.os == 'macOS' }}
      run: |
        sed -i '' '1i\
        #pragma clang diagnostic ignored "-Wdocumentation"
        ' /usr/local/include/talloc.h
        sed -i '' '1i\
        #pragma clang diagnostic ignored "-Wdocumentation-deprecated-sync"
        ' /usr/local/include/json-c/json_tokener.h
        sed -i '' '1i\
        #pragma clang diagnostic ignored "-Wdocumentation-deprecated-sync"
        ' /usr/local/include/json-c/arraylist.h
        sed -i '' '1i\
        #pragma clang diagnostic ignored "-Wdocumentation-deprecated-sync"
        ' /usr/local/include/json-c/json_util.h
        sed -i '' '1i\
        #pragma clang diagnostic ignored "-Wstrict-prototypes"
        ' /usr/local/include/cassandra.h

    - name: Configure
      run: |
        if $CC -v 2>&1 | grep clang > /dev/null; then
            echo "Enabling llvm sanitizers"
            enable_llvm_sanitizers="--enable-llvm-address-sanitizer --enable-llvm-undefined-behaviour-sanitizer"
            if [ "`uname`" != "Darwin" ]; then
                enable_llvm_sanitizers="$enable_llvm_sanitizers --enable-llvm-leak-sanitizer"
            fi
            if [ "$TEST_TYPE" = "fuzzing" ]; then
                enable_llvm_sanitizers="$enable_llvm_sanitizers --enable-llvm-fuzzer"
            fi
        else
            enable_llvm_sanitizers=""
        fi
        if [ "`uname`" = "Darwin" ]; then
            build_paths="--with-libfreeradius-ldap-lib-dir=`brew --prefix`/opt/openldap/lib --with-libfreeradius-ldap-include-dir=`brew --prefix`/opt/openldap/include --with-openssl-lib-dir=`brew --prefix`/opt/openssl/lib --with-openssl-include-dir=`brew --prefix`/opt/openssl/include --with-unixodbc-lib-dir=`brew --prefix`/opt/unixodbc/lib --with-unixodbc-include-dir=`brew --prefix`/opt/unixodbc/include"
        else
            build_paths=""
        fi
        CFLAGS="${BUILD_CFLAGS}" ./configure -C \
            --enable-werror \
            $enable_llvm_sanitizers \
            $build_paths \
            --prefix=$HOME/freeradius \
            --with-threads=$LIBS_OPTIONAL \
            --with-udpfromto=$LIBS_OPTIONAL \
            --with-openssl=$LIBS_OPTIONAL \
            --with-pcre=$LIBS_OPTIONAL \
        || cat ./config.log
        echo "Contents of src/include/autoconf.h"
        cat "./src/include/autoconf.h"

    - name: Make
      run: |
        make -j `nproc`
      if: ${{ matrix.env.TEST_TYPE != 'fuzzing' }}

    # Disabled on MacOS and when fuzzing to reduce the runtime
    - name: Clang Static Analyzer
      if: ${{ matrix.env.CC == 'clang' && runner.os != 'macOS' && matrix.env.TEST_TYPE != 'fuzzing' }}
      run: |
        make -j `nproc` scan && [ "$(find build/plist/ -name *.html)" = '' ];

    - name: "Clang Static Analyzer: Store assets on failure"
      uses: actions/upload-artifact@v2
      with:
        name: clang-scan.tgz
        path: build/plist/**/*.html
        retention-days: 30
      if: ${{ matrix.env.CC == 'clang' && failure() }}

    - name: Install fixture (redis)
      if: ${{ matrix.env.TEST_TYPE == 'fixtures' }}
      run: |
        sudo apt-get install -y --no-install-recommends redis-server redis-tools
        sudo systemctl start redis-server

    - name: Install fixture (openldap)
      if: ${{ matrix.env.TEST_TYPE == 'fixtures' }}
      run: |
        sudo apt-get install -y --no-install-recommends slapd ldap-utils apparmor-utils
        sudo systemctl stop slapd
        sudo aa-complain /usr/sbin/slapd

    - name: Install fixture (dovecot imapd)
      if: ${{ matrix.env.TEST_TYPE == 'fixtures' }}
      run: |
        sudo apt-get install -y --no-install-recommends dovecot-imapd
        sudo systemctl stop dovecot
        sudo aa-complain /usr/sbin/dovecot

    - name: Install fixture (exim)
      if: ${{ matrix.env.TEST_TYPE == 'fixtures' }}
      run: |
        sudo apt-get install -y --no-install-recommends exim4
        sudo systemctl stop exim4

    - name: Configure fixture (PostgreSQL)
      if: ${{ matrix.env.TEST_TYPE == 'fixtures' }}
      run: |
        export PG_VER=13
        sudo sh -c "echo host  all all 127.0.0.1/32 trust >  /etc/postgresql/$PG_VER/main/pg_hba.conf"
        sudo sh -c "echo local all all              trust >> /etc/postgresql/$PG_VER/main/pg_hba.conf"
        sudo systemctl start postgresql

    - name: Configure fixture (MySQL)
      if: ${{ matrix.env.TEST_TYPE == 'fixtures' }}
      run: |
        sudo systemctl start mysql
        mysql -h 127.0.0.1 -uroot -proot -e "ALTER USER 'root'@'localhost' IDENTIFIED BY '';";

    - name: Setup fixtures and run full CI tests
      if: ${{ matrix.env.TEST_TYPE == 'fixtures' }}
      run: |
        for i in \
            postgresql-setup.sh \
            imap-setup.sh \
            exim-setup.sh \
            mysql-setup.sh \
            ldap-setup.sh \
            redis-setup.sh; do

            script="./scripts/ci/$i"
            echo "Calling $i"
            $script
        done
        make ci-test

    # Includes hack to disable trunk tests on MacOS which are currently broken
    # Also, no detect_leaks support for ASAN
    - name: Run basic tests (MacOS)
      if: ${{ matrix.env.TEST_TYPE == 'macos' }}
      run: |
        : > src/lib/server/trunk_tests.mk
        make test
      env:
        ASAN_OPTIONS: symbolize=1 detect_stack_use_after_return=1

    # Fuzz in parallel, aiming to keep to overall runtime of this job in line
    # with other jobs in the CI workflow
    - name: Run fuzzer tests
      if: ${{ matrix.env.TEST_TYPE == 'fuzzing' }}
      run: |
        # For fuzzing we won't be needing eapol_test
        mkdir -p build/tests/eapol_test
        : > build/tests/eapol_test/eapol_test.mk
        make -j 5 test.fuzzer FUZZER_TIMEOUT=720
        find build/fuzzer -type f | grep . && exit 1 || :

    - name: "Clang libFuzzer: Store assets on failure"
      uses: actions/upload-artifact@v2
      with:
        name: clang-fuzzer
        path: build/fuzzer
        retention-days: 30
      if: ${{ matrix.env.TEST_TYPE == 'fuzzing' && failure() }}

    #
    #  If the CI has failed and the branch is ci-debug then start a tmate
    #  session. SSH rendezvous point is emited continuously in the job output.
    #  We restrict access to this session to the job owner's GitHub SSH keys.
    #
    - name: "Debug: Plant authorized_keys of job owner"
      run: |
        umask 077
        mkdir -p ~/.ssh
        curl -s https://api.github.com/users/${{ github.actor }}/keys | jq '.[].key + " ${{ github.actor }}"' --raw-output > ~/.ssh/authorized_keys
        echo 'set tmate-authorized-keys "~/.ssh/authorized_keys"' > ~/.tmate.conf
      if: ${{ github.ref == 'refs/heads/ci-debug' && failure() }}

    # Backport of tmate 2.4.0 to Ubuntu-18.04 to support authorized_keys
    # restriction. Can go away when we upgrade CI to 20.04.
    - name: "Debug: Install backported tmate 2.4.0 on Ubuntu 18.04"
      run: |
        wget -O tmate.deb https://github.com/terryburton/tmate/releases/download/2.4.0/tmate_2.4.0-2_amd64.deb
        sudo apt-get install -y --no-install-recommends ./tmate.deb
      if: ${{ github.ref == 'refs/heads/ci-debug' && failure() && matrix.env.OS == 'ubuntu-18.04' }}

    - name: "Debug: Start tmate"
      uses: mxschmitt/action-tmate@v3
      if: ${{ github.ref == 'refs/heads/ci-debug' && failure() }}
