name: CI

on:
  push:
    branches-ignore:
      - coverity_scan
  pull_request:

env:
  PANIC_ACTION: "gdb -batch -x raddb/panic.gdb %e %p 1>&0 2>&0"
  CI: 1
  GH_ACTIONS: 1

jobs:
  ci:

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-18.04
#          - ubuntu-20.04
        env:
          - { CC: gcc,   DO_BUILD: yes, LIBS_OPTIONAL: no,  LIBS_SHARED: yes, REPRODUCIBLE: no,  BUILD_CFLAGS: "-DWITH_EVAL_DEBUG" }
          - { CC: gcc,   DO_BUILD: yes, LIBS_OPTIONAL: yes, LIBS_SHARED: yes, REPRODUCIBLE: no,  BUILD_CFLAGS: "-DWITH_EVAL_DEBUG" }
          - { CC: gcc,   DO_BUILD: yes, LIBS_OPTIONAL: yes, LIBS_SHARED: yes, REPRODUCIBLE: yes, BUILD_CFLAGS: "-DWITH_EVAL_DEBUG" }
          - { CC: gcc,   DO_BUILD: yes, LIBS_OPTIONAL: yes, LIBS_SHARED: yes, REPRODUCIBLE: no,  BUILD_CFLAGS: "-DWITH_EVAL_DEBUG -O2 -g3" }
          - { CC: clang, DO_BUILD: yes, LIBS_OPTIONAL: no,  LIBS_SHARED: yes, REPRODUCIBLE: no,  BUILD_CFLAGS: "-DWITH_EVAL_DEBUG" }
          - { CC: clang, DO_BUILD: yes, LIBS_OPTIONAL: yes, LIBS_SHARED: yes, REPRODUCIBLE: no,  BUILD_CFLAGS: "-DWITH_EVAL_DEBUG" }
          - { CC: clang, DO_BUILD: yes, LIBS_OPTIONAL: yes, LIBS_SHARED: yes, REPRODUCIBLE: yes, BUILD_CFLAGS: "-DWITH_EVAL_DEBUG" }
          - { CC: clang, DO_BUILD: yes, LIBS_OPTIONAL: yes, LIBS_SHARED: yes, REPRODUCIBLE: no,  BUILD_CFLAGS: "-DWITH_EVAL_DEBUG -O2 -g3" }

    env: ${{ matrix.env }}

    name: "${{ matrix.os }} ${{ matrix.env.CC }} ${{ toJson(matrix.env) }}"

    steps:

    - uses: actions/checkout@v2

    - name: Package manager performance improvements
      run: |
        sudo sh -c 'echo force-unsafe-io > /etc/dpkg/dpkg.cfg.d/02speedup'
        echo 'man-db man-db/auto-update boolean false' | sudo debconf-set-selections
        sudo dpkg-reconfigure man-db

    - name: Freshen APT repo metadata
      run: |
        sudo apt-get update

    - name: Install common build dependencies
      run: |
        sudo apt-get install -y --no-install-recommends \
        autoconf \
        build-essential \
        debhelper \
        devscripts \
        dh-make \
        fakeroot \
        firebird-dev \
        freetds-dev \
        libcap-dev \
        libcollectdclient-dev \
        libcurl4-openssl-dev \
        libgdbm-dev \
        libhiredis-dev \
        libidn11-dev \
        libiodbc2 \
        libiodbc2-dev \
        libkqueue-dev \
        libkrb5-dev \
        libldap2-dev \
        libmemcached-dev \
        libmysqlclient-dev \
        libpam0g-dev \
        libpcap-dev \
        libpcre3-dev \
        libperl-dev \
        libpq-dev \
        libreadline-dev \
        libruby \
        libsnmp-dev \
        libssl-dev \
        libtalloc-dev \
        libunbound-dev \
        libwbclient-dev \
        libykclient-dev \
        libyubikey-dev \
        lintian \
        pbuilder \
        python-dev \
        python3-dev \
        ruby-dev \
        quilt

    - name: Install JSON build deps for 18.04
      if: ${{ matrix.os == 'ubuntu-18.04' }}
      run: sudo apt-get install -y --no-install-recommends libjson-c3

    - name: Install JSON build deps for 20.04
      if: ${{ matrix.os == 'ubuntu-20.04' }}
      run: sudo apt-get install -y --no-install-recommends libjson-c4

    - name: Install LLVM 10 for 18.04
      if: ${{ matrix.os == 'ubuntu-18.04' && matrix.env.CC == 'clang' }}
      run: |
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add
        sudo apt-add-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main"
        sudo apt-get install -y --no-install-recommends clang-10 llvm-10 gdb
        sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-10 60 && sudo update-alternatives --set clang /usr/bin/clang-10
        sudo update-alternatives --install /usr/bin/llvm-symbolizer llvm-symbolizer /usr/bin/llvm-symbolizer-10 60 && sudo update-alternatives --set llvm-symbolizer /usr/bin/llvm-symbolizer-10

    - name: Install LLVM 10 for 20.04
      if: ${{ matrix.os == 'ubuntu-20.04' && matrix.env.CC == 'clang' }}
      run: |
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add
        sudo apt-add-repository "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-10 main"
        sudo apt-get install -y --no-install-recommends clang-10 llvm-10 gdb
        sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-10 60 && sudo update-alternatives --set clang /usr/bin/clang-10
        sudo update-alternatives --install /usr/bin/llvm-symbolizer llvm-symbolizer /usr/bin/llvm-symbolizer-10 60 && sudo update-alternatives --set llvm-symbolizer /usr/bin/llvm-symbolizer-10

    - name: Install GCC
      if: ${{ matrix.env.CC == 'gcc' }}
      run: |
        sudo apt-get install -y --no-install-recommends gcc gdb

    - name: Show versions
      run: |
        $CC --version
        make --version

    - name: Build
      run: |
        export PATH=$(echo "$PATH" | sed -e 's#:/home/linuxbrew/[^:]\+##g')
        CFLAGS="${BUILD_CFLAGS}" ./configure -C --enable-werror --prefix=$HOME/freeradius --with-shared-libs=$LIBS_SHARED --with-threads=$LIBS_OPTIONAL --with-udpfromto=$LIBS_OPTIONAL --with-openssl=$LIBS_OPTIONAL --with-pcre=$LIBS_OPTIONAL --enable-reproducible-builds=${REPRODUCIBLE}
        make -j `nproc`

    - name: clang scan
      run: |
        make -j `nproc` scan && [ "$(find build/plist/ -name *.html)" = '' ]
      if: ${{ matrix.env.CC == 'clang' }}

    - name: Test
      run: make ci-test
