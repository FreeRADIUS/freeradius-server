name: CI

on:
  push:
    branches-ignore:
      - coverity_scan
  pull_request:

env:
  ASAN_OPTIONS: symbolize=1 detect_leaks=1 detect_stack_use_after_return=1
  LSAN_OPTIONS: fast_unwind_on_malloc=0:malloc_context_size=50
  KQUEUE_DEBUG: yes
  M_PERTURB: "0x42"
  PANIC_ACTION: "gdb -batch -x raddb/panic.gdb %e %p 1>&0 2>&0"
  SMTP_TEST_SERVER: 127.0.0.1
  IMAP_TEST_SERVER: 127.0.0.1
  SQL_MYSQL_TEST_SERVER: 127.0.0.1
  SQL_POSTGRESQL_TEST_SERVER: 127.0.0.1
  LDAP_TEST_SERVER: 127.0.0.1
  LDAP_TEST_SERVER_PORT: 3890
#  REDIS_TEST_SERVER: 127.0.0.1
#  REDIS_IPPOOL_TEST_SERVER: 127.0.0.1
  ANALYZE_C_DUMP: 1
  FR_GLOBAL_POOL: 4M
  CI: 1
  GH_ACTIONS: 1

jobs:
  ci:

#
#  Launching these containers takes the best part of a minute, so we configure
#  the pre-installed, local instances of these services instead.
#
#    services:
#      mysql:
#        image: mysql
#        env:
#          MYSQL_ALLOW_EMPTY_PASSWORD: yes
#        ports:
#          - 3306:3306
#        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
#
#      postgres:
#        image: postgres
#        env:
#          POSTGRES_HOST_AUTH_METHOD: trust
#        ports:
#          - 5432:5432
#        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
#

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-18.04
#          - ubuntu-20.04
        env:
          - { CC: gcc,   TEST_CERTS: yes, DO_BUILD: yes, LIBS_OPTIONAL: no,  LIBS_SHARED: yes, BUILD_CFLAGS: "-DWITH_EVAL_DEBUG" }
          - { CC: gcc,   TEST_CERTS: yes, DO_BUILD: yes, LIBS_OPTIONAL: yes, LIBS_SHARED: yes, BUILD_CFLAGS: "-DWITH_EVAL_DEBUG" }
          - { CC: gcc,   TEST_CERTS: yes, DO_BUILD: yes, LIBS_OPTIONAL: yes, LIBS_SHARED: yes, BUILD_CFLAGS: "-DWITH_EVAL_DEBUG -O2 -g3" }
          - { CC: gcc,   TEST_CERTS: yes, DO_BUILD: yes, LIBS_OPTIONAL: yes, LIBS_SHARED: yes, BUILD_CFLAGS: "-DNDEBUG" }
          - { CC: clang, TEST_CERTS: yes, DO_BUILD: yes, LIBS_OPTIONAL: no,  LIBS_SHARED: yes, BUILD_CFLAGS: "-DWITH_EVAL_DEBUG" }
          - { CC: clang, TEST_CERTS: yes, DO_BUILD: yes, LIBS_OPTIONAL: yes, LIBS_SHARED: yes, BUILD_CFLAGS: "-DWITH_EVAL_DEBUG" }
          - { CC: clang, TEST_CERTS: yes, DO_BUILD: yes, LIBS_OPTIONAL: yes, LIBS_SHARED: yes, BUILD_CFLAGS: "-DWITH_EVAL_DEBUG -O2 -g3" }
          - { CC: clang, TEST_CERTS: yes, DO_BUILD: yes, LIBS_OPTIONAL: yes, LIBS_SHARED: yes, BUILD_CFLAGS: "-DNDEBUG" }

    env: ${{ matrix.env }}

    name: "${{ matrix.os }} ${{ matrix.env.CC }} ${{ toJson(matrix.env) }}"

    steps:

    # Checkout, but defer pulling LFS objects until we've restored the cache
    - uses: actions/checkout@v2
      with:
        lfs: false

    - name: Create LFS file list as cache key
      run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

    - name: Restore LFS cache
      uses: actions/cache@v2
      id: lfs-cache
      with:
        path: .git/lfs
        key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}-v1

    # Now the LFS pull will be local if we hit the cache, or remote otherwise
    - name: Git LFS pull
      run: git lfs pull

    - name: Package manager performance improvements
      run: |
        sudo sh -c 'echo force-unsafe-io > /etc/dpkg/dpkg.cfg.d/02speedup'
        echo 'man-db man-db/auto-update boolean false' | sudo debconf-set-selections
        sudo dpkg-reconfigure man-db

    - uses: actions/setup-ruby@v1

    - name: Freshen APT repo metadata
      run: |
        sudo apt-get update

    - name: Install fixture (redis)
      run: |
        sudo apt-get install -y --no-install-recommends redis-server redis-tools
        sudo systemctl start redis-server

    - name: Install fixture (openldap)
      run: |
        sudo apt-get install -y --no-install-recommends slapd ldap-utils apparmor-utils
        sudo systemctl stop slapd
        sudo aa-complain /usr/sbin/slapd

    - name: Install fixture (dovecot imapd)
      run: |
        sudo apt-get install -y --no-install-recommends dovecot-imapd
        sudo systemctl stop dovecot
        sudo aa-complain /usr/sbin/dovecot

    - name: Install fixture (exim)
      run: |
        sudo apt-get install -y --no-install-recommends exim4
        sudo systemctl stop exim4

    - name: Configure fixture (PostgreSQL)
      run: |
        export PG_VER=13
        sudo sh -c "echo host  all all 127.0.0.1/32 trust >  /etc/postgresql/$PG_VER/main/pg_hba.conf"
        sudo sh -c "echo local all all              trust >> /etc/postgresql/$PG_VER/main/pg_hba.conf"
        sudo systemctl start postgresql

    - name: Configure fixture (MySQL)
      run: |
        sudo systemctl start mysql
        mysql -h 127.0.0.1 -uroot -proot -e "ALTER USER 'root'@'localhost' IDENTIFIED BY '';";

    - name: Install cassandra driver (not yet available on 20.04)
      if: ${{ matrix.os != 'ubuntu-20.04' }}
      run: sudo ./scripts/ci/cassandra-install.sh

    - name: Install common build dependencies
      run: |
        sudo apt-get install -y --no-install-recommends \
        autoconf \
        build-essential \
        debhelper \
        devscripts \
        dh-make \
        dovecot-dev \
        fakeroot \
        firebird-dev \
        freetds-dev \
        ldap-utils \
        libcap-dev \
        libcollectdclient-dev \
        libcurl4-openssl-dev \
        libgdbm-dev \
        libgoogle-perftools-dev \
        libhiredis-dev \
        libidn11-dev \
        libiodbc2 \
        libiodbc2-dev \
        libjson-c-dev \
        libjson-perl \
        libkqueue-dev \
        libkrb5-dev \
        libldap2-dev \
        libluajit-5.1-dev \
        libmemcached-dev \
        libmysqlclient-dev \
        libnl-genl-3-dev \
        libpam0g-dev \
        libpcap-dev \
        libpcre3-dev \
        libperl-dev \
        libpq-dev \
        libpython-all-dev \
        libreadline-dev \
        libsnmp-dev \
        libssl-dev \
        libtalloc-dev \
        libunbound-dev \
        libwbclient-dev \
        libykclient-dev \
        libyubikey-dev \
        lintian \
        luajit \
        openssl \
        pbuilder \
        python-dev \
        python3-pip \
        quilt

    - name: Install JSON build deps for 18.04
      if: ${{ matrix.os == 'ubuntu-18.04' }}
      run: sudo apt-get install -y --no-install-recommends libjson-c3

    - name: Install JSON build deps for 20.04
      if: ${{ matrix.os == 'ubuntu-20.04' }}
      run: sudo apt-get install -y --no-install-recommends libjson-c4

    - name: Install tacacs_plus
      run: |
        pip3 install tacacs_plus

    - name: Install LLVM 10 for 18.04
      if: ${{ matrix.os == 'ubuntu-18.04' && matrix.env.CC == 'clang' }}
      run: |
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add
        sudo apt-add-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main"
        sudo apt-get install -y --no-install-recommends clang-10 llvm-10 gdb
        sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-10 60 && sudo update-alternatives --set clang /usr/bin/clang-10
        sudo update-alternatives --install /usr/bin/llvm-symbolizer llvm-symbolizer /usr/bin/llvm-symbolizer-10 60 && sudo update-alternatives --set llvm-symbolizer /usr/bin/llvm-symbolizer-10

    - name: Install GCC 10 for 18.04
      if: ${{ matrix.os == 'ubuntu-18.04' && matrix.env.CC == 'gcc' }}
      run: |
        sudo apt-get install -y --no-install-recommends gcc-10 gccgo-10 gdb
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 60 && sudo update-alternatives --set gcc /usr/bin/gcc-10

    - name: Install LLVM 10 for 20.04
      if: ${{ matrix.os == 'ubuntu-20.04' && matrix.env.CC == 'clang' }}
      run: |
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add
        sudo apt-add-repository "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-10 main"
        sudo apt-get install -y --no-install-recommends clang-10 llvm-10 gdb
        sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-10 60 && sudo update-alternatives --set clang /usr/bin/clang-10
        sudo update-alternatives --install /usr/bin/llvm-symbolizer llvm-symbolizer /usr/bin/llvm-symbolizer-10 60 && sudo update-alternatives --set llvm-symbolizer /usr/bin/llvm-symbolizer-10

    - name: Install GCC 10 for 20.04
      if: ${{ matrix.os == 'ubuntu-20.04' && matrix.env.CC == 'gcc' }}
      run: |
        sudo apt-get install -y --no-install-recommends gcc-10 gccgo-10 gdb
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 60 && sudo update-alternatives --set gcc /usr/bin/gcc-10

    - name: Show versions
      run: |
        $CC --version
        make --version

    - name: Minimal configure
      run: ./configure -C --without-modules
      if: ${{ matrix.env.DO_BUILD == 'no' }}

    - name: Full configure
      run: |
        if $CC -v 2>&1 | grep clang > /dev/null; then
            echo "Enabling llvm sanitizers"
            enable_llvm_sanitizers="--enable-llvm-address-sanitizer --enable-llvm-leak-sanitizer --enable-llvm-undefined-behaviour-sanitizer"
        else
            enable_llvm_sanitizers=""
        fi
        CFLAGS="${BUILD_CFLAGS}" ./configure -C \
            --enable-werror \
            $enable_llvm_sanitizers \
            --prefix=$HOME/freeradius \
            --with-shared-libs=$LIBS_SHARED \
            --with-threads=$LIBS_OPTIONAL \
            --with-udpfromto=$LIBS_OPTIONAL \
            --with-openssl=$LIBS_OPTIONAL \
            --with-pcre=$LIBS_OPTIONAL \
            --with-rlm-python-bin=/usr/bin/python2.7 \
        || cat ./config.log
        echo "Contents of src/include/autoconf.h"
        cat "./src/include/autoconf.h"
      if: ${{ matrix.env.DO_BUILD != 'no' }}

    - name: Make
      run: |
        make -j `nproc`
      if: ${{ matrix.env.DO_BUILD != 'no' }}

    - name: Clang Static Analyzer
      run: |
        make -j `nproc` scan && [ "$(find build/plist/ -name *.html)" = '' ];
      if: ${{ matrix.env.DO_BUILD != 'no' && matrix.env.CC == 'clang' }}

    - name: "Clang Static Analyzer: Store assets on failure"
      uses: actions/upload-artifact@v2
      with:
        name: clang-scan.tgz
        path: build/plist/**/*.html
      if: ${{ matrix.env.DO_BUILD != 'no' && matrix.env.CC == 'clang' && failure() }}

    - name: Setup fixtures
      run: |
        for i in \
            postgresql-setup.sh \
            imap-setup.sh \
            exim-setup.sh \
            mysql-setup.sh \
            ldap-setup.sh \
            redis-setup.sh; do

            script="./scripts/ci/$i"
            echo "Calling $i"
            $script
        done
      if: ${{ matrix.env.DO_BUILD != 'no' }}

    - name: Test
      run: make ci-test
