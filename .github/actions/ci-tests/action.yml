name: ci-tests-docker

inputs:
  sql_mysql_test_server:
    description: MySQL server host
    default: 127.0.0.1
  sql_postgresql_test_server:
    description: PostgreSQL server host
    default: 127.0.0.1
  ldap_test_server:
    description: LDAP server host
    default: 127.0.0.1
  ldap_test_server_port:
    description: LDAP server port
    default: 3890
  ldaps_test_server_port:
    description: LDAPS server port
    default: 6361
  ldap389_test_server:
    description: 389DS server host
    default: 127.0.0.1
  ldap389_test_server_port:
    description: 389DS server port
    default: 3892
  active_directory_test_server:
    description: AD server host
    default: 127.0.0.1

  rest_test_server:
    description: REST server host
    default: 127.0.0.1
  rest_test_port:
    description: REST server HTTP port
    default: 8080
  rest_test_ssl_port:
    description: REST server HTTPS port
    default: 8443

  redis_test_server:
    description: Redis server host
    default: 127.0.0.1

  imap_test_server:
    description: IMAP server host
    default: 127.0.0.1
  imap_test_server_port:
    description: IMAP server IMAP port
    default: 1430
  imap_test_server_ssl_port:
    description: IMAP server IMAPS port
    default: 1432

  smtp_test_server:
    description: SMTP server host
    default: 127.0.0.1
  smtp_test_server_port:
    description: SMTP server SMTP port
    default: 2525

  use_docker:
    desription: True if running in a Docker container
    default: false


runs:
  using: composite

  steps:

    # Temporarily replace ucf (for config merge) with cp since it's
    # terribly slow! Not in Docker, where it isn't installed.
    - name: Replace ucf
      if: ${{ inputs.use_docker != 'true' }}
      shell: bash
      run: |
        sudo mv /usr/bin/ucf /usr/bin/ucf.disabled
        sudo sh -c 'echo "#!/bin/sh"                                                   >  /usr/bin/ucf'
        sudo sh -c 'echo "while case \$1 in -*) true;; *) false;; esac do shift; done" >> /usr/bin/ucf'
        sudo sh -c 'echo "cp -v \$@"                                                   >> /usr/bin/ucf'
        sudo chmod +x /usr/bin/ucf

    - name: Do not start daemons on package install
      shell: bash
      run: |
        echo "#! /bin/sh" | sudo tee /usr/sbin/policy-rc.d
        echo "echo Skipping daemon startup" | sudo tee -a /usr/sbin/policy-rc.d
        echo "exit 101" | sudo tee -a /usr/sbin/policy-rc.d
        sudo chmod 755 /usr/sbin/policy-rc.d

    - name: Set up repositories
      shell: bash
      run: |
        wget -O - https://openresty.org/package/pubkey.gpg | sudo apt-key add -
        echo "deb http://openresty.org/package/ubuntu $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/openresty.list

        sudo apt-get update

    - name: Install test servers
      shell: bash
      env:
        USE_DOCKER: ${{ inputs.use_docker }}
      run: |
        sudo apt-get install -y --no-install-recommends \
          389-ds \
          dovecot-imapd \
          exim4 \
          openresty \
          redis-server \
          slapd

        test x"$USE_DOCKER" = "xtrue" || sudo apt-get install -y --no-install-recommends apparmor-utils
        test x"$USE_DOCKER" = "xtrue" || sudo systemctl stop dovecot exim4 slapd openresty
        test x"$USE_DOCKER" = "xtrue" || sudo aa-complain /usr/sbin/slapd

        echo "samba-common samba-common/workgroup string WORKGROUP" | sudo debconf-set-selections
        echo "samba-common samba-common/dhcp boolean false" | sudo debconf-set-selections
        echo "samba-common samba-common/do_debconf boolean true" | sudo debconf-set-selections
        sudo apt-get install -y samba winbind krb5-user

    - name: Install test clients
      shell: bash
      run: |
        sudo apt-get install -y --no-install-recommends \
          apparmor-utils \
          redis-tools \
          oathtool \
          ldap-utils

    - name: Install test clients (containers)
      if: ${{ inputs.use_docker == 'true' }}
      shell: bash
      run: |
        sudo apt-get install -y --no-install-recommends \
          mariadb-client \
          postgresql-client

    - name: Configure databases (GitHub runner)
      if: ${{ inputs.use_docker != 'true' }}
      shell: bash
      run: |
        export PG_VER=14
        sudo sh -c "echo host  all all 127.0.0.1/32 trust >  /etc/postgresql/$PG_VER/main/pg_hba.conf"
        sudo sh -c "echo local all all              trust >> /etc/postgresql/$PG_VER/main/pg_hba.conf"

        sudo systemctl start mysql postgresql redis-server

        mysql -h 127.0.0.1 -uroot -proot -e "ALTER USER 'root'@'localhost' IDENTIFIED BY '';";

    - name: Setup git (containers)
      if: ${{ inputs.use_docker == 'true' }}
      shell: bash
      run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

    - name: Configure databases (containers)
      if: ${{ inputs.use_docker == 'true' }}
      shell: bash
      run: |
        mysql -h ${{ inputs.sql_mysql_test_server }} -u root -e "CREATE USER 'radius'@'%' IDENTIFIED WITH mysql_native_password; ALTER USER 'radius'@'%' IDENTIFIED BY 'radpass';"
        mysql -h ${{ inputs.sql_mysql_test_server }} -u root -e "GRANT ALL ON radius.* TO 'radius'; FLUSH PRIVILEGES;"

    - name: Setup databases
      shell: bash
      env:
        USE_DOCKER: ${{ inputs.use_docker }}
        SQL_MYSQL_TEST_SERVER: ${{ inputs.sql_mysql_test_server }}
        SQL_POSTGRESQL_TEST_SERVER: ${{ inputs.sql_postgresql_test_server }}
        LDAP_TEST_SERVER: ${{ inputs.ldap_test_server }}
        LDAP_TEST_SERVER_PORT: ${{ inputs.ldap_test_server_port }}
        LDAP_TEST_SERVER_SSL_PORT: ${{ inputs.ldaps_test_server_port }}
        RFC4533_TEST_SERVER: ldap://${{ inputs.ldap_test_server }}:${{ inputs.ldap_test_server_port }}/
        PERSISTENT_SEARCH_TEST_SERVER: ldap://${{ inputs.ldap389_test_server }}:${{ inputs.ldap389_test_server_port }}/
#        ACTIVE_DIRECTORY_TEST_SERVER: ${{ inputs.active_directory_test_server }}
        REST_TEST_SERVER: ${{ inputs.rest_test_server }}
        REST_TEST_SERVER_PORT: ${{ inputs.rest_test_port }}
        REST_TEST_SERVER_SSL_PORT: ${{ inputs.rest_test_ssl_port }}
        SMTP_TEST_SERVER: ${{ inputs.smtp_test_server }}
        SMTP_TEST_SERVER_PORT: ${{ inputs.smtp_test_server_port }}
        REDIS_TEST_SERVER: ${{ inputs.redis_test_server }}
        REDIS_IPPOOL_TEST_SERVER: ${{ inputs.redis_test_server }}
        CACHE_REDIS_TEST_SERVER: ${{ inputs.redis_test_server }}
        IMAP_TEST_SERVER: ${{ inputs.imap_test_server }}
        IMAP_TEST_SERVER_PORT: ${{ inputs.imap_test_server_port }}
        IMAP_TEST_SERVER_SSL_PORT: ${{ inputs.imap_test_server_ssl_port }}
      run: |
        [ -d /opt/openssl ] && export PATH=/opt/openssl/bin:$PATH

        for i in \
            postgresql-setup.sh \
            imap-setup.sh \
            exim-setup.sh \
            samba-setup.sh \
            mysql-setup.sh \
            openresty-setup.sh \
            ldap-setup.sh \
            ldap1-setup.sh \
            389ds-setup.sh \
            redis-setup.sh; do

            script="./scripts/ci/$i"
            echo
            echo "================================================================================"
            echo "Calling $i"
            echo
            if ! $script; then
              exit 1
            fi
        done
        echo
        echo "Setup scripts complete"
        echo "================================================================================"


    - name: Run full CI tests
      shell: bash
      run: |
        [ -d /opt/openssl ] && export PATH=/opt/openssl/bin:$PATH

        make -j `nproc` test.keywords test.unit test.auth test.digest
        make test.modules.redis test.modules.redis_ippool
        make -j `nproc` test.modules
        make ci-test

      env:
        USE_DOCKER: ${{ inputs.use_docker }}
        SQL_MYSQL_TEST_SERVER: ${{ inputs.sql_mysql_test_server }}
        SQL_POSTGRESQL_TEST_SERVER: ${{ inputs.sql_postgresql_test_server }}
        LDAP_TEST_SERVER: ${{ inputs.ldap_test_server }}
        LDAP_TEST_SERVER_PORT: ${{ inputs.ldap_test_server_port }}
        LDAP_TEST_SERVER_SSL_PORT: ${{ inputs.ldaps_test_server_port }}
        RFC4533_TEST_SERVER: ldap://${{ inputs.ldap_test_server }}:${{ inputs.ldap_test_server_port }}/
        PERSISTENT_SEARCH_TEST_SERVER: ldap://${{ inputs.ldap389_test_server }}:${{ inputs.ldap389_test_server_port }}/
        ACTIVE_DIRECTORY_TEST_SERVER: ${{ inputs.active_directory_test_server }}
        WINBIND_TEST_SERVER: ${{ inputs.active_directory_test_server }}
        REST_TEST_SERVER: ${{ inputs.rest_test_server }}
        REST_TEST_SERVER_PORT: ${{ inputs.rest_test_port }}
        REST_TEST_SERVER_SSL_PORT: ${{ inputs.rest_test_ssl_port }}
        SMTP_TEST_SERVER: ${{ inputs.smtp_test_server }}
        SMTP_TEST_SERVER_PORT: ${{ inputs.smtp_test_server_port }}
        REDIS_TEST_SERVER: ${{ inputs.redis_test_server }}
        REDIS_IPPOOL_TEST_SERVER: ${{ inputs.redis_test_server }}
        CACHE_REDIS_TEST_SERVER: ${{ inputs.redis_test_server }}
        IMAP_TEST_SERVER: ${{ inputs.imap_test_server }}
        IMAP_TEST_SERVER_PORT: ${{ inputs.imap_test_server_port }}
        IMAP_TEST_SERVER_SSL_PORT: ${{ inputs.imap_test_server_ssl_port }}

    # Restore ucf
    - name: Restore ucf
      if: ${{ inputs.use_docker != 'true' }}
      shell: bash
      run: sudo mv -f /usr/bin/ucf.disabled /usr/bin/ucf
