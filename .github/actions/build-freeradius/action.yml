name: build-freeradius

inputs:
  use_sanitizers:
    desription: Enable sanitizers if true
    default: false
  cc:
    desription: Which CC to use
    default: gcc
  test_type:
    desription: What test is being run
    default: gcc
  platform:
    description: Platform the build is on


runs:
  using: composite

  steps:

    - name: Create LFS file list as cache key
      shell: bash
      run: |
        git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

    - name: Restore LFS cache
      uses: actions/cache@v4
      id: lfs-cache
      with:
        path: .git/lfs
        key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}-v1

    # Now the LFS pull will be local if we hit the cache, or remote otherwise
    - name: Git LFS pull
      shell: bash
      run: |
        git lfs pull

    - name: Restore eapol_test build directory from cache
      uses: actions/cache@v4
      id: hostapd-cache
      with:
        path: ${{ env.HOSTAPD_BUILD_DIR }}
        key: hostapd-${{ runner.os }}-${{ inputs.platform }}-${{ env.HOSTAPD_GIT_TAG }}-v4
      if: ${{ inputs.test_type != 'fuzzing' }}

    #  Has issues in Docker container when running on GitHub...
    - uses: ruby/setup-ruby@v1
      if: ${{ inputs.test_type == 'fixtures' && matrix.os.runs_on == 'self-hosted' }}
      with:
        ruby-version: 2.7
      env:
        ImageOS: ${{ matrix.os.imageos }}

    #  ...so install from packages on GitHub
    - name: Install ruby
      if: ${{ inputs.test_type == 'fixtures' && matrix.os.runs_on != 'self-hosted' }}
      shell: bash
      run: |
        sudo apt-get install -y --no-install-recommends ruby-dev

    - name: Install cassandra driver (not yet available on 20.04)
      if: ${{ matrix.os.code == 'ubuntu1804' }}
      shell: bash
      run: sudo ./scripts/ci/cassandra-install.sh

    - name: Install dependencies (macOS)
      if: ${{ runner.os == 'macOS' }}
      shell: bash
      run: |
        brew install \
          cassandra-cpp-driver \
          gperftools \
          hiredis \
          json-c \
          libidn \
          libmemcached \
          llvm@14 \
          luajit \
          mariadb \
          make \
          mruby \
          openssl@1.1 \
          openssl \
          talloc
        ln -s `brew --prefix`/opt/make/bin/gmake /usr/local/bin/make
        echo "#! /bin/sh"               >> /usr/local/bin/nproc
        echo "sysctl -n hw.physicalcpu" >> /usr/local/bin/nproc
        chmod +x /usr/local/bin/nproc
      env:
        HOMEBREW_NO_AUTO_UPDATE: 1
        HOMEBREW_NO_INSTALL_CLEANUP: 1
        HOMEBREW_CLEANUP_PERIODIC_FULL_DAYS: 3650

    - name: Show versions
      shell: bash
      env:
        CC: ${{ inputs.cc }}
      run: |
        $CC --version
        make --version
        krb5-config --all || :
        pcre-config --libs-posix --version 2>/dev/null || :
        pcre2-config --libs-posix --version 2>/dev/null || :
        [ -d /opt/openssl ] && export PATH=/opt/openssl/bin:$PATH
        openssl version

    - name: Configure
      shell: bash
      env:
        USE_SANITIZERS: ${{ inputs.use_sanitizers }}
        CC: ${{ inputs.cc }}
        TEST_TYPE: ${{ inputs.test_type }}
      run: |
        enable_sanitizers=""
        if $CC -v 2>&1 | grep clang > /dev/null; then
            if "$USE_SANITIZERS" = "true"; then
                echo "Enabling sanitizers"
                enable_sanitizers="--enable-address-sanitizer --enable-undefined-behaviour-sanitizer"
                if [ "`uname`" != "Darwin" ]; then
                    enable_sanitizers="$enable_sanitizers --enable-leak-sanitizer"
                fi
            else
                echo "Sanitizers are disabled"
            fi
            if [ "$TEST_TYPE" = "fuzzing" ]; then
                echo "Enabling fuzzer"
                enable_sanitizers="$enable_sanitizers --enable-fuzzer"
            fi
        fi
        build_paths=""
        if [ "`uname`" = "Darwin" ]; then
            build_paths="--with-libfreeradius-ldap-lib-dir=`brew --prefix`/opt/openldap/lib --with-libfreeradius-ldap-include-dir=`brew --prefix`/opt/openldap/include --with-openssl-lib-dir=`brew --prefix`/opt/openssl/lib --with-openssl-include-dir=`brew --prefix`/opt/openssl/include --with-unixodbc-lib-dir=`brew --prefix`/opt/unixodbc/lib --with-unixodbc-include-dir=`brew --prefix`/opt/unixodbc/include"
        elif [ -d /opt/openssl ]; then
            export PATH=/opt/openssl/bin:$PATH
            build_paths="--with-openssl-lib-dir=/opt/openssl/lib64 --with-openssl-include-dir=/opt/openssl/include"
        fi
        CFLAGS="${BUILD_CFLAGS}" ./configure -C \
            --enable-developer \
            --enable-werror \
            $enable_sanitizers \
            $build_paths \
            --prefix=$HOME/freeradius \
            --with-threads=$LIBS_OPTIONAL \
            --with-udpfromto=$LIBS_OPTIONAL \
            --with-openssl=$LIBS_OPTIONAL \
            --with-pcre=$LIBS_OPTIONAL \
        || {
            echo "config.log"
            cat config.log
            echo "Contents of src/include/autoconf.h"
            cat "./src/include/autoconf.h"
            exit 1
        }

    - name: Make
      if: ${{ inputs.test_type != 'fuzzing' }}
      shell: bash
      run: |
        [ -d /opt/openssl ] && export PATH=/opt/openssl/bin:$PATH
        make -j `nproc`

    # Disabled on MacOS and when fuzzing to reduce the runtime
    - name: Clang Static Analyzer
      if: ${{ inputs.cc == 'clang' && runner.os != 'macOS' && inputs.test_type != 'fuzzing' }}
      shell: bash
      run: |
        make -j `nproc` scan && [ "$(find build/plist/ -name *.html)" = '' ];

    - name: "Clang Static Analyzer: Store assets on failure"
      if: ${{ inputs.cc == 'clang' && failure() }}
      uses: actions/upload-artifact@v4
      with:
        name: clang-scan.tgz
        path: build/plist/**/*.html
        retention-days: 30
