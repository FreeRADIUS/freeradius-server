# -*- text -*-
#
#  ippool/mssql/queries.conf -- MSSQL queries for rlm_sqlippool
#
#  $Id$

# MSSQL-specific syntax
allocate_begin = "BEGIN TRAN"
allocate_commit = "COMMIT TRAN"

#
#  This series of queries allocates an IP address
#
#allocate_clear = "\
#	UPDATE ${ippool_table} \
#	SET \
#		NASIPAddress = '', \
#		pool_key = 0, \
#		CallingStationId = '', \
#		UserName = '', \
#		expiry_time = NULL \
#	WHERE pool_key = '${pool_key}'"

#
#  (Note: If your pool_key is set to Calling-Station-Id and not NAS-Port
#  then you may wish to delete the "AND nasipaddress = '%{%{Nas-IP-Address}:-%{Nas-IPv6-Address}}'
#  from the WHERE clause)
#
allocate_clear = "\
	UPDATE ${ippool_table} \
	SET \
		NASIPAddress = '', \
		pool_key = 0, \
		CallingStationID = '', \
		UserName = '', \
		expiry_time = NULL \
	WHERE expiry_time <= DATEADD(SECOND,-1,CURRENT_TIMESTAMP) \
	AND NASIPAddress = '%{%{Nas-IP-Address}:-%{Nas-IPv6-Address}}'"

#
#  The ORDER BY clause of this query tries to allocate the same IP-address
#  which user had last session...
#
allocate_find = "\
	WITH cte AS ( \
		SELECT TOP(1) FramedIPAddress FROM ${ippool_table} \
		WHERE pool_name = '%{control:${pool_name}}' \
		AND ( expiry_time < CURRENT_TIMESTAMP OR expiry_time IS NULL ) \
		OR ( NASIPAddress = '%{NAS-IP-Address}' AND pool_key = '${pool_key}' ) \
		ORDER BY \
			CASE WHEN UserName = '%{User-Name}' THEN 0 ELSE 1 END, \
			CASE WHEN CallingStationId = '%{Calling-Station-Id}' THEN 0 ELSE 1 END, \
			expiry_time \
	) \
	UPDATE cte WITH (rowlock, readpast) \
	SET FramedIPAddress = FramedIPAddress \
	OUTPUT INSERTED.FramedIPAddress"

#
#  If you prefer to allocate a random IP address every time, use this query instead.
#  Note: This is very slow if you have a lot of free IPs.
#
#allocate_find = "\
#	WITH cte AS ( \
#		SELECT TOP(1) FramedIPAddress FROM ${ippool_table} \
#		WHERE pool_name = '%{control:${pool_name}}' \
#		AND ( \
#			expiry_time < CURRENT_TIMESTAMP OR expiry_time IS NULL \
#		) \
#		ORDER BY \
#			newid() \
#	) \
#	UPDATE cte WITH (rowlock, readpast) \
#	SET FramedIPAddress = FramedIPAddress \
#	OUTPUT INSERTED.FramedIPAddress"

#
#  If an IP could not be allocated, check to see if the pool exists or not
#  This allows the module to differentiate between a full pool and no pool
#  Note: If you are not running redundant pool modules this query may be
#  commented out to save running this query every time an ip is not allocated.
#
pool_check = "\
	SELECT TOP(1) id \
	FROM ${ippool_table} \
	WHERE pool_name='%{control:${pool_name}}'"

#
#  This is the final IP Allocation query, which saves the allocated ip details.
#
allocate_update = "\
	UPDATE ${ippool_table} \
	SET \
		NASIPAddress = '%{NAS-IP-Address}', pool_key = '${pool_key}', \
		CallingStationId = '%{Calling-Station-Id}', \
		UserName = '%{User-Name}', expiry_time = DATEADD(SECOND,${lease_duration},CURRENT_TIMESTAMP) \
	WHERE FramedIPAddress = '%I'"

#
#  Use a stored procedure to find AND allocate the address. Read and customise
#  `procedure.sql` in this directory to determine the optimal configuration.
#
#allocate_begin = ""
#allocate_find = "\
#	EXEC fr_allocate_previous_or_new_framedipaddress \
#		@v_pool_name = '%{control:${pool_name}}', \
#		@v_username = '%{User-Name}', \
#		@v_callingstationid = '%{Calling-Station-Id}', \
#		@v_nasipaddress = '%{NAS-IP-Address}', \
#		@v_pool_key = '${pool_key}', \
#		@v_lease_duration = ${lease_duration} \
#	"
#allocate_update = ""
#allocate_commit = ""

#
#  This series of queries frees an IP number when an accounting START record arrives.
#
start_update = "\
	UPDATE ${ippool_table} \
	SET \
		expiry_time = DATEADD(SECOND,${lease_duration},CURRENT_TIMESTAMP) \
	WHERE NASIPAddress = '%{NAS-IP-Address}' \
	AND pool_key = '${pool_key}' \
	AND UserName = '%{User-Name}' \
	AND CallingStationId = '%{Calling-Station-Id}' \
	AND FramedIPAddress = '%{${attribute_name}}'"

#
#  Free an IP when an accounting STOP record arrives
#
stop_clear = "\
	UPDATE ${ippool_table} \
	SET \
		NASIPAddress = '', \
		pool_key = 0, \
		CallingStationId = '', \
		UserName = '', \
		expiry_time = NULL \
	WHERE NASIPAddress = '%{%{Nas-IP-Address}:-%{Nas-IPv6-Address}}' \
	AND pool_key = '${pool_key}' \
	AND UserName = '%{User-Name}' \
	AND CallingStationId = '%{Calling-Station-Id}' \
	AND FramedIPAddress = '%{${attribute_name}}'"

#
#  Update the expiry time for an IP when an accounting ALIVE record arrives
#
alive_update = "\
	UPDATE ${ippool_table} \
	SET \
		expiry_time = DATEADD(SECOND,${lease_duration},CURRENT_TIMESTAMP) \
	WHERE NASIPAddress = '%{%{Nas-IP-Address}:-%{Nas-IPv6-Address}}' \
	AND pool_key = '${pool_key}' \
	AND UserName = '%{User-Name}' \
	AND CallingStationId = '%{Calling-Station-Id}' \
	AND FramedIPAddress = '%{${attribute_name}}'"

#
#  Frees all IPs allocated to a NAS when an accounting ON record arrives
#
on_clear = "\
	UPDATE ${ippool_table} \
	SET \
		NASIPAddress = '', \
		pool_key = 0, \
		CallingStationId = '', \
		UserName = '', \
		expiry_time = NULL \
	WHERE NASIPAddress = '%{%{Nas-IP-Address}:-%{Nas-IPv6-Address}}'"

#
#  Frees all IPs allocated to a NAS when an accounting OFF record arrives
#
off_clear = "\
	UPDATE ${ippool_table} \
	SET \
		NASIPAddress = '', \
		pool_key = 0, \
		CallingStationId = '', \
		UserName = '', \
		expiry_time = NULL \
	WHERE NASIPAddress = '%{%{Nas-IP-Address}:-%{Nas-IPv6-Address}}'"
