# -*- text -*-
#
#  ippool/mssql/queries.conf -- MSSQL queries for rlm_sqlippool
#
#  $Id$

#
#  RADIUS (Accounting-Start)
#  DHCPv4 (Discover)
#

#
#  MSSQL-specific syntax - required if finding the address and updating
#  it are separate queries
#
#alloc_begin = "BEGIN TRAN"
#alloc_commit = "COMMIT TRAN"

alloc_begin = ""
alloc_commit = ""

#
#  Attempt to find the most recent existing IP address for the client
#
alloc_existing = "\
	WITH cte AS (
		SELECT TOP(1) address, expiry_time, gateway \
		FROM ${ippool_table} WITH (xlock rowlock readpast) \
		JOIN fr_ippool_status ON ${ippool_table}.status_id = fr_ippool_status.status_id \
		WHERE pool_name = '%{control.${pool_name}}' \
		AND owner = '${owner}' \
		AND fr_ippool_status.status IN ('dynamic', 'static') \
		ORDER BY expiry_time DESC \
	) \
	UPDATE cte \
	SET expiry_time = DATEADD(SECOND,${offer_duration},CURRENT_TIMESTAMP), \
	gateway = '${gateway}' \
	OUTPUT INSERTED.address \
	FROM ${ippool_table}"

#
#  Determine whether the requested IP address is available
#
alloc_requested = "\
	WITH cte AS (
		SELECT TOP(1) address, expiry_time, gateway \
		FROM ${ippool_table} WITH (xlock rowlock readpast) \
		JOIN fr_ippool_status ON ${ippool_table}.status_id = fr_ippool_status.status_id \
		WHERE pool_name = '%{control.${pool_name}}' \
		AND address = '%{${requested_address} || 0.0.0.0}' \
		AND fr_ippool_status.status = 'dynamic' \
		AND expiry_time < CURRENT_TIMESTAMP \
	) \
	UPDATE cte \
	SET expiry_time = DATEADD(SECOND,${offer_duration},CURRENT_TIMESTAMP), \
	gateway = '${gateway}', \
	owner = '${owner}' \
	OUTPUT INSERTED.address \
	FROM ${ippool_table}"

#
#  If the existing address can't be found this query will be run to
#  find a free address
#
alloc_find = "\
	WITH cte AS (
		SELECT TOP(1) address, expiry_time, gateway, owner \
		FROM ${ippool_table} WITH (xlock rowlock readpast) \
		JOIN fr_ippool_status ON ${ippool_table}.status_id = fr_ippool_status.status_id \
		WHERE pool_name = '%{control.${pool_name}}' \
		AND expiry_time < CURRENT_TIMESTAMP \
		AND fr_ippool_status.status = 'dynamic' \
		ORDER BY expiry_time \
	) \
	UPDATE cte \
	SET expiry_time = DATEADD(SECOND,${offer_duration},CURRENT_TIMESTAMP), \
	gateway = '${gateway}' \
	owner = '${owner}' \
	OUTPUT INSERTED.address \
	FROM ${ippool_table}"

#
#  Alternatively attempt both in one, more complex, query
#
#  The ORDER BY clause of this query tries to allocate the same IP-address
#  which user had last session.  Ensure that owner is unique to the user
#  within a given pool.
#
#alloc_find = "\
#	UPDATE TOP(1) ${ippool_table} \
#	SET address = address, \
#	owner = '${owner}', \
#	expiry_time = DATEADD(SECOND,${offer_duration},CURRENT_TIMESTAMP), \
#	gateway = '${gateway}' \
#	OUTPUT INSERTED.address \
#	FROM ${ippool_table} \
#	WHERE ${ippool_table}.id IN ( \
#		SELECT TOP (1) id FROM ( \
#			(SELECT TOP(1) id, 1 AS o FROM ${ippool_table} WITH (xlock rowlock readpast) \
#			JOIN fr_ippool_status ON ${ippool_table}.status_id = fr_ippool_status.status_id \
#			WHERE pool_name = '%{control.${pool_name}}' \
#			AND owner = '${owner}' \
#			AND fr_ippool_status.status IN ('dynamic', 'static')) \
#			UNION \
#			(SELECT TOP(1) id, 2 AS o FROM ${ippool_table} WITH (xlock rowlock readpast) \
#			JOIN fr_ippool_status ON ${ippool_table}.status_id = fr_ippool_status.status_id \
#			WHERE pool_name = '%{control.${pool_name}}' \
#			AND address = '%{${requested_address} || 0.0.0.0}' \
#			AND fr_ippool_status.status = 'dynamic' \
#			AND expiry_time < CURRENT_TIMESTAMP ) \
#			UNION \
#			(SELECT TOP(1) id, 3 AS o FROM ${ippool_table} WITH (xlock rowlock readpast) \
#			JOIN fr_ippool_status ON ${ippool_table}.status_id = fr_ippool_status.status_id \
#			WHERE pool_name = '%{control.${pool_name}}' \
#			AND expiry_time < CURRENT_TIMESTAMP \
#			AND fr_ippool_status.status = 'dynamic' \
#			ORDER BY expiry_time) \
#		) AS q ORDER BY q.o \
#	)"

#
#  If you prefer to allocate a random IP address every time, use this query instead.
#  Note: This is very slow if you have a lot of free IPs.
#
#alloc_find = "\
#	WITH cte AS ( \
#		SELECT TOP(1) address FROM ${ippool_table} \
#		JOIN fr_ippool_status ON ${ippool_table}.status_id = fr_ippool_status.status_id \
#		WHERE pool_name = '%{control.${pool_name}}' \
#		AND expiry_time < CURRENT_TIMESTAMP \
#		AND fr_ippool_status.status = 'dynamic' \
#		ORDER BY \
#			newid() \
#	) \
#	UPDATE cte WITH (rowlock, readpast) \
#	SET address = address \
#	OUTPUT INSERTED.address"

#
#  If an IP could not be allocated, check to see if the pool exists or not
#  This allows the module to differentiate between a full pool and no pool
#  Note: If you are not running redundant pool modules this query may be
#  commented out to save running this query every time an ip is not allocated.
#
pool_check = "\
	SELECT TOP(1) id \
	FROM ${ippool_table} \
	WHERE pool_name='%{control.${pool_name}}'"

#
#  This is the final IP Allocation query, which saves the allocated ip details.
#  Only needed if the initial "find" query is not storing the allocation.
#
#alloc_update = "\
#	UPDATE ${ippool_table} \
#	SET \
#		gateway = '${gateway}', owner = '${owner}', \
#		expiry_time = DATEADD(SECOND,${offer_duration},CURRENT_TIMESTAMP) \
#	WHERE address = '%I'"

#
#  Use a stored procedure to find AND allocate the address. Read and customise
#  `procedure.sql` in this directory to determine the optimal configuration.
#
#alloc_begin = ""
#alloc_find = "\
#	EXEC fr_ippool_allocate_previous_or_new_address \
#		@v_pool_name = '%{control.${pool_name}}', \
#		@v_gateway = '${gateway}', \
#		@v_owner = '${owner}', \
#		@v_lease_duration = ${offer_duration}, \
#		@v_requested_address = '%{${requested_address} || 0.0.0.0}'
#	"
#alloc_update = ""
#alloc_commit = ""


#
#  RADIUS (Interim-Update)
#  DHCPv4 (Request)
#

#
#  This query revokes any active offers for addresses that a client is not
#  requesting.
#
update_free = "\
	UPDATE ${ippool_table} \
	SET \
		gateway = '', \
		owner = '', \
		expiry_time = CURRENT_TIMESTAMP \
	WHERE pool_name = '%{control.${pool_name}}' \
	AND owner = '${owner}' \
	AND address <> '${requested_address}' \
	AND expiry_time > CURRENT_TIMESTAMP \
	AND ${ippool_table}.status_id IN \
	(SELECT status_id FROM fr_ippool_status WHERE status = 'dynamic')"

#
#  Queries to update a lease.
#  This query must update a row when a lease is successfully requested -
#  queries that update no rows will result in a "notfound" response to
#  the module which by default will give a NAK reply (for DHCPv4).
#  In this example incrementing "counter" is used to achieve this.
#
update_update = "\
	UPDATE ${ippool_table} \
	SET \
		expiry_time = DATEADD(SECOND,${lease_duration},CURRENT_TIMESTAMP), \
		counter = counter + 1 \
	WHERE pool_name = '%{control.${pool_name}}' \
	AND owner = '${owner}' \
	AND address = '${requested_address}'"

#
#  RADIUS (Accounting-Stop)
#  DHCPv4 (Release)
#

#
#  Queries to release a lease.
#
release_clear = "\
	UPDATE ${ippool_table} \
	SET gateway = '', \
		owner = '0', \
		expiry_time = CURRENT_TIMESTAMP \
	WHERE pool_name = '%{control.${pool_name}}' \
	AND owner = '${owner}' \
	AND address = '${requested_address}'"


#
#  DHCPv4 (Decline)
#

#
#  Queries to mark leases as "bad"
#
mark_update = "\
	UPDATE ${ippool_table} \
	SET status_id = (SELECT status_id FROM fr_ippool_status WHERE status = 'declined') \
	WHERE pool_name = '%{control.${pool_name}}' \
	AND address = '${requested_address}' \
	AND owner = '${owner}'"

#
#  RADIUS (Accounting-On)
#  RADIUS (Accounting-Off)
#

#
#  Frees all IPs allocated to a gateway
#
bulk_release_clear = "\
	UPDATE ${ippool_table} \
	SET gateway = '', \
		owner = '0', \
		expiry_time = CURRENT_TIMESTAMP \
	WHERE pool_name = '%{control.${pool_name}}' \
	AND gateway = '${gateway}'"
