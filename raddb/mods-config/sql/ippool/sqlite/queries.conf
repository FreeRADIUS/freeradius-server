#  -*- text -*-
#
#  ippool/sqlite/queries.conf -- SQLite queries for rlm_sqlippool
#
#  $Id$


#
#  RADIUS (Accounting-Start)
#  DHCPv4 (Discover)
#

#
#  SQLite does not implement SELECT FOR UPDATE which is normally used to place
#  an exclusive lock over rows to prevent the same address from being
#  concurrently selected for allocation to multiple users.
#
#  The most granular read-blocking lock that SQLite has is an exclusive lock
#  over the database, so that's what we use. All locking in SQLite is performed
#  over the entire database and we perform a row update for any IP that we
#  allocate, requiring an exclusive lock. Taking the exclusive lock from the
#  start of the transaction (even if it were not required to guard the SELECT)
#  is actually quicker than if we deferred it causing SQLite to "upgrade" the
#  automatic shared lock for the transaction to an exclusive lock for the
#  subsequent UPDATE.
#
alloc_begin = "BEGIN EXCLUSIVE"
alloc_commit = "COMMIT"

#
#  This series of queries allocates an IP address
#

#
#  Is there an existing address for this client
#
alloc_existing = "SELECT address \
	FROM ${ippool_table} \
	JOIN fr_ippool_status \
	ON ${ippool_table}.status_id = fr_ippool_status.status_id \
	WHERE pool_name = '%{control.${pool_name}}' \
	AND owner = '${owner}' \
	AND status IN ('dynamic', 'static') \
	ORDER BY expiry_time DESC \
	LIMIT 1"

#
#  If the client has requested an address, is it available
#
alloc_requested = "SELECT address \
	FROM ${ippool_table} \
	JOIN fr_ippool_status \
	ON ${ippool_table}.status_id = fr_ippool_status.status_id \
	WHERE pool_name = '%{control.${pool_name}}' \
	AND address = '%{${requested_address} || 0.0.0.0}' \
	AND status = 'dynamic' \
	AND expiry_time < datetime('now')"

#
#  Finally find a free address
#
alloc_find = "\
	SELECT address \
	FROM ${ippool_table} \
	JOIN fr_ippool_status \
	ON ${ippool_table}.status_id = fr_ippool_status.status_id \
	WHERE pool_name = '%{control.${pool_name}}' \
	AND expiry_time < datetime('now') \
	AND status = 'dynamic' \
	ORDER BY expiry_time LIMIT 1"

#
# If you prefer to allocate a random IP address every time, use this query instead
#
#alloc_find = "\
#	SELECT address FROM ${ippool_table} \
#	JOIN fr_ippool_status \
#	ON ${ippool_table}.status_id = fr_ippool_status.status_id \
#	WHERE pool_name = '%{control.${pool-name}}' \
#	AND expiry_time IS NULL \
#	AND status = 'dynamic' \
#	ORDER BY RAND() \
#	LIMIT 1"


#
#  If an IP could not be allocated, check to see if the pool exists or not
#  This allows the module to differentiate between a full pool and no pool
#  Note: If you are not running redundant pool modules this query may be
#  commented out to save running this query every time an ip is not allocated.
#
pool_check = "\
	SELECT id \
	FROM ${ippool_table} \
	WHERE pool_name='%{control.${pool_name}}' \
	LIMIT 1"

#
#  This is the final IP Allocation query, which saves the allocated ip details
#
alloc_update = "\
	UPDATE ${ippool_table} \
	SET \
		gateway = '${gateway}', \
		owner = '${owner}', \
		expiry_time = datetime(strftime('%%s', 'now') + ${offer_duration}, 'unixepoch') \
	WHERE address = '%I'"


#
#  RADIUS (Interim-Update)
#  DHCPv4 (Request)
#

#
#  Query used to clear any other addresses that have been offered to the client
#
update_free = "\
	UPDATE ${ippool_table} \
	SET \
		gateway = '', \
		owner = '', \
		expiry_time = datetime('now') \
	WHERE pool_name = '%{control.${pool_name}}' \
	AND owner = '${owner}' \
	AND address <> '${requested_address}' \
	AND expiry_time > datetime('now') \
	AND ${ippool_table}.status_id IN \
	(SELECT status_id FROM fr_ippool_status WHERE status = 'dynamic')"

#
#  Queries to update a lease.
#  This query must update a row when a lease is successfully requested -
#  queries that update no rows will result in a "notfound" response to
#  the module which by default will give a NAK reply.  In this example
#  incrementing "counter" is used to achieve this.
#
update_update = "\
	UPDATE ${ippool_table} \
	SET \
		expiry_time = datetime(strftime('%%s', 'now') + ${lease_duration}, 'unixepoch'), \
		counter = counter + 1 \
	WHERE pool_name = '%{control.${pool_name}}' \
	AND owner = '${owner}' \
	AND address = '${requested_address}'"


#
#  RADIUS (Accounting-Stop)
#  DHCPv4 (Release)
#

#
#  Queries to release a lease
#
release_clear = "\
	UPDATE ${ippool_table} \
	SET gateway = '', \
		owner = '0', \
		expiry_time = datetime('now') \
	WHERE pool_name = '%{control.${pool_name}}' \
	AND owner = '${owner}' \
	AND address = '${requested_address}' \
	AND ${ippool_table}.status_id IN \
	(SELECT status_id FROM fr_ippool_status WHERE status = 'dynamic')"


#
#  DHCPv4 (Decline)
#

#
#  Queries to mark leases as "bad"
#
mark_update = "\
	UPDATE ${ippool_table} \
	SET status_id = (SELECT status_id FROM fr_ippool_status WHERE status = 'declined') \
	WHERE pool_name = '%{control.${pool_name}}' \
	AND address = '${requested_address}' \
	AND owner = '${owner}'"

#
#  RADIUS (Accounting-On)
#  RADIUS (Accounting-Off)
#

#
#  Frees all IPs allocated to a gateway
#
bulk_release_clear = "\
	UPDATE ${ippool_table} \
	SET gateway = '', \
		owner = '0', \
		expiry_time = datetime('now') \
	WHERE pool_name = '%{control.${pool_name}}' \
	AND gateway = '${gateway}'"
