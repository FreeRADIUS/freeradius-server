#  -*- text -*-
#
#  ippool/oracle/queries.conf -- Oracle queries for dhcp-ippool
#
#  $id: 416d59802a1321c16b936bb5e63c288ca3634bcd $

#
#  Due to Oracle's transaction focus, update queries further down are
#  wrapped in "commit" statements.


#
#  RADIUS (Accounting-Start)
#  DHCPv4 (Discover)
#

#
#  Use a stored procedure to find AND allocate the address. Read and customise
#  `procedure.sql` in this directory to determine the optimal configuration.
#  Oracle's locking mechanism limitations prevents the use of single queries
#  that can either find a client's existing address or the first available one.
#
alloc_begin = ""
alloc_find = "\
	SELECT fr_ippool_allocate_previous_or_new_address( \
		'%{control.${pool_name}}', \
		'${gateway}', \
		'${owner}', \
		'${offer_duration}', \
		'%{${requested_address}:-0.0.0.0}'
	) FROM dual"
alloc_update = ""
alloc_commit = ""


#
#  If you prefer to allocate a random IP address every time, use this query instead
#  Note: This is very slow if you have a lot of free IPs.
#
#alloc_find = "\
#	SELECT address FROM ${ippool_table} WHERE id IN ( \
#		SELECT id FROM ( \
#			SELECT * \
#			FROM ${ippool_table} \
#			JOIN fr_ippool_status \
#			ON ${ippool_table}.status_id = fr_ippool_status.status_id \
#			WHERE pool_name = '%{control.${pool_name}}' \
#			AND expiry_time < current_timestamp \
#			AND fr_ippool_status.status = 'dynamic' \
#			ORDER BY DBMS_RANDOM.VALUE \
#		) WHERE ROWNUM <= 1 \
#	) FOR UPDATE"

#
#  The above query again, but with SKIP LOCKED. This requires Oracle > 11g.
#  It may work in 9i and 10g, but is not documented, so YMMV.
#
#alloc_find = "\
#	SELECT address FROM ${ippool_table} WHERE id IN ( \
#		SELECT id FROM (\
#			SELECT * \
#			FROM ${ippool_table} \
#			JOIN fr_ippool_status \
#			ON ${ippool_table}.status_id = fr_ippool_status.status_id \
#			WHERE pool_name = '%{control.${pool_name}}' \
#			AND expiry_time < current_timestamp \
#			AND fr_ippool_status.status = 'dynamic' \
#			ORDER BY DBMS_RANDOM.VALUE \
#		) WHERE ROWNUM <= 1 \
#	) FOR UPDATE SKIP LOCKED"

#
# A tidier version that needs Oracle >= 12c
#
#alloc_find = "\
#	SELECT address FROM ${ippool_table} WHERE id IN (
#		SELECT id FROM ${ippool_table} \
#		JOIN fr_ippool_status \
#		ON ${ippool_table}.status_id = fr_ippool_status.status_id \
#		WHERE pool_name = '%{control.${pool_name}}' \
#		AND expiry_time < current_timestamp \
#		AND fr_ippool_status.status = 'dynamic' \
#		ORDER BY DBMS_RANDOM.VALUE \
#		FETCH FIRST 1 ROWS ONLY
#	) FROM UPDATE SKIP LOCKED"

#
#  If an IP could not be allocated, check to see whether the pool exists or not
#  This allows the module to differentiate between a full pool and no pool
#  Note: If you are not running redundant pool modules this query may be commented
#  out to save running this query every time an ip is not allocated.
#
pool_check = "\
	SELECT id \
	FROM (\
		SELECT id \
		FROM ${ippool_table} \
		WHERE pool_name = '%{control.Pool-Name}'\
	) WHERE ROWNUM = 1"

#
#  This query marks the IP address handed out by "alloc_find" as used
#  for the period of "offer_duration" after which time it may be reused.
#
#alloc_update = "\
#	UPDATE ${ippool_table} \
#	SET \
#		gateway = '${gateway}', \
#		owner = '${owner}', \
#		expiry_time = current_timestamp + INTERVAL '${offer_duration}' second(1) \
#	WHERE address = '%I'"


#
#  RADIUS (Interim-Update)
#  DHCPv4 (Request)
#

#
#  Queries to update a lease.
#  This query must update a row when a lease is successfully requested -
#  queries that update no rows will result in a "notfound" response to
#  the module which by default will give a DHCP-NAK reply.  In this example
#  incrementing "counter" is used to acheive this.
#
update_begin = "commit"
update_update = "\
	UPDATE ${ippool_table} \
	SET \
		expiry_time = current_timestamp + INTERVAL '${lease_duration}' second(1), \
		counter = counter + 1 \
	WHERE pool_name = '%{control.${pool_name}}' \
	AND owner = '${owner}' \
	AND address = '${requested_address}'"
update_commit = "commit"

#
#  RADIUS (Accounting-Stop)
#  DHCPv4 (Release)
#

#
#  Queries to release a lease
#
release_begin = "commit"
release_clear = "\
	UPDATE ${ippool_table} \
	SET gateway = '', \
		owner = '0', \
		expiry_time = current_timestamp \
	WHERE pool_name = '%{control.${pool_name}}' \
	AND owner = '${owner}' \
	AND address = '${requested_address}'"
release_commit = "commit"

#
#  DHCPv4 (Decline)
#

#
#  Queries to mark leases as "bad"
#
mark_begin = "commit"
mark_update = "\
	UPDATE ${ippool_table} \
	SET status_id = (SELECT status_id FROM fr_ippool_status WHERE status = 'declined') \
	WHERE pool_name = '%{control.${pool_name}}' \
	AND address = '${requested_address}' \
	AND owner = '${owner}'"
mark_commit = "commit"

#
#  RADIUS (Accounting-On)
#  RADIUS (Accounting-Off)
#

#
#  Frees all IPs allocated to a gateway
#
bulk_release_begin = "commit"
bulk_release_clear = "\
	UPDATE ${ippool_table} \
	SET gateway = '', \
		owner = '0', \
		expiry_time = current_timestamp \
	WHERE pool_name = '%{control.${pool_name}}' \
	AND gateway = '${gateway}'"
bulk_release_commit = "commit"
