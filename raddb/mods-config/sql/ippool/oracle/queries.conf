# -*- text -*-
#
#  ippool/oracle/queries.conf -- Oracle queries for rlm_sqlippool
#
#  $Id$

allocate_begin = "commit"
start_begin = "commit"
alive_begin = "commit"
stop_begin = "commit"
on_begin = "commit"
off_begin = "commit"

#
#  This query allocates an IP address from the Pool
#  The ORDER BY clause of this query tries to allocate the same IP-address
#  to the user that they had last session...
#
allocate_find = "\
	SELECT framedipaddress FROM ${ippool_table} WHERE id IN ( \
		SELECT id FROM ( \
			SELECT * \
			FROM ${ippool_table} \
			WHERE pool_name = '%{control:${pool_name}}' \
			AND ( \
				expiry_time < current_timestamp \
				OR ( nasipaddress = '%{NAS-IP-Address}' AND pool_key = '${pool_key}' ) \
			) \
			ORDER BY \
				DECODE(username,'%{SQL-User-Name}',2,1), \
				DECODE(callingstationid,'%{%{Calling-Station-Id}:-0}',2,1), \
				expiry_time \
		) WHERE ROWNUM <= 1 \
	) FOR UPDATE"

#
#  The above query again, but with SKIP LOCKED. This requires Oracle > 11g.
#  It may work in 9i and 10g, but is not documented, so YMMV.
#
#allocate_find = "\
#	SELECT framedipaddress FROM ${ippool_table} WHERE id IN ( \
#		SELECT id FROM ( \
#			SELECT * \
#			FROM ${ippool_table} \
#			WHERE pool_name = '%{control:${pool_name}}' \
#			AND ( \
#				expiry_time < current_timestamp \
#				OR ( nasipaddress = '%{NAS-IP-Address}' AND pool_key = '${pool_key}' ) \
#			) \
#			ORDER BY \
#				DECODE(username,'%{SQL-User-Name}',2,1), \
#				DECODE(callingstationid,'%{%{Calling-Station-Id}:-0}',2,1), \
#				expiry_time \
#		) WHERE ROWNUM <= 1 \
#	) FOR UPDATE SKIP LOCKED"

#
#  If you prefer to allocate a random IP address every time, use this query instead
#  Note: This is very slow if you have a lot of free IPs.
#
#allocate_find = "\
#	SELECT framedipaddress FROM ${ippool_table} WHERE id IN ( \
#		SELECT id FROM ( \
#			SELECT * \
#			FROM ${ippool_table} \
#			WHERE pool_name = '%{control:${pool_name}}' \
#			AND expiry_time < current_timestamp \
#			ORDER BY DBMS_RANDOM.VALUE \
#		) WHERE ROWNUM <= 1 \
#	) FOR UPDATE"

#
#  The above query again, but with SKIP LOCKED. This requires Oracle > 11g.
#  It may work in 9i and 10g, but is not documented, so YMMV.
#
#allocate_find = "\
#	SELECT framedipaddress FROM ${ippool_table} WHERE id IN ( \
#		SELECT id FROM (\
#			SELECT * \
#			FROM ${ippool_table} \
#			WHERE pool_name = '%{control:${pool_name}}' \
#			AND expiry_time < current_timestamp \
#			ORDER BY DBMS_RANDOM.VALUE \
#		) WHERE ROWNUM <= 1 \
#	) FOR UPDATE SKIP LOCKED"

#
#  If an IP could not be allocated, check to see whether the pool exists or not
#  This allows the module to differentiate between a full pool and no pool
#  Note: If you are not running redundant pool modules this query may be commented
#  out to save running this query every time an ip is not allocated.
#
pool_check = "\
	SELECT id \
	FROM (\
		SELECT id \
		FROM ${ippool_table} \
		WHERE pool_name='%{control:${pool_name}}'\
	) \
	WHERE ROWNUM = 1"

#
#  This query marks the IP address handed out by "allocate-find" as used
#  for the period of "lease_duration" after which time it may be reused.
#
allocate_update = "\
	UPDATE ${ippool_table} \
	SET \
		nasipaddress = '%{NAS-IP-Address}', \
		pool_key = '${pool_key}', \
		callingstationid = '%{%{Calling-Station-Id}:-0}', \
		username = '%{SQL-User-Name}', \
		expiry_time = current_timestamp + INTERVAL '${lease_duration}' second(1) \
	WHERE framedipaddress = '%I'"

#
#  This query frees the IP address assigned to "pool_key" when a new request
#  comes in for the same "pool_key". This means that either you are losing
#  accounting Stop records or you use Calling-Station-Id instead of NAS-Port
#  as your "pool_key" and your users are able to reconnect before your NAS
#  has timed out their previous session. (Generally on wireless networks)
#  (Note: If your pool_key is set to Calling-Station-Id and not NAS-Port
#  then you may wish to delete the "AND nasipaddress = '%{%{Nas-IP-Address}:-%{Nas-IPv6-Address}}'
#  from the WHERE clause)
#
allocate_clear = "\
	UPDATE ${ippool_table} \
	SET \
		nasipaddress = '0', \
		pool_key = '0', \
		callingstationid = '0', \
		expiry_time = current_timestamp - INTERVAL '1' second(1) \
	WHERE nasipaddress = '%{NAS-IP-Address}' \
	AND pool_key = '${pool_key}'"


#
#  Use a stored procedure to find AND allocate the address. Read and customise
#  `procedure.sql` in this directory to determine the optimal configuration.
#
#allocate_begin = ""
#allocate_find = "\
#	SELECT fr_allocate_previous_or_new_framedipaddress( \
#		'%{control:${pool_name}}', \
#		'%{SQL-User-Name}', \
#		'%{%{Calling-Station-Id}:-0}', \
#		'%{NAS-IP-Address}', \
#		'${pool_key}', \
#		'${lease_duration}' \
#	)"
#allocate_update = ""
#allocate_commit = ""

#
#  This query extends an IP address lease by "lease_duration" when an accounting
#  START record arrives
#
start_update = "\
	UPDATE ${ippool_table} \
	SET \
		expiry_time = current_timestamp + INTERVAL '${lease_duration}' second(1) \
	WHERE nasipaddress = '%{NAS-IP-Address}' \
	AND pool_key = '${pool_key}'"

#
#  This query frees an IP address when an accounting STOP record arrives
#
stop_clear = "\
	UPDATE ${ippool_table} \
	SET \
		nasipaddress = '0', \
		pool_key = '0', \
		callingstationid = '0', \
		expiry_time = current_timestamp - INTERVAL '1' second(1) \
	WHERE nasipaddress = '%{%{Nas-IP-Address}:-%{Nas-IPv6-Address}}' \
	AND pool_key = '${pool_key}' \
	AND username = '%{SQL-User-Name}' \
	AND callingstationid = '%{%{Calling-Station-Id}:-0}' \
	AND framedipaddress = '%{${attribute_name}}'"

#
#  This query extends an IP address lease by "lease_duration" when an accounting
#  ALIVE record arrives
#
alive_update = "\
	UPDATE ${ippool_table} \
	SET \
		expiry_time = current_timestamp + INTERVAL '${lease_duration}' second(1) \
	WHERE nasipaddress = '%{%{Nas-IP-Address}:-%{Nas-IPv6-Address}}' \
	AND pool_key = '${pool_key}' \
	AND framedipaddress = '%{${attribute_name}}' \
	AND username = '%{SQL-User-Name}' \
	AND callingstationid = '%{%{Calling-Station-Id}:-0}'"

#
#  This query frees all IP addresses allocated to a NAS when an
#  accounting ON record arrives from that NAS
#
on_clear = "\
	UPDATE ${ippool_table} \
	SET \
		nasipaddress = '0', \
		pool_key = '0', \
		callingstationid = '0', \
		expiry_time = current_timestamp - INTERVAL '1' second(1) \
	WHERE nasipaddress = '%{%{Nas-IP-Address}:-%{Nas-IPv6-Address}}'"

#
#  This query frees all IP addresses allocated to a NAS when an
#  accounting OFF record arrives from that NAS
#
off_clear = "\
	UPDATE ${ippool_table} \
	SET \
		nasipaddress = '0', \
		pool_key = '0', \
		callingstationid = '0', \
		expiry_time = current_timestamp - INTERVAL '1' second(1) \
	WHERE nasipaddress = '%{%{Nas-IP-Address}:-%{Nas-IPv6-Address}}'"
