#  -*- text -*-
#
#  ippool/mysql/queries.conf -- MySQL queries for rlm_sqlippool
#
#  $Id$

#  Using SKIP LOCKED speeds up selection queries
#  However, it requires MySQL >= 8.0.1.  Uncomment the
#  following if you are running a suitable version of MySQL
#
#  skip_locked = "SKIP LOCKED"
skip_locked = ""

#
#  RADIUS (Accounting-Start)
#  DHCPv4 (Discover)
#

#
#  This series of queries allocates an IP address
#

#
#  This query attempts to find the most recent IP address for the client
#
alloc_existing = "\
	SELECT address \
	FROM ${ippool_table} \
	WHERE pool_name = '%{control.${pool_name}}' \
	AND owner = '${owner}' \
	AND `status` IN ('dynamic', 'static') \
	ORDER BY expiry_time DESC \
	LIMIT 1 \
	FOR UPDATE ${skip_locked}"

#
#  Determine whether the requested IP address is available
#
alloc_requested = "\
	SELECT address \
	FROM ${ippool_table} \
	WHERE pool_name = '%{control.${pool_name}}' \
	AND address = '%{${requested_address} || 0.0.0.0}' \
	AND `status` = 'dynamic' \
	AND expiry_time < NOW() \
	FOR UPDATE ${skip_locked}"

#
#  If the preceding query fails to find an IP address, the following
#  one is used to select a free one from the pool
#
alloc_find = "\
	SELECT address \
	FROM ${ippool_table} \
	WHERE pool_name = '%{control.${pool_name}}' \
	AND expiry_time < NOW() \
	AND `status` = 'dynamic' \
	ORDER BY expiry_time \
	LIMIT 1 \
	FOR UPDATE ${skip_locked}"

#
#  Alternatively do the operations in one query.
#  Depending on transaction isolation mode, this can cause deadlocks
#
#alloc_find = "\
#	(SELECT address, 1 AS o FROM ${ippool_table} \
#		WHERE pool_name = '%{control.${pool_name}}' \
#		AND owner = '${owner}' \
#		AND `status` IN ('dynamic', 'static') \
#		ORDER BY expiry_time DESC LIMIT 1 FOR UPDATE ${skip_locked} \
#	) UNION ( \
#	SELECT address, 2 AS o FROM ${ippool_table} \
#		WHERE pool_name = '%{control.${pool_name}}' \
#		AND address = '%{${requested_address} || 0.0.0.0}' \
#		AND `status` = 'dynamic' \
#		AND expiry_time < NOW() \
#		FOR UPDATE SKIP LOCKED \
#	) UNION ( \
#	SELECT address, 3 AS o FROM ${ippool_name} \
#		WHERE pool_name = '%{control.${pool_name}}' \
#		AND expiry_time < NOW() \
#		AND `status` = 'dynamic' \
#		ORDER BY expiry_time LIMIT 1 FOR UPDATE ${skip_locked} \
#	) ORDER BY o \
#	LIMIT 1"

#
#  If you prefer to allocate a random IP address every time, use this query instead.
#  Note: This is very slow if you have a lot of free IPs.
#
#alloc_find = "\
#	SELECT address FROM ${ippool_table} \
#	WHERE pool_name = '%{control.${pool_name}}' \
#	AND expiry_time < NOW() \
#	AND `status` = 'dynamic' \
#	ORDER BY \
#		RAND() \
#	LIMIT 1 \
#	FOR UPDATE ${skip_locked}"

#
#  If an IP could not be allocated, check to see if the pool exists or not
#  This allows the module to differentiate between a full pool and no pool
#  Note: If you are not running redundant pool modules this query may be
#  commented out to save running this query every time an ip is not allocated.
#
pool_check = "\
	SELECT id \
	FROM ${ippool_table} \
	WHERE pool_name='%{control.${pool_name}}' \
	LIMIT 1"

#
#  This is the final IP Allocation query, which saves the allocated ip details.
#
alloc_update = "\
	UPDATE ${ippool_table} \
	SET \
		gateway = '${gateway}', owner = '${owner}', \
		expiry_time = NOW() + INTERVAL ${offer_duration} SECOND \
	WHERE address = '%I'"

#
#  Use a stored procedure to find AND allocate the address. Read and customise
#  `procedure.sql` in this directory to determine the optimal configuration.
#
#alloc_begin = ""
#alloc_find = "\
#	CALL fr_ippool_allocate_previous_or_new_address( \
#		'%{control.${pool_name}}', \
#		'${gateway}', \
#		'${owner}', \
#		${offer_duration}, \
#		'%{${requested_address} || 0.0.0.0}'
#	)"
#alloc_update = ""
#alloc_commit = ""


#
#  RADIUS (Interim-Update)
#  DHCPv4 (Request)
#

#
#  This query revokes any active offers for addresses that a client is not
#  requesting when a DHCP REQUEST packet arrives
#
update_free = "\
	UPDATE ${ippool_table} \
	SET \
		gateway = '', \
		owner = '', \
		expiry_time = NOW() \
	WHERE pool_name = '%{control.${pool_name}}' \
	AND owner = '${owner}' \
	AND address <> '${requested_address}' \
	AND expiry_time > NOW() \
	AND `status` = 'dynamic'"

#
#  Queries to update a lease.
#  This query must update a row when a lease is successfully requested -
#  queries that update no rows will result in a "notfound" response to
#  the module which by default will give a NAK reply.  In this example
#  incrementing "counter" is used to achieve this.
#
update_update = "\
	UPDATE ${ippool_table} \
	SET \
		expiry_time = NOW() + INTERVAL ${lease_duration} SECOND, \
		counter = counter + 1 \
	WHERE pool_name = '%{control.${pool_name}}' \
	AND owner = '${owner}' \
	AND address = '${requested_address}'"

#
#  RADIUS (Accounting-Stop)
#  DHCPv4 (Release)

#
#
#  Queries to release a lease.
#
release_clear = "\
	UPDATE ${ippool_table} \
	SET gateway = '', \
		owner = '0', \
		expiry_time = NOW() \
	WHERE pool_name = '%{control.${pool_name}}' \
	AND owner = '${owner}' \
	AND address = '${requested_address}'"


#
#  DHCPv4 (Decline)
#

#
#  Queries to mark leases as "bad"
#
mark_update = "\
	UPDATE ${ippool_table} \
	SET `status` = 'declined' \
	WHERE pool_name = '%{control.${pool_name}}' \
	AND address = '${requested_address}' \
	AND owner = '${owner}'"

#
#  RADIUS (Accounting-On)
#  RADIUS (Accounting-Off)
#

#
#  Frees all IPs allocated to a gateway
#
bulk_release_clear = "\
	UPDATE ${ippool_table} \
	SET gateway = '', \
		owner = '0', \
		expiry_time = NOW() \
	WHERE pool_name = '%{control.${pool_name}}' \
	AND gateway = '${gateway}'"
