# -*- text -*-
#
#  ippool/postgresql/queries.conf -- PostgreSQL queries for rlm_sqlippool
#
#  $Id$

#  Using SKIP LOCKED speed up the alloc_find query by 10
#  times. However, it requires PostgreSQL >= 9.5.
#
#  If you are using an older version of PostgreSQL comment out the following:
skip_locked = "SKIP LOCKED"

#
#  RADIUS (Accounting-Start)
#  DHCPv4 (Discover)
#

#
#  This sequence of queries allocate an IP address from the Pool
#
#  If the SELECT and UPDATE are in separate queries then set the following
#  to "BEGIN" to wrap them as a transaction
#
alloc_begin = ""

#
#  This query attempts to re-allocate the most recent IP address
#  for the client
alloc_existing = "\
	WITH cte AS ( \
		SELECT address \
		FROM ${ippool_table} \
		WHERE pool_name = '%{control.${pool_name}}' \
		AND owner = '${owner}' \
		AND status IN ('dynamic', 'static') \
		ORDER BY expiry_time DESC \
		LIMIT 1 \
		FOR UPDATE ${skip_locked} \
	) \
	UPDATE ${ippool_table} \
	SET expiry_time = 'now'::timestamp(0) + '${offer_duration} second'::interval, \
	gateway = '${gateway}' \
	FROM cte \
	WHERE cte.address = ${ippool_table}.address \
	RETURNING cte.address"

#
#  If the preceding query doesn't find an address then the following
#  can be used to check for the address requested by the client
#
alloc_requested = "\
	WITH cte AS ( \
		SELECT address \
		FROM ${ippool_table} \
		WHERE pool_name = '%{control.${pool_name}}' \
		AND address = '%{${requested_address}:-0.0.0.0}' \
		AND expiry_time < 'now'::timestamp(0) \
		AND status = 'dynamic' \
		FOR UPDATE ${skip_locked} \
	) \
	UPDATE ${ippool_table} \
	SET owner = '${owner}', \
	expiry_time = 'now'::timestamp(0) + '${offer_duration} second'::interval, \
	gateway = '${gateway}' \
	WHERE cte.address = ${ipppool_table}.address \
	RETURNING cte.address"

#
#  If the preceding query doesn't find an address the following one
#  is used for finding one from the pool
#
alloc_find = "\
	WITH cte AS ( \
		SELECT address \
		FROM ${ippool_table} \
		WHERE pool_name = '%{control.${pool_name}}' \
		AND expiry_time < 'now'::timestamp(0) \
		AND status = 'dynamic' \
		ORDER BY expiry_time \
		LIMIT 1 \
		FOR UPDATE ${skip_locked} \
	) \
	UPDATE ${ippool_table} \
	SET owner = '${owner}', \
	expiry_time = 'now'::timestamp(0) + '${offer_duration} second'::interval, \
	gateway = '${gateway}' \
	WHERE cte.address = ${ippool_table}.address \
	RETURNING cte.address"

#
#  If you prefer to allocate a random IP address every time, use this query instead
#  Note: This is very slow if you have a lot of free IPs.
#  Use of either of these next two queries should have the alloc_begin line commented out
#  and alloc_update below un-commented.
#
#alloc_find = "\
#	SELECT address FROM ${ippool_table} \
#	WHERE pool_name = '%{control.${pool_name}}' AND expiry_time < 'now'::timestamp(0) \
#	AND status = 'dynamic' \
#	ORDER BY RANDOM() \
#	LIMIT 1 \
#	FOR UPDATE ${skip_locked}"

#
#  This query marks the IP address handed out by "alloc_find" as used
#  for the period of "offer_duration" after which time it may be reused.
#  It is only needed if the SELECT query does not perform the update.
#
#alloc_update = "\
#	UPDATE ${ippool_table} \
#	SET \
#		gateway = '${gateway}', \
#		owner = '${owner}', \
#		expiry_time = 'now'::timestamp(0) + '${offer_duration} second'::interval \
#	WHERE address = '%I'"

#
#  If the SELECT and UPDATE are in separate queries then set the following
#  to "COMMIT" to wrap them as a transaction
#
alloc_commit = ""

#
#  If an IP could not be allocated, check to see whether the pool exists or not
#  This allows the module to differentiate between a full pool and no pool
#  Note: If you are not running redundant pool modules this query may be commented
#  out to save running this query every time an ip is not allocated.
#
pool_check = "\
	SELECT id \
	FROM ${ippool_table} \
	WHERE pool_name='%{control.${pool_name}}' \
	LIMIT 1"

#
#  Use a stored procedure to find AND allocate the address. Read and customise
#  `procedure.sql` in this directory to determine the optimal configuration.
#
#  This requires PostgreSQL >= 9.5 as SKIP LOCKED is used.
#
#  The "NO LOAD BALANCE" comment is included here to indicate to a PgPool
#  system that this needs to be a write transaction. PgPool itself cannot
#  detect this from the statement alone. If you are using PgPool and do not
#  have this comment, the query may go to a read only server, and will fail.
#  This has no negative effect if you are not using PgPool.
#
#alloc_begin = ""
#alloc_find = "\
#	/*NO LOAD BALANCE*/ \
#	SELECT fr_allocate_previous_or_new_address( \
#		'%{control.${pool_name}}', \
#		'${gateway}', \
#		'${owner}', \
#		'${offer_duration}', \
#		'%{${requested_address}:-0.0.0.0}' \
#	)"
#alloc_update = ""
#alloc_commit = ""


#
#  RADIUS (Interim-Update)
#  DHCPv4 (Request)
#

#
#  Query used to clear any other addresses that have been offered to the client
#
update_free = "\
	UPDATE ${ippool_table} \
	SET \
		gateway = '', \
		owner = '', \
		expiry_time = 'now'::timestamp(0) - '1 second'::interval \
	WHERE pool_name = '%{control.${pool_name}}' \
	AND owner = '${owner}' \
	AND address <> '${requested_address}' \
	AND expiry_time > 'now'::timestamp(0) \
	AND status = 'dynamic'"

#
#  Queries to update a lease.
#  This query must update a row when a lease is successfully requested -
#  queries that update no rows will result in a "notfound" response to
#  the module which by default will give a NAK reply.  In this example
#  incrementing "counter" is used to acheive this.
#
update_update = "\
	UPDATE ${ippool_table} \
	SET \
		expiry_time = 'now'::timestamp(0) + '${lease_duration} second'::interval, \
		counter = counter + 1 \
	WHERE pool_name = '%{control.${pool_name}}' \
	AND owner = '${owner}' \
	AND address = '${requested_address}'"

#
#  RADIUS (Accounting-Stop)
#  DHCPv4 (Release)
#

#
#  Queries to release a lease.
#
release_clear = "\
	UPDATE ${ippool_table} \
	SET gateway = '', \
		owner = '', \
		expiry_time = 'now'::timestamp(0) - '1 second'::interval \
	WHERE pool_name = '%{control.${pool_name}}' \
	AND owner = '${owner}' \
	AND address = '${requested_address}'"


#
#  DHCPv4 (Decline)
#

#
#  Queries to mark leases as "bad"
#
mark_update = "\
	UPDATE ${ippool_table} \
	SET status = 'declined' \
	WHERE pool_name = '%{control.${pool_name}}' \
	AND address = '${requested_address}' \
	AND owner = '${owner}'"

#
#  RADIUS (Accounting-On)
#  RADIUS (Accounting-Off)
#

#
#  Frees all IPs allocated to a gateway
#
bulk_release_clear = "\
	UPDATE ${ippool_table} \
	SET gateway = '', \
		owner = '', \
		expiry_time = 'now'::timestamp(0) - '1 second'::interval \
	WHERE pool_name = '%{control.${pool_name}}' \
	AND gateway = '${gateway}'"

