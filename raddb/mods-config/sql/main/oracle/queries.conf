#  -*- text -*-
#
#  main/oracle/queries.conf -- Oracle configuration for default schema (schema.sql)
#
#  $Id$

#######################################################################
#  Query config:  Username
#######################################################################
# This is the username that will get substituted, escaped, and added
# as attribute 'SQL-User-Name'.  '%{SQL-User-Name}' should be used below
# everywhere a username substitution is needed so you you can be sure
# the username passed from the client is escaped properly.
#
#  Uncomment the next line, if you want the sql_user_name to mean:
#
#    Use Stripped-User-Name, if it's there.
#    Else use User-Name, if it's there,
#    Else use hard-coded string "DEFAULT" as the user name.
#sql_user_name = "%{&Stripped-User-Name || &User-Name || 'DEFAULT'}"
#
sql_user_name = "%{User-Name}"

#######################################################################
#  Query config:  Event-Timestamp
#######################################################################
# event_timestamp_epoch is the basis for the time inserted into
# accounting records. Typically this will be the Event-Timestamp of the
# accounting request, which is provided by a NAS.
#
# Uncomment the next line, if you want the timestamp to be based on the
# request reception time recorded by this server, for example if you
# distrust the provided Event-Timestamp.
#event_timestamp_epoch = "%l"

event_timestamp_epoch = %{((integer) &Event-Timestamp) || %l}

# event_timestamp is the SQL snippet for converting an epoch timestamp
# to an SQL date.

event_timestamp = "TO_DATE('1970-01-01','YYYY-MM-DD') + NUMTODSINTERVAL(${event_timestamp_epoch},'SECOND')"

#######################################################################
#  Authorization Queries
#######################################################################
#  These queries compare the check items for the user
#  in ${authcheck_table} and setup the reply items in
#  ${authreply_table}.  You can use any query/tables
#  you want, but the return data for each row MUST
#  be in the  following order:
#
#  0. Row ID (currently unused)
#  1. UserName/GroupName
#  2. Item Attr Name
#  3. Item Attr Value
#  4. Item Attr Operation
#######################################################################
#
# WARNING: Oracle is case sensitive
#
# The main difference between MySQL and Oracle queries is the date format.
# You must use the TO_DATE function to transform the radius date format to
# the Oracle date format, and put NULL otherwise '0' in a void date field.
#
#######################################################################

authorize_check_query = "\
	SELECT id, UserName, Attribute, Value, op \
	FROM ${authcheck_table} \
	WHERE Username = '%{SQL-User-Name}' \
	ORDER BY id"

authorize_reply_query = "\
	SELECT id, UserName, Attribute, Value, op \
	FROM ${authreply_table} \
	WHERE Username = '%{SQL-User-Name}' \
	ORDER BY id"

authorize_group_check_query = "\
	SELECT id, GroupName, Attribute, Value, op \
	FROM ${groupcheck_table} \
	WHERE GroupName = '%{${group_attribute}}' \
	ORDER BY id"

authorize_group_reply_query = "\
	SELECT id, GroupName, Attribute, Value, op \
	FROM ${groupreply_table} \
	WHERE GroupName = '%{${group_attribute}}' \
	ORDER BY id"

#######################################################################
# Group Membership Queries
#######################################################################
# group_membership_query	- Check user group membership
#######################################################################

group_membership_query = "\
	SELECT GroupName \
	FROM ${usergroup_table} \
	WHERE UserName='%{SQL-User-Name}' \
	ORDER BY Priority"

#######################################################################
# Accounting and Post-Auth Queries
#######################################################################
# These queries insert/update accounting and authentication records.
# The query to use is determined by the name of the section the module
# is called from.
#
# e.g. when called from `accouting Start`, the contents of
#
# accounting {
#	start {}
# }
#
# will be read, and any "query" entries will be run in sequence
# until one returns a positive number of modified rows.
#######################################################################
accounting {
	# Write SQL queries to a logfile. This is potentially useful for bulk inserts
	# when used with the rlm_sql_null driver.
#	logfile = ${logdir}/accounting.sql

	accounting-on {
		query = "\
			UPDATE ${...acct_table1} \
			SET \
				AcctStopTime = ${...event_timestamp}, \
				AcctSessionTime = ROUND((${...event_timestamp} - \
					TO_DATE(TO_CHAR(acctstarttime, 'yyyy-mm-dd hh24:mi:ss'),'yyyy-mm-dd hh24:mi:ss'))*86400), \
				AcctTerminateCause='%{&Acct-Terminate-Cause || 'NAS-Reboot'}' \
			WHERE AcctStopTime IS NULL \
			AND NASIPAddress = '%{NAS-IP-Address}' \
			AND AcctStartTime <= ${...event_timestamp}"

		#
		#  If there are no open user sessions, then the previous query
		#  will return "no rows updated".  The server will then fall through
		#  to the next query, which is just "yes, that's fine".
		#
		query = "SELECT 1 from dual"
	}

	accounting-off {
		query = "${..accounting-on.query}"

		query = "SELECT 1 from dual"
	}

	start {
		query = "\
			INSERT INTO ${...acct_table1} (\
				RadAcctId, \
				AcctSessionId, \
				AcctUniqueId, \
				UserName, \
				Realm, \
				NASIPAddress, \
				NASPortId, \
				NASPortType, \
				AcctStartTime, \
				AcctStopTime, \
				AcctSessionTime, \
				AcctAuthentic, \
				ConnectInfo_start, \
				ConnectInfo_stop, \
				AcctInputOctets, \
				AcctOutputOctets, \
				CalledStationId, \
				CallingStationId, \
				AcctTerminateCause, \
				ServiceType, \
				FramedProtocol, \
				FramedIPAddress, \
				FramedIPv6Address, \
				FramedIPv6Prefix, \
				FramedInterfaceId, \
				DelegatedIPv6Prefix, \
				Class) \
			VALUES(\
				'', \
				'%{Acct-Session-Id}', \
				'%{Acct-Unique-Session-Id}', \
				'%{SQL-User-Name}', \
				'%{Realm}', \
				'%{NAS-IP-Address}', \
				'%{&NAS-Port-ID || &NAS-Port}', \
				'%{NAS-Port-Type}', \
				${...event_timestamp}, \
				NULL, \
				'0', \
				'%{Acct-Authentic}', \
				'%{Connect-Info}', \
				'', \
				'0', \
				'0', \
				'%{Called-Station-Id}', \
				'%{Calling-Station-Id}', \
				'', \
				'%{Service-Type}', \
				'%{Framed-Protocol}', \
				'%{Framed-IP-Address}', \
				'%{Framed-IPv6-Address}', \
				'%{Framed-IPv6-Prefix}', \
				'%{Framed-Interface-Id}', \
				'%{Delegated-IPv6-Prefix}', \
				'%{Class}')"

		query = "\
			UPDATE ${...acct_table1} \
			SET \
				AcctStartTime = ${...event_timestamp}, \
				ConnectInfo_start = '%{Connect-Info}' \
			WHERE AcctUniqueId = '%{Acct-Unique-Session-ID}' \
			AND AcctStopTime IS NULL"
	}

	interim-update {
		query = "\
			UPDATE ${...acct_table1} \
			SET \
				FramedIPAddress = NULLIF('%{Framed-IP-Address}', ''), \
				FramedIPv6Address = NULLIF('%{Framed-IPv6-Address}', ''), \
				FramedIPv6Prefix = NULLIF('%{Framed-IPv6-Prefix}', ''), \
				FramedInterfaceId = NULLIF('%{Framed-Interface-Id}', ''), \
				DelegatedIPv6Prefix = NULLIF('%{Delegated-IPv6-Prefix}', ''), \
				AcctSessionTime = '%{Acct-Session-Time}', \
				AcctInputOctets = %{(((uint64) &Acct-Input-Gigawords) << 32) | (uint64) &Acct-Input-Octets}, \
				AcctOutputOctets = %{(((uint64) &Acct-Output-Gigawords) << 32) | (uint64) &Acct-Output-Octets}, \
				Class = '%{Class}' \
			WHERE AcctUniqueId = '%{Acct-Unique-Session-ID}' \
			AND AcctStopTime IS NULL"

		query = "\
			INSERT into ${...acct_table1} (\
				RadAcctId, \
				AcctSessionId, \
				AcctUniqueId, \
				UserName, \
				Realm, \
				NASIPAddress, \
				NASPortId, \
				NASPortType, \
				AcctStartTime, \
				AcctSessionTime, \
				AcctAuthentic, \
				ConnectInfo_start, \
				AcctInputOctets, \
				AcctOutputOctets, \
				CalledStationId, \
				CallingStationId, \
				ServiceType, \
				FramedProtocol, \
				FramedIPAddress, \
				Class) \
			VALUES(\
				'', \
				'%{Acct-Session-Id}', \
				'%{Acct-Unique-Session-Id}', \
				'%{SQL-User-Name}', \
				'%{Realm}', \
				'%{NAS-IP-Address}', \
				'%{&NAS-Port-ID || &NAS-Port}', \
				'%{NAS-Port-Type}', \
				NULL, \
				'%{Acct-Session-Time}', \
				'%{Acct-Authentic}', \
				'', \
				'%{(((uint64) &Acct-Input-Gigawords) << 32) | (uint64) &Acct-Input-Octets}', \
				'%{(((uint64) &Acct-Output-Gigawords) << 32) | (uint64) &Acct-Output-Octets}', \
				'%{Called-Station-Id}', \
				'%{Calling-Station-Id}', \
				'%{Service-Type}', \
				'%{Framed-Protocol}', \
				'%{Framed-IP-Address}', \
				'%{Class}')"
	}

	stop {
		query = "\
			UPDATE ${...acct_table2} \
			SET \
				AcctStopTime = ${...event_timestamp}, \
				AcctSessionTime = '%{Acct-Session-Time}', \
				AcctInputOctets = '%{(((uint64) &Acct-Input-Gigawords) << 32) | (uint64) &Acct-Input-Octets}', \
				AcctOutputOctets = '%{(((uint64) &Acct-Output-Gigawords) << 32) | (uint64) &Acct-Output-Octets}', \
				AcctTerminateCause = '%{Acct-Terminate-Cause}', \
				ConnectInfo_stop = '%{Connect-Info}', \
				Class = '%{Class}' \
			WHERE AcctUniqueId = '%{Acct-Unique-Session-ID}' \
			AND AcctStopTime IS NULL"

		query = "\
			INSERT into ${...acct_table2} (\
				RadAcctId, \
				AcctSessionId, \
				AcctUniqueId, \
				UserName, \
				Realm, \
				NASIPAddress, \
				NASPortId, \
				NASPortType, \
				AcctStartTime, \
				AcctStopTime, \
				AcctSessionTime, \
				AcctAuthentic, \
				ConnectInfo_start, \
				ConnectInfo_stop, \
				AcctInputOctets, \
				AcctOutputOctets, \
				CalledStationId, \
				CallingStationId, \
				AcctTerminateCause, \
				ServiceType, \
				FramedProtocol, \
				FramedIPAddress, \
				Class) \
			VALUES(\
				'', \
				'%{Acct-Session-Id}', \
				'%{Acct-Unique-Session-Id}', \
				'%{SQL-User-Name}', \
				'%{Realm}', \
				'%{NAS-IP-Address}', \
				'%{&NAS-Port-ID || &NAS-Port}', \
				'%{NAS-Port-Type}', \
				NULL, \
				${...event_timestamp}, \
				'%{Acct-Session-Time}', \
				'%{Acct-Authentic}', \
				'', \
				'%{Connect-Info}', \
				'%{(((uint64) &Acct-Input-Gigawords) << 32) | (uint64) &Acct-Input-Octets}', \
				'%{(((uint64) &Acct-Output-Gigawords) << 32) | (uint64) &Acct-Output-Octets}', \
				'%{Called-Station-Id}', \
				'%{Calling-Station-Id}', \
				'%{Acct-Terminate-Cause}', \
				'%{Service-Type}', \
				'%{Framed-Protocol}', \
				'%{Framed-IP-Address}', \
				'%{Class}')"
	}
}

#######################################################################
# Authentication Logging Queries
#######################################################################
# send queries                - Insert some info after authentication
#######################################################################

send {
	# Write SQL queries to a logfile. This is potentially useful for bulk inserts
	# when used with the rlm_sql_null driver.
#	logfile = ${logdir}/post-auth.sql

	access-accept {
		query = "\
			INSERT INTO ${...postauth_table} \
				(username, pass, reply, authdate, class) \
			VALUES (\
				'%{User-Name}', \
				'%{&User-Password || &Chap-Password}', \
				'%{reply.Packet-Type}', \
				TO_TIMESTAMP('%S.%M','YYYY-MM-DDHH24:MI:SS.FF'), \
				'%{reply.Class}')"
	}

	access-reject {
		query = "${..access-accept.query}"
	}
}
