#  -*- text -*-
#
#  main/postgresql/queries.conf -- PostgreSQL configuration for default schema (schema.sql)
#
#  $Id$

# Safe characters list for sql queries. Everything else is replaced
# with their mime-encoded equivalents.
# The default list should be ok
# safe_characters = "@abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.-_: /"

#######################################################################
#  Query config:  Username
#######################################################################
# This is the username that will get substituted, escaped, and added
# as attribute 'SQL-User-Name'.  '%{SQL-User-Name}' should be used
# below everywhere a username substitution is needed so you you can
# be sure the username passed from the client is escaped properly.
#
# Uncomment the next line, if you want the sql_user_name to mean:
#
#    Use Stripped-User-Name, if it's there.
#    Else use User-Name, if it's there,
#    Else use hard-coded string "none" as the user name.
#
#sql_user_name = "%{ Stripped-User-Name || User-Name || 'none'}"

sql_user_name = "%{User-Name}"

#######################################################################
#  Query config:  Event-Timestamp
#######################################################################
# event_timestamp_epoch is the basis for the time inserted into
# accounting records. Typically this will be the Event-Timestamp of the
# accounting request, which is usually provided by a NAS.
#
# Uncomment the next line, if you want the timestamp to be based on the
# request reception time recorded by this server, for example if you
# distrust the provided Event-Timestamp.
#event_timestamp_epoch = "%l"

event_timestamp_epoch = %{((integer) Event-Timestamp) || %l}

# event_timestamp is the SQL snippet for converting an epoch timestamp
# to an SQL date.

event_timestamp = "TO_TIMESTAMP(${event_timestamp_epoch})"

#######################################################################
#  Open Query
#######################################################################
# This query is run whenever a new connection is opened.
# It is commented out by default.
#
# If you have issues with connections hanging for too long, uncomment
# the next line, and set the timeout in milliseconds.  As a general
# rule, if the queries take longer than a second, something is wrong
# with the database.
#open_query = "set statement_timeout to 1000"

#######################################################################
#  Authorization Queries
#######################################################################
#  These queries compare the check items for the user
#  in ${authcheck_table} and setup the reply items in
#  ${authreply_table}.  You can use any query/tables
#  you want, but the return data for each row MUST
#  be in the  following order:
#
#  0. Row ID (currently unused)
#  1. UserName/GroupName
#  2. Item Attr Name
#  3. Item Attr Value
#  4. Item Attr Operation
#######################################################################

#
#  Use these for case insensitive usernames. WARNING: Slower queries!
#
#authorize_check_query = "\
#	SELECT id, username, attribute, value, op \
#	FROM ${authcheck_table} \
#	WHERE LOWER(username) = LOWER('%{SQL-User-Name}') \
#	ORDER BY id"

#authorize_reply_query = "\
#	SELECT id, username, attribute, value, op \
#	FROM ${authreply_table} \
#	WHERE LOWER(username) = LOWER('%{SQL-User-Name}') \
#	ORDER BY id"

authorize_check_query = "\
	SELECT id, username, attribute, value, op \
	FROM ${authcheck_table} \
	WHERE username = '%{SQL-User-Name}' \
	ORDER BY id"

authorize_reply_query = "\
	SELECT id, username, attribute, value, op \
	FROM ${authreply_table} \
	WHERE username = '%{SQL-User-Name}' \
	ORDER BY id"

#
#  Use these for case insensitive usernames. WARNING: Slower queries!
#
#authorize_group_check_query = "\
#	SELECT \
#		${groupcheck_table}.id, ${groupcheck_table}.groupname, ${groupcheck_table}.attribute, \
#		${groupcheck_table}.value, ${groupcheck_table}.op \
#	FROM ${groupcheck_table}, ${usergroup_table} \
#	WHERE LOWER(${usergroup_table}.username) = LOWER('%{SQL-User-Name}') \
#	AND ${usergroup_table}.groupname = ${groupcheck_table}.groupname \
#	ORDER BY ${groupcheck_table}.id"

#authorize_group_reply_query = "\
#	SELECT \
#		${groupreply_table}.id, ${groupreply_table}.groupname, \
#		${groupreply_table}.attribute, ${groupreply_table}.value, ${groupreply_table}.op \
#	FROM ${groupreply_table}, ${usergroup_table} \
#	WHERE LOWER(${usergroup_table}.username) = LOWER('%{SQL-User-Name}') \
#	AND ${usergroup_table}.groupname = ${groupreply_table}.groupname \
#	ORDER BY ${groupreply_table}.id"

authorize_group_check_query = "\
	SELECT id, groupname, attribute, value, op \
	FROM ${groupcheck_table} \
	WHERE groupname = '%{${group_attribute}}' \
	ORDER BY id"

authorize_group_reply_query = "\
	SELECT id, groupname, attribute, value, op \
	FROM ${groupreply_table} \
	WHERE groupname = '%{${group_attribute}}' \
	ORDER BY id"

#######################################################################
# Group Membership Queries
#######################################################################
# group_membership_query        - Check user group membership
#######################################################################

# Use these for case insensitive usernames. WARNING: Slower queries!
#group_membership_query = "\
#	SELECT groupname \
#	FROM ${usergroup_table} \
#	WHERE LOWER(username) = LOWER('%{SQL-User-Name}') \
#	ORDER BY priority"

group_membership_query = "\
	SELECT groupname \
	FROM ${usergroup_table} \
	WHERE username='%{SQL-User-Name}' \
	ORDER BY priority"

#######################################################################
# Accounting and Post-Auth Queries
#######################################################################
# These queries insert/update accounting and authentication records.
# The query to use is determined by the name of the section the module
# is called from.
#
# e.g. when called from `accouting Start`, the contents of
#
# accounting {
#	start {}
# }
#
# will be read, and any "query" entries will be run in sequence
# until one returns a positive number of modified rows.
#######################################################################

accounting {
	# Write SQL queries to a logfile. This is potentially useful for bulk inserts
	# when used with the rlm_sql_null driver.
#	logfile = ${logdir}/accounting.sql

	column_list = "\
		acctsessionid,		acctuniqueid,		username, \
		realm,			nasipaddress,		nasportid, \
		nasporttype,		acctstarttime,		acctupdatetime, \
		acctstoptime,		acctsessiontime,	acctauthentic, \
		connectinfo_start,	connectinfo_stop,	acctinputoctets, \
		acctoutputoctets,	calledstationid,	callingstationid, \
		acctterminatecause,	servicetype,		framedprotocol, \
		framedipaddress,	framedipv6address,	framedipv6prefix, \
		framedinterfaceid,	delegatedipv6prefix,	Class"

	accounting-on {

		#
		#  "Bulk update" Accounting-On/Off strategy.
		#
		#  Immediately terminate all sessions associated with a
		#  given NAS.
		#
		#  Note: If a large number of sessions require closing
		#  then the bulk update may be take a long time to run
		#  and lock an excessive number of rows. See the
		#  strategy below for an alternative approach that does
		#  not touch the radacct session data.
		#
		query = "\
			UPDATE ${...acct_table1} \
			SET \
				acctstoptime = ${...event_timestamp}, \
				acctupdatetime = ${...event_timestamp}, \
				acctsessiontime = (${...event_timestamp_epoch} - EXTRACT(EPOCH FROM(AcctStartTime))), \
				acctterminatecause = '%{Acct-Terminate-Cause || 'NAS-Reboot'}', \
				class = '%{Class}' \
			WHERE acctstoptime IS NULL \
			AND nasipaddress= '%{NAS-IPv6-Address || NAS-IP-Address}' \
			AND acctstarttime <= ${...event_timestamp}"

		#
		#  "Lightweight" Accounting-On/Off strategy.
		#
		#  Record the reload time of the NAS and let the
		#  administrator actually close the sessions in radacct
		#  out-of-band, if desired.
		#
		#  Implementation advice, together with a stored
		#  procedure for closing sessions and a view showing
		#  the effective stop time of each session is provided
		#  in process-radacct.sql.
		#
		#  To enable this strategy, just change the previous
		#  query to "-query", and this one to "query".  The
		#  previous one will be ignored, and this one will be
		#  enabled.
		#
		-query = "\
			INSERT INTO nasreload (nasipaddress, reloadtime) \
			VALUES ('%{NAS-IP-Address}', ${...event_timestamp}) \
			ON CONFLICT ON (nasipaddress) \
			DO UPDATE SET \
				reloadtime = ${...event_timestamp}"

		#  If there are no open user sessions, then the previous query
		#  will return "no rows updated".  The server will then fall through
		#  to the next query, which is just "yes, that's fine".
		#
		query = "SELECT true"

	}

	accounting-off {
		query = "${..accounting-on.query}"

		query = "SELECT true"
	}

	start {
		query = "\
			INSERT INTO ${...acct_table1} \
				(${..column_list}) \
			VALUES(\
				'%{Acct-Session-Id}', \
				'%{Acct-Unique-Session-Id}', \
				'%{SQL-User-Name}', \
				NULLIF('%{Realm}', ''), \
				'%{NAS-IPv6-Address || NAS-IP-Address}', \
				NULLIF('%{NAS-Port-ID || NAS-Port}', ''), \
				'%{NAS-Port-Type}', \
				${...event_timestamp}, \
				${...event_timestamp}, \
				NULL, \
				0, \
				'%{Acct-Authentic}', \
				'%{Connect-Info}', \
				NULL, \
				0, \
				0, \
				'%{Called-Station-Id}', \
				'%{Calling-Station-Id}', \
				NULL, \
				'%{Service-Type}', \
				'%{Framed-Protocol}', \
				NULLIF('%{Framed-IP-Address}', '')::inet, \
				NULLIF('%{Framed-IPv6-Address}', '')::inet, \
				NULLIF('%{Framed-IPv6-Prefix}', '')::inet, \
				NULLIF('%{Framed-Interface-Id}', ''), \
				NULLIF('%{Delegated-IPv6-Prefix}', '')::inet, \
				'%{Class}') \
			ON CONFLICT (acctuniqueid) \
			DO UPDATE \
			SET \
				acctstarttime = ${...event_timestamp}, \
				acctupdatetime = ${...event_timestamp}, \
				ConnectInfo_start = '%{Connect-Info}', \
				class = '%{Class}' \
			WHERE ${...acct_table1}.acctuniqueid = '%{Acct-Unique-Session-Id}' \
			AND ${...acct_table1}.acctstoptime IS NULL"

		# and again where we don't have "AND AcctStopTime IS NULL"
		query = "\
			UPDATE ${...acct_table1} \
			SET \
				acctstarttime = ${...event_timestamp}, \
				acctupdatetime = ${...event_timestamp}, \
				connectinfo_start = '%{Connect-Info}', \
				class = '%{Class}' \
			WHERE acctuniqueid = '%{Acct-Unique-Session-Id}'"
	}

	interim-update {
		query = "\
			UPDATE ${...acct_table1} \
			SET \
				framedipaddress = NULLIF('%{Framed-IP-Address}', '')::inet, \
				framedipv6address = NULLIF('%{Framed-IPv6-Address}', '')::inet, \
				framedipv6prefix = NULLIF('%{Framed-IPv6-Prefix}', '')::inet, \
				framedinterfaceid = NULLIF('%{Framed-Interface-Id}', ''), \
				delegatedipv6prefix = NULLIF('%{Delegated-IPv6-Prefix}', '')::inet, \
				acctsessiontime = %{Acct-Session-Time || 'NULL'}, \
				acctinterval = (${...event_timestamp_epoch} - EXTRACT(EPOCH FROM (COALESCE(AcctUpdateTime, AcctStartTime)))), \
				acctupdatetime = ${...event_timestamp}, \
				acctinputoctets = %{(((uint64) Acct-Input-Gigawords) << 32) | (uint64) Acct-Input-Octets}, \
				acctoutputoctets = %{(((uint64) Acct-Output-Gigawords) << 32) | (uint64) Acct-Output-Octets}, \
				class = '%{Class}' \
			WHERE acctuniqueid = '%{Acct-Unique-Session-Id}' \
			AND acctstoptime IS NULL"

		query = "\
			INSERT INTO ${...acct_table1} \
				(${..column_list}) \
			VALUES(\
				'%{Acct-Session-Id}', \
				'%{Acct-Unique-Session-Id}', \
				'%{SQL-User-Name}', \
				NULLIF('%{Realm}', ''), \
				'%{NAS-IPv6-Address || NAS-IP-Address}', \
				NULLIF('%{NAS-Port-ID || NAS-Port}', ''), \
				'%{NAS-Port-Type}', \
				${...event_timestamp}, \
				${...event_timestamp}, \
				NULL, \
				%{Acct-Session-Time || 'NULL'}, \
				'%{Acct-Authentic}', \
				'%{Connect-Info}', \
				NULL, \
				(%{(((uint64) Acct-Input-Gigawords) << 32) | (uint64) Acct-Input-Octets})::bigint, \
				(%{(((uint64) Acct-Output-Gigawords) << 32) | (uint64) Acct-Output-Octets})::bigint, \
				'%{Called-Station-Id}', \
				'%{Calling-Station-Id}', \
				NULL, \
				'%{Service-Type}', \
				'%{Framed-Protocol}', \
				NULLIF('%{Framed-IP-Address}', '')::inet, \
				NULLIF('%{Framed-IPv6-Address}', '')::inet, \
				NULLIF('%{Framed-IPv6-Prefix}', '')::inet, \
				NULLIF('%{Framed-Interface-Id}', ''), \
				NULLIF('%{Delegated-IPv6-Prefix}', '')::inet, \
				'%{Class}') \
			ON CONFLICT (AcctUniqueId) \
			DO NOTHING"
	}

	stop {
		query = "\
			UPDATE ${...acct_table2} \
			SET \
				acctstoptime = ${...event_timestamp}, \
				acctupdatetime = ${...event_timestamp}, \
				acctsessiontime = COALESCE(%{Acct-Session-Time || 'NULL'}, \
					(${...event_timestamp_epoch} - EXTRACT(EPOCH FROM(AcctStartTime)))), \
				acctinputoctets = %{(((uint64) Acct-Input-Gigawords) << 32) | (uint64) Acct-Input-Octets}, \
				acctoutputoctets = %{(((uint64) Acct-Output-Gigawords) << 32) | (uint64) Acct-Output-Octets}, \
				acctterminatecause = '%{Acct-Terminate-Cause}', \
				framedipaddress = NULLIF('%{Framed-IP-Address}', '')::inet, \
				framedipv6address = NULLIF('%{Framed-IPv6-Address}', '')::inet, \
				framedipv6prefix = NULLIF('%{Framed-IPv6-Prefix}', '')::inet, \
				framedinterfaceid = NULLIF('%{Framed-Interface-Id}', ''), \
				delegatedipv6prefix = NULLIF('%{Delegated-IPv6-Prefix}', '')::inet, \
				connectinfo_stop = '%{Connect-Info}', \
				class = '%{Class}' \
			WHERE acctuniqueid = '%{Acct-Unique-Session-Id}' \
			AND acctstoptime IS NULL"

		query = "\
			INSERT INTO ${...acct_table1} \
				(${..column_list}) \
			VALUES(\
				'%{Acct-Session-Id}', \
				'%{Acct-Unique-Session-Id}', \
				'%{SQL-User-Name}', \
				NULLIF('%{Realm}', ''), \
				'%{NAS-IPv6-Address || NAS-IP-Address}', \
				NULLIF('%{NAS-Port-ID || NAS-Port}', ''), \
				'%{NAS-Port-Type}', \
				TO_TIMESTAMP(${...event_timestamp_epoch} - %{Acct-Session-Time || 0}), \
				${...event_timestamp}, \
				${...event_timestamp}, \
				NULLIF('%{Acct-Session-Time}', '')::bigint, \
				'%{Acct-Authentic}', \
				'%{Connect-Info}', \
				NULL, \
				(%{(((uint64) Acct-Input-Gigawords) << 32) | (uint64) Acct-Input-Octets})::bigint, \
				(%{(((uint64) Acct-Output-Gigawords) << 32) | (uint64) Acct-Output-Octets})::bigint, \
				'%{Called-Station-Id}', \
				'%{Calling-Station-Id}', \
				'%{Acct-Terminate-Cause}', \
				'%{Service-Type}', \
				'%{Framed-Protocol}', \
				NULLIF('%{Framed-IP-Address}', '')::inet, \
				NULLIF('%{Framed-IPv6-Address}', '')::inet, \
				NULLIF('%{Framed-IPv6-Prefix}', '')::inet, \
				NULLIF('%{Framed-Interface-Id}', ''), \
				NULLIF('%{Delegated-IPv6-Prefix}', '')::inet, \
				'%{Class}') \
			ON CONFLICT (acctuniqueid) \
			DO NOTHING"

		# and again where we don't have "AND AcctStopTime IS NULL"
		query = "\
			UPDATE ${...acct_table2} \
			SET \
				acctstoptime = ${...event_timestamp}, \
				acctupdatetime = ${...event_timestamp}, \
				acctsessiontime = COALESCE(%{Acct-Session-Time || 'NULL'}, \
				(${...event_timestamp_epoch} - EXTRACT(EPOCH FROM(AcctStartTime)))), \
				acctinputoctets = (%{(((uint64) Acct-Input-Gigawords) << 32) | (uint64) Acct-Input-Octets})::bigint, \
				acctoutputoctets = (%{(((uint64) Acct-Output-Gigawords) << 32) | (uint64) Acct-Output-Octets})::bigint, \
				acctterminatecause = '%{Acct-Terminate-Cause}', \
				framedipaddress = NULLIF('%{Framed-IP-Address}', '')::inet, \
				framedipv6address = NULLIF('%{Framed-IPv6-Address}', '')::inet, \
				framedipv6prefix = NULLIF('%{Framed-IPv6-Prefix}', '')::inet, \
				framedinterfaceid = NULLIF('%{Framed-Interface-Id}', ''), \
				delegatedipv6prefix = NULLIF('%{Delegated-IPv6-Prefix}', '')::inet, \
				connectinfo_stop = '%{Connect-Info}', \
				class = '%{Class}' \
			WHERE acctuniqueid = '%{Acct-Unique-Session-Id}'"
	}
}


#######################################################################
# Authentication Logging Queries
#######################################################################
# send queries                - Insert some info after authentication
#######################################################################

send {
	# Write SQL queries to a logfile. This is potentially useful for bulk inserts
	# when used with the rlm_sql_null driver.
#	logfile = ${logdir}/post-auth.sql

	access-accept {
		query = "\
			INSERT INTO ${...postauth_table} \
				(username, pass, reply, authdate, class) \
			VALUES(\
				'%{User-Name}', \
				'%{User-Password || Chap-Password}', \
				'%{reply.Packet-Type}', \
				'%S.%M', \
				'%{reply.Class}')"
	}

	access-reject {
		query = "${..access-accept.query}"
	}
}
