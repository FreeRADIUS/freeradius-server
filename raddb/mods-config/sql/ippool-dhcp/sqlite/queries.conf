#  -*- text -*-
#
#  ippool-dhcp/sqlite/queries.conf -- SQLite queries for rlm_sqlippool
#
#  $Id$

#
#  SQLite does not implement SELECT FOR UPDATE which is normally used to place
#  an exclusive lock over rows to prevent the same address from being
#  concurrently selected for allocation to multiple users.
#
#  The most granular read-blocking lock that SQLite has is an exclusive lock
#  over the database, so that's what we use. All locking in SQLite is performed
#  over the entire database and we perform a row update for any IP that we
#  allocate, requiring an exclusive lock. Taking the exclusive lock from the
#  start of the transaction (even if it were not required to guard the SELECT)
#  is actually quicker than if we deferred it causing SQLite to "upgrade" the
#  automatic shared lock for the transaction to an exclusive lock for the
#  subsequent UPDATE.
#
allocate_begin = "BEGIN EXCLUSIVE"
allocate_commit = "COMMIT"

#
#  This series of queries allocates an IP address
#
#  Either pull the most recent allocated IP for this client or the
#  oldest expired one.  The first sub query returns the most recent
#  lease for the client (if there is one), the second returns the
#  oldest expired one.
#  Sorting the result by expiry_time DESC will return the client specific
#  IP if it exists, otherwise an expired one.
#
allocate_find = "\
	SELECT framedipaddress, expiry_time \
	FROM ( \
		SELECT framedipaddress, expiry_time \
		FROM ${ippool_table} \
		JOIN dhcpstatus \
		ON ${ippool_table}.status_id = dhcpstatus.status_id \
		WHERE pool_name = '%{control:${pool_name}}' \
		AND pool_key = '${pool_key}' \
		AND status IN ('dynamic', 'static') \
		ORDER BY expiry_time DESC \
		LIMIT 1 \
	) UNION \
	SELECT framedipaddress, expiry_time \
	FROM ( \
		SELECT framedipaddress, expiry_time \
		FROM ${ippool_table} \
		JOIN dhcpstatus \
		ON ${ippool_table}.status_id = dhcpstatus.status_id \
		WHERE pool_name = '%{control:${pool_name}}' \
		AND expiry_time < datetime('now') \
		AND status = 'dynamic' \
		ORDER BY expiry_time LIMIT 1 \
	) \
	ORDER BY \
		expiry_time DESC \
	LIMIT 1"

#
# If you prefer to allocate a random IP address every time, use this query instead
#
#allocate_find = "\
#	SELECT framedipaddress FROM ${ippool_table} \
#	JOIN dhcpstatus \
#	ON ${ippool_table}.status_id = dhcpstatus.status_id \
#	WHERE pool_name = '%{control:Pool-Name}' \
#	AND expiry_time IS NULL \
#	AND status = 'dynamic' \
#	ORDER BY RAND() \
#	LIMIT 1 \
#	FOR UPDATE"

#
#  If an IP could not be allocated, check to see if the pool exists or not
#  This allows the module to differentiate between a full pool and no pool
#  Note: If you are not running redundant pool modules this query may be
#  commented out to save running this query every time an ip is not allocated.
#
pool_check = "\
	SELECT id \
	FROM ${ippool_table} \
	WHERE pool_name='%{control:Pool-Name}' \
	LIMIT 1"

#
#  This is the final IP Allocation query, which saves the allocated ip details
#
allocate_update = "\
	UPDATE ${ippool_table} \
	SET \
		gateway = '%{DHCP-Gateway-IP-Address}', \
		pool_key = '${pool_key}', \
		expiry_time = datetime(strftime('%%s', 'now') + ${lease_duration}, 'unixepoch') \
	WHERE framedipaddress = '%I' \
	AND expiry_time IS NULL"

#
#  This query is not applicable to DHCP as there are no accounting
#  START records
#
start_update = ""

#
#  Free an IP when an accounting STOP record arrives - for DHCP this
#  is when a Release occurs
#
stop_clear = "\
	UPDATE ${ippool_table} \
	SET \
		gateway = '', \
		pool_key = '0', \
		expiry_time = datetime('now') \
	WHERE pool_name = '%{control:${pool_name}}' \
	AND pool_key = '${pool_key}' \
	AND framedipaddress = '%{DHCP-Client-IP-Address}'"

#
#  This query is not applicable to DHCP as there are no accounting
#  ALIVE records
#
alive_update = ""

#
#  This query is not applicable to DHCP
#
on_clear = ""

#
#  This query is not applicable to DHCP
#
off_clear = ""

