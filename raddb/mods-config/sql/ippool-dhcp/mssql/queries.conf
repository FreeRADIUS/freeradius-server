# -*- text -*-
#
#  ippool-dhcp/mssql/queries.conf -- MSSQL queries for rlm_sqlippool
#
#  $Id$

#
#  This series of queries allocates an IP address
#

#
#  MSSQL-specific syntax - required if finding the address and updating
#  it are separate queries
#
#allocate_begin = "BEGIN TRAN"
#allocate_commit = "COMMIT TRAN"

allocate_begin = ""
allocate_commit = ""

#
#  Attempt to find the most recent existing IP address for the client
#
allocate_existing = "\
	WITH cte AS (
		SELECT TOP(1) framedipaddress, expiry_time, gateway \
		FROM ${ippool_table} WITH (xlock rowlock readpast) \
		JOIN dhcpstatus ON ${ippool_table}.status_id = dhcpstatus.status_id \
		WHERE pool_name = '%{control:${pool_name}}' \
		AND pool_key = '%{pool_key}' \
		AND dhcpstatus.status IN ('dynamic', 'static') \
		ORDER BY expiry_time DESC \
	) \
	UPDATE cte \
	SET expiry_time = DATEADD(SECOND,${lease_duration},CURRENT_TIMESTAMP), \
	gateway = '%{DHCP-Gateway-IP-Address}' \
	OUTPUT INSERTED.FramedIPAddress \
	FROM ${ippool_table}"

#
#  If the existing address can't be found this query will be run to
#  find a free address
#
allocate_find = "\
	WITH cte AS (
		SELECT TOP(1) framedipaddress, expiry_time, gateway, pool_key \
		FROM ${ippool_table} WITH (xlock rowlock readpast) \
		JOIN dhcpstatus ON ${ippool_table}.status_id = dhcpstatus.status_id \
		WHERE pool_name = '%{control:${pool_name}}' \
		AND expiry_time < CURRENT_TIMESTAMP \
		AND dhcpstatus.status = 'dynamic' \
		ORDER BY expiry_time \
	) \
	UPDATE cte \
	SET expiry_time = DATEADD(SECOND,${lease_duration},CURRENT_TIMESTAMP), \
	gateway = '%{DHCP-Gateway-IP-Address}' \
	pool_key = '${pool_key}' \
	OUTPUT INSERTED.FramedIPAddress \
	FROM ${ippool_table}"

#
#  Alternatively attempt both in one, more complex, query
#
#  The ORDER BY clause of this query tries to allocate the same IP-address
#  which user had last session.  Ensure that pool_key is unique to the user
#  within a given pool.
#
#allocate_find = "\
#	UPDATE TOP(1) ${ippool_table} \
#	SET FramedIPAddress = FramedIPAddress, \
#	pool_key = '${pool_key}', \
#	expiry_time = DATEADD(SECOND,${lease_duration},CURRENT_TIMESTAMP), \
#	GatewayIPAddress = '%{DHCP-Gateway-IP-Address}' \
#	OUTPUT INSERTED.FramedIPAddress \
#	FROM ${ippool_table} \
#	WHERE ${ippool_table}.id IN ( \
#		SELECT TOP (1) id FROM ${ippool_table} WHERE id IN ( \
#			(SELECT TOP(1) id FROM ${ippool_table} WITH (xlock rowlock readpast) \
#			JOIN dhcpstatus ON ${ippool_table}.status_id = dhcpstatus.status_id \
#			WHERE pool_name = '%{control:${pool_name}}' \
#			AND pool_key = '${pool_key}' \
#			AND dhcpstatus.status IN ('dynamic', 'static') \
#			ORDER BY expiry_time DESC) \
#			UNION \
#			(SELECT TOP(1) id FROM ${ippool_table} WITH (xlock rowlock readpast) \
#			JOIN dhcpstatus ON ${ippool_table}.status_id = dhcpstatus.status_id \
#			WHERE pool_name = '%{control:${pool_name}}' \
#			AND expiry_time < CURRENT_TIMESTAMP \
#			AND dhcpstatus.status = 'dynamic' \
#			ORDER BY expiry_time) \
#		) \
#		ORDER BY CASE WHEN pool_key = '${pool_key}' THEN 0 ELSE 1 END, expiry_time \
#	)"

#
#  If you prefer to allocate a random IP address every time, use this query instead.
#  Note: This is very slow if you have a lot of free IPs.
#
#allocate_find = "\
#	WITH cte AS ( \
#		SELECT TOP(1) FramedIPAddress FROM ${ippool_table} \
#		JOIN dhcpstatus ON ${ippool_table}.status_id = dhcpstatus.status_id \
#		WHERE pool_name = '%{control:${pool_name}}' \
#		AND expiry_time < CURRENT_TIMESTAMP \
#		AND dhcpstatus.status = 'dynamic' \
#		ORDER BY \
#			newid() \
#	) \
#	UPDATE cte WITH (rowlock, readpast) \
#	SET FramedIPAddress = FramedIPAddress \
#	OUTPUT INSERTED.FramedIPAddress"

#
#  If an IP could not be allocated, check to see if the pool exists or not
#  This allows the module to differentiate between a full pool and no pool
#  Note: If you are not running redundant pool modules this query may be
#  commented out to save running this query every time an ip is not allocated.
#
pool_check = "\
	SELECT TOP(1) id \
	FROM ${ippool_table} \
	WHERE pool_name='%{control:${pool_name}}'"

#
#  This is the final IP Allocation query, which saves the allocated ip details.
#  Only needed if the initial "find" query is not storing the allocation.
#
#allocate_update = "\
#	UPDATE ${ippool_table} \
#	SET \
#		GatewayIPAddress = '%{DHCP-Gateway-IP-Address}', pool_key = '${pool_key}', \
#		expiry_time = DATEADD(SECOND,${lease_duration},CURRENT_TIMESTAMP) \
#	WHERE FramedIPAddress = '%I'"

#
#  Use a stored procedure to find AND allocate the address. Read and customise
#  `procedure.sql` in this directory to determine the optimal configuration.
#
#allocate_begin = ""
#allocate_find = "\
#	EXEC fr_dhcp_allocate_previous_or_new_framedipaddress \
#		@v_pool_name = '%{control:${pool_name}}', \
#		@v_gatewayipaddress = '%{DHCP-Gateway-IP-Address}', \
#		@v_pool_key = '${pool_key}', \
#		@v_lease_duration = ${lease_duration} \
#	"
#allocate_update = ""
#allocate_commit = ""

#
#  This query is not applicable to DHCP as there are no accounting
#  START records
#
start_update = ""

#
#  Free an IP when an accounting STOP record arrives - for DHCP this
#  is when a Release occurs
#
stop_begin = ""
stop_clear = "\
	UPDATE ${ippool_table} \
	SET \
		GatewayIPAddress = '', \
		pool_key = '0', \
		expiry_time = CURRENT_TIMESTAMP \
	WHERE pool_name = '%{control:${pool_name}}' \
	AND pool_key = '${pool_key}' \
	AND FramedIPAddress = '%{DHCP-Client-IP-Address}'"
stop_commit = ""

#
#  This query is not applicable to DHCP as there are no accounting
#  ALIVE records
#
alive_update = ""

#
#  This query is not applicable to DHCP
#
on_clear = ""

#
#  This query is not applicable to DHCP
#
off_clear = ""
