#  -*- text -*-
#
#  ippool-dhcp/oracle/queries.conf -- Oracle queries for dhcp-ippool
#
#  $id: 416d59802a1321c16b936bb5e63c288ca3634bcd $

start_begin = "commit"
alive_begin = "commit"
stop_begin = "commit"
on_begin = "commit"
off_begin = "commit"


#
#  Use a stored procedure to find AND allocate the address. Read and customise
#  `procedure.sql` in this directory to determine the optimal configuration.
#  Oracle's locking mechanism limitations prevents the use of single queries
#  that can either find a client's existing address or the first available one.
#
allocate_begin = ""
allocate_find = "\
	SELECT fr_dhcp_allocate_previous_or_new_framedipaddress( \
		'%{control:${pool_name}}', \
		'%{DHCP-Gateway-IP-Address}', \
		'${pool_key}', \
		'${lease_duration}' \
	)"
allocate_update = ""
allocate_commit = ""


#
#  If you prefer to allocate a random IP address every time, use this query instead
#  Note: This is very slow if you have a lot of free IPs.
#
#allocate_find = "\
#	SELECT framedipaddress FROM ${ippool_table} WHERE id IN ( \
#		SELECT id FROM ( \
#			SELECT * \
#			FROM ${ippool_table} \
#			JOIN dhcpstatus \
#			ON ${ippool_table}.status_id = dhcpstatus.status_id \
#			WHERE pool_name = '%{control:${pool_name}}' \
#			AND expiry_time < current_timestamp \
#			AND dhcpstatus.status = 'dynamic' \
#			ORDER BY DBMS_RANDOM.VALUE \
#		) WHERE ROWNUM <= 1 \
#	) FOR UPDATE"

#
#  The above query again, but with SKIP LOCKED. This requires Oracle > 11g.
#  It may work in 9i and 10g, but is not documented, so YMMV.
#
#allocate_find = "\
#	SELECT framedipaddress FROM ${ippool_table} WHERE id IN ( \
#		SELECT id FROM (\
#			SELECT * \
#			FROM ${ippool_table} \
#			JOIN dhcpstatus \
#			ON ${ippool_table}.status_id = dhcpstatus.status_id \
#			WHERE pool_name = '%{control:${pool_name}}' \
#			AND expiry_time < current_timestamp \
#			AND dhcpstatus.status = 'dynamic' \
#			ORDER BY DBMS_RANDOM.VALUE \
#		) WHERE ROWNUM <= 1 \
#	) FOR UPDATE SKIP LOCKED"

#
# A tidier version that needs Oracle >= 12c
#
#allocate_find = "\
#	SELECT framedipaddress FROM ${ippool_table} WHERE id IN (
#		SELECT id FROM ${ippool_table} \
#		JOIN dhcpstatus \
#		ON ${ippool_table}.status_id = dhcpstatus.status_id \
#		WHERE pool_name = '%{control:${pool_name}}' \
#		AND expiry_time < current_timestamp \
#		AND dhcpstatus.status = 'dynamic' \
#		ORDER BY DBMS_RANDOM.VALUE \
#		FETCH FIRST 1 ROWS ONLY
#	) FROM UPDATE SKIP LOCKED"

#
#  If an IP could not be allocated, check to see whether the pool exists or not
#  This allows the module to differentiate between a full pool and no pool
#  Note: If you are not running redundant pool modules this query may be commented
#  out to save running this query every time an ip is not allocated.
#
pool_check = "\
	SELECT id \
	FROM (\
		SELECT id \
		FROM ${ippool_table} \
		WHERE pool_name = '%{control:Pool-Name}'\
	) WHERE ROWNUM = 1"

#
#  This query marks the IP address handed out by "allocate_find" as used
#  for the period of "lease_duration" after which time it may be reused.
#
allocate_update = "\
	UPDATE ${ippool_table} \
	SET \
		gateway = '%{DHCP-Gateway-IP-Address}', \
		pool_key = '${pool_key}', \
		expiry_time = current_timestamp + INTERVAL '${lease_duration}' second(1) \
	WHERE framedipaddress = '%I'"

#
#  This query is not applicable to DHCP as there are no accounting
#  START records
#
start_update = ""

#
#  This query frees an IP address when an accounting STOP record arrives
#  - for DHCP this is when a Release occurs
#
stop_clear = "\
	UPDATE ${ippool_table} \
	SET \
		gateway = '', \
		pool_key = '0', \
		expiry_time = current_timestamp - INTERVAL '1' second(1) \
	WHERE pool_name = '%{control:${pool_name}}' \
	AND pool_key = '${pool_key}' \
	AND framedipaddress = '%{DHCP-Client-IP-Address}'"

#
#  This query is not applicable to DHCP as there are no accounting
#  ALIVE records
#
alive_update = ""

#
#  This query is not applicable to DHCP
#
on_clear = ""

#
#  This query is not applicable to DHCP
#
off_clear = ""
