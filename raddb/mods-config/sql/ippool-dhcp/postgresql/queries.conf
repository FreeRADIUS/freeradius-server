# -*- text -*-
#
#  ippool-dhcp/postgresql/queries.conf -- PostgreSQL queries for rlm_sqlippool
#
#  $Id$

#
#  Use a stored procedure to find AND allocate the address. Read and customise
#  `procedure.sql` in this directory to determine the optimal configuration.
#
#  This requires PostgreSQL >= 9.5 as SKIP LOCKED is used.
#
#  The "NO LOAD BALANCE" comment is included here to indicate to a PgPool
#  system that this needs to be a write transaction. PgPool itself cannot
#  detect this from the statement alone. If you are using PgPool and do not
#  have this comment, the query may go to a read only server, and will fail.
#  This has no negative effect if you are not using PgPool.
#
allocate_begin = ""
allocate_find = "\
	/*NO LOAD BALANCE*/ \
	SELECT fr_allocate_previous_or_new_framedipaddress( \
		'%{control:${pool_name}}', \
		'%{SQL-User-Name}', \
		'%{Calling-Station-Id}', \
		'%{NAS-IP-Address}', \
		'${pool_key}', \
		'${lease_duration}' \
	)"
allocate_update = ""
allocate_commit = ""

#
#  If stored procedures are not able to be used, the following queries can
#  be used.
#  Comment out all the above queries and choose the appropriate "allocate_find"
#  to match the desired outcome and also the version of "allocate_update" below.
#

#
#  This query allocates an IP address from the Pool
#  The ORDER BY clause of this query tries to allocate the same IP-address
#  to the user that they had last session.  Ensure that pool_key is unique
#  to the user within a given pool.
#
#  Since PostgreSQL doesn't support FOR UPDATE inside a UNION we start
#  by locking the table.  PostgreSQL has an UPDATE ... RETURNING syntax
#  allowing the find and update queries to be merged into one
#  reducing round trips to the database.   If you use this allocate_find
#  query, keep allocate_update commented out.
#
#allocate_begin = "BEGIN; LOCK TABLE ${ippool_table}"
#
#allocate_find = "\
#	UPDATE ${ippool_table} \
#	SET pool_key = '${pool_key}', \
#	expiry_time = 'now'::timestamp(0) + '${lease_duration} second'::interval, \
#	nasipaddress = '%{NAS-IP-Address}', \
#	callingstationid = '%{Calling-Station-Id}', \
#	username = '%{SQL-User-Name}' \
#	WHERE id IN ( \
#		SELECT id \
#		FROM ${ippool_table} \
#		WHERE id IN ( \
#			SELECT id FROM ( \
#				( \
#					SELECT id, pool_key, expiry_time \
#					FROM ${ippool_table} \
#					WHERE pool_name = '%{control:${pool_name}}' \
#					AND expiry_time < 'now'::timestamp(0) \
#					ORDER BY expiry_time LIMIT 1 \
#				) UNION ( \
#					SELECT id, pool_key, expiry_time \
#					FROM ${ippool_table} \
#					WHERE pool_name = '%{control:${pool_name}}' \
#					AND pool_key = '${pool_key}' \
#				) \
#			) AS iplist \
#		) ORDER BY (pool_key <> '${pool_key}'), expiry_time \
#		LIMIT 1) \
#	RETURNING framedipaddress"

#
#  If you prefer to allocate a random IP address every time, use this query instead
#  Note: This is very slow if you have a lot of free IPs.
#  Use of either of these next two queries should have the allocate_begin line commented out
#  and allocate_update below un-commented.
#
#allocate_find = "\
#	SELECT framedipaddress FROM ${ippool_table} \
#	WHERE pool_name = '%{control:${pool_name}}' AND expiry_time < 'now'::timestamp(0) \
#	ORDER BY RANDOM() \
#	LIMIT 1 \
#	FOR UPDATE"

#
#  The above query again, but with SKIP LOCKED. This requires PostgreSQL >= 9.5.
#
#allocate_find = "\
#	SELECT framedipaddress FROM ${ippool_table} \
#	WHERE pool_name = '%{control:${pool_name}}' AND expiry_time < 'now'::timestamp(0) \
#	ORDER BY RANDOM() \
#	LIMIT 1 \
#	FOR UPDATE SKIP LOCKED"

#
#  This query marks the IP address handed out by "allocate-find" as used
#  for the period of "lease_duration" after which time it may be reused.
#
#allocate_update = "\
#	UPDATE ${ippool_table} \
#	SET \
#		nasipaddress = '%{NAS-IP-Address}', \
#		pool_key = '${pool_key}', \
#		callingstationid = '%{Calling-Station-Id}', \
#		username = '%{SQL-User-Name}', \
#		expiry_time = 'now'::timestamp(0) + '${lease_duration} second'::interval \
#	WHERE framedipaddress = '%I'"

#
#  If an IP could not be allocated, check to see whether the pool exists or not
#  This allows the module to differentiate between a full pool and no pool
#  Note: If you are not running redundant pool modules this query may be commented
#  out to save running this query every time an ip is not allocated.
#
pool_check = "\
	SELECT id \
	FROM ${ippool_table} \
	WHERE pool_name='%{control:${pool_name}}' \
	LIMIT 1"


#  This query is not applicable to DHCP.
allocate_clear = ""


#
#  This query is not applicable to DHCP as there are no accounting
#  START records
#
start_update = ""

#
#  This query frees an IP address when an accounting
#  STOP record arrives - for DHCP this is when a Release occurs
#
stop_clear = "\
	UPDATE ${ippool_table} \
	SET \
		nasipaddress = '', \
		pool_key = 0, \
		expiry_time = 'now'::timestamp(0) - '1 second'::interval \
	WHERE pool_name = '%{control:${pool_name}}' \
	AND pool_key = '${pool_key}' \
	AND framedipaddress = '%{DHCP-Client-IP-Address}'"

#
#  This query is not applicable to DHCP as there are no accounting
#  ALIVE records
#
alive_update = ""

#
#  This query is not applicable to DHCP
#
on_clear = ""

#
#  This query is not applicable to DHCP
#
off_clear = ""
