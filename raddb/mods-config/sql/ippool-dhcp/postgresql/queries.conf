# -*- text -*-
#
#  ippool-dhcp/postgresql/queries.conf -- PostgreSQL queries for rlm_sqlippool
#
#  $Id$

#  Using SKIP LOCKED speed up the allocate_find query by 10
#  times. However, it requires PostgreSQL >= 9.5.
#
#  If you are using an older version of PostgreSQL comment out the following:
skip_locked = "SKIP LOCKED"

#
#  This sequence of queries allocate an IP address from the Pool
#
#  If the SELECT and UPDATE are in separate queries then set the following
#  to "BEGIN" to wrap them as a transaction
#
allocate_begin = ""

#
#  This query attempts to re-allocate the most recent IP address
#  for the client
allocate_existing = "\
	WITH cte AS ( \
		SELECT framedipaddress \
		FROM ${ippool_table} \
		WHERE pool_name = '%{control:${pool_name}}' \
		AND pool_key = '${pool_key}' \
		AND status IN ('dynamic', 'static') \
		ORDER BY expiry_time DESC \
		LIMIT 1 \
		FOR UPDATE ${skip_locked} \
	) \
	UPDATE ${ippool_table} \
	SET expiry_time = 'now'::timestamp(0) + '${lease_duration} second'::interval, \
	gateway = '%{DHCP-Gateway-IP-Address}' \
	FROM cte \
	WHERE cte.framedipaddress = ${ippool_table}.framedipaddress \
	RETURNING cte.framedipaddress"

#
#  If the preceding query doesn't find an address the following one
#  is used for finding one from the pool
#
allocate_find = "\
	WITH cte AS ( \
		SELECT framedipaddress \
		FROM ${ippool_table} \
		WHERE pool_name = '%{control:${pool_name}}' \
		AND expiry_time < 'now'::timestamp(0) \
		AND status = 'dynamic' \
		ORDER BY expiry_time \
		LIMIT 1 \
		FOR UPDATE ${skip_locked} \
	) \
	UPDATE ${ippool_table} \
	SET pool_key = '${pool_key}', \
	expiry_time = 'now'::timestamp(0) + '${lease_duration} second'::interval, \
	gateway = '%{DHCP-Gateway-IP-Address}' \
	WHERE cte.framedipaddress = ${ippool_table}.framedipaddress \
	RETURNING cte.framedipaddress"

#
#  If you prefer to allocate a random IP address every time, use this query instead
#  Note: This is very slow if you have a lot of free IPs.
#  Use of either of these next two queries should have the allocate_begin line commented out
#  and allocate_update below un-commented.
#
#allocate_find = "\
#	SELECT framedipaddress FROM ${ippool_table} \
#	WHERE pool_name = '%{control:${pool_name}}' AND expiry_time < 'now'::timestamp(0) \
#	AND status = 'dynamic' \
#	ORDER BY RANDOM() \
#	LIMIT 1 \
#	FOR UPDATE ${skip_locked}"

#
#  This query marks the IP address handed out by "allocate-find" as used
#  for the period of "lease_duration" after which time it may be reused.
#  It is only needed if the SELECT query does not perform the update.
#
#allocate_update = "\
#	UPDATE ${ippool_table} \
#	SET \
#		gateway = '%{DHCP-Gateway-IP-Address}', \
#		pool_key = '${pool_key}', \
#		expiry_time = 'now'::timestamp(0) + '${lease_duration} second'::interval \
#	WHERE framedipaddress = '%I'"

#
#  If the SELECT and UPDATE are in separate queries then set the following
#  to "COMMIT" to wrap them as a transaction
#
allocate_commit = ""

#
#  If an IP could not be allocated, check to see whether the pool exists or not
#  This allows the module to differentiate between a full pool and no pool
#  Note: If you are not running redundant pool modules this query may be commented
#  out to save running this query every time an ip is not allocated.
#
pool_check = "\
	SELECT id \
	FROM ${ippool_table} \
	WHERE pool_name='%{control:${pool_name}}' \
	LIMIT 1"

#
#  Use a stored procedure to find AND allocate the address. Read and customise
#  `procedure.sql` in this directory to determine the optimal configuration.
#
#  This requires PostgreSQL >= 9.5 as SKIP LOCKED is used.
#
#  The "NO LOAD BALANCE" comment is included here to indicate to a PgPool
#  system that this needs to be a write transaction. PgPool itself cannot
#  detect this from the statement alone. If you are using PgPool and do not
#  have this comment, the query may go to a read only server, and will fail.
#  This has no negative effect if you are not using PgPool.
#
#allocate_begin = ""
#allocate_find = "\
#	/*NO LOAD BALANCE*/ \
#	SELECT fr_allocate_previous_or_new_framedipaddress( \
#		'%{control:${pool_name}}', \
#		'%{DHCP-Gateway-IP-Address}', \
#		'${pool_key}', \
#		'${lease_duration}' \
#	)"
#allocate_update = ""
#allocate_commit = ""

#
#  This query is not applicable to DHCP as there are no accounting
#  START records
#
start_update = ""

#
#  This query frees an IP address when an accounting
#  STOP record arrives - for DHCP this is when a Release occurs
#
stop_clear = "\
	UPDATE ${ippool_table} \
	SET \
		gateway = '', \
		pool_key = 0, \
		expiry_time = 'now'::timestamp(0) - '1 second'::interval \
	WHERE pool_name = '%{control:${pool_name}}' \
	AND pool_key = '${pool_key}' \
	AND framedipaddress = '%{DHCP-Client-IP-Address}'"

#
#  This query is not applicable to DHCP as there are no accounting
#  ALIVE records
#
alive_update = ""

#
#  This query is not applicable to DHCP
#
on_clear = ""

#
#  This query is not applicable to DHCP
#
off_clear = ""
