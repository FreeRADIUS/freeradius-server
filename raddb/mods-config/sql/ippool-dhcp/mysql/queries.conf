#  -*- text -*-
#
#  ippool-dhcp/mysql/queries.conf -- MySQL queries for rlm_sqlippool
#
#  $Id$

#
#  This series of queries allocates an IP address
#
#  The ORDER BY clause of this query tries to allocate the same IP-address
#  which the user last had.  Ensure that pool_key is unique to the user
#  within a given pool.
#
#  If using MySQL < 8.0.1 then remove SKIP LOCKED

allocate_find = "\
	(SELECT framedipaddress, pool_key, expiry_time FROM radippool \
		WHERE pool_name = '%{control:${pool_name}}' \
		AND pool_key = '${pool_key}' \
		ORDER BY expiry_time DESC LIMIT 1 FOR UPDATE SKIP LOCKED \
	) UNION ( \
	SELECT framedipaddress, pool_key, expiry_time FROM radippool \
		WHERE pool_name = '%{control:${pool_name}}' \
		AND expiry_time < NOW() \
		ORDER BY expiry_time LIMIT 1 FOR UPDATE SKIP LOCKED \
	) ORDER BY (pool_key <> '${pool_key}'), expiry_time \
	LIMIT 1"

#
#  If you prefer to allocate a random IP address every time, use this query instead.
#  Note: This is very slow if you have a lot of free IPs.
#
#allocate_find = "\
#	SELECT framedipaddress FROM ${ippool_table} \
#	WHERE pool_name = '%{control:${pool_name}}' \
#	AND expiry_time < NOW() \
#	ORDER BY \
#		RAND() \
#	LIMIT 1 \
#	FOR UPDATE"

#
#  The above query again, but with SKIP LOCKED. This requires MySQL >= 8.0.1,
#  and InnoDB.
#
#allocate_find = "\
#	SELECT framedipaddress FROM ${ippool_table} \
#	WHERE pool_name = '%{control:${pool_name}}' \
#	AND expiry_time < NOW() \
#	ORDER BY \
#		RAND() \
#	LIMIT 1 \
#	FOR UPDATE SKIP LOCKED"

#
#  If an IP could not be allocated, check to see if the pool exists or not
#  This allows the module to differentiate between a full pool and no pool
#  Note: If you are not running redundant pool modules this query may be
#  commented out to save running this query every time an ip is not allocated.
#
pool_check = "\
	SELECT id \
	FROM ${ippool_table} \
	WHERE pool_name='%{control:${pool-name}}' \
	LIMIT 1"

#
#  This is the final IP Allocation query, which saves the allocated ip details.
#
allocate_update = "\
	UPDATE ${ippool_table} \
	SET \
		nasipaddress = '%{DHCP-Gateway-IP-Address}', pool_key = '${pool_key}', \
		expiry_time = NOW() + INTERVAL ${lease_duration} SECOND \
	WHERE framedipaddress = '%I'"

#
#  Use a stored procedure to find AND allocate the address. Read and customise
#  `procedure.sql` in this directory to determine the optimal configuration.
#
#allocate_begin = ""
#allocate_find = "\
#	CALL fr_dhcp_allocate_previous_or_new_framedipaddress( \
#		'%{control:${pool_name}}', \
#		'%{DHCP-Gateway-IP-Address}', \
#		'${pool_key}', \
#		${lease_duration} \
#	)"
#allocate_update = ""
#allocate_commit = ""

#
#  This query is not applicable to DHCP as there are no accounting
#  START records
#
start_update = ""

#
#  This query frees an IP address when an accounting STOP record
#  arrives - for DHCP this is when a Release occurs
#
stop_clear = "\
	UPDATE ${ippool_table} \
	SET \
		nasipaddress = '', \
		pool_key = '0', \
		expiry_time = NOW() \
	WHERE pool_name = '%{control:${pool_name}}' \
	AND pool_key = '${pool_key}' \
	AND framedipaddress = '%{DHCP-Client-IP-Address}'"

#
#  This query is not applicable to DHCP as there are no accounting ALIVE records
#
alive_update = ""

#
#  This query is not applicable to DHCP
#
on_clear = ""

#
#  This query is not applicable to DHCP
#
off_clear = ""
