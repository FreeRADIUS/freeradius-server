# -*- text -*-
#
#  ippool-dhcp/mysql/queries.conf -- MySQL queries for rlm_sqlippool
#
#  $Id$

#  *****************
#  * DHCP DISCOVER *
#  *****************

#
#  This series of queries allocates an IP address

#  If using MySQL < 8.0.1 then remove SKIP LOCKED
#
#  Attempt to find the most recent existing IP address for the client
#
allocate_existing = "\
	SELECT framedipaddress FROM ${ippool_table} \
	WHERE pool_name = '%{control:${pool_name}}' \
	AND pool_key = '${pool_key}' \
	AND `status` IN ('dynamic', 'static') \
	ORDER BY expiry_time DESC LIMIT 1 FOR UPDATE SKIP LOCKED"

#
#  Determine whether the requested IP address is available
#
allocate_requested = "\
	SELECT framedipaddress FROM ${ippool_table} \
	WHERE pool_name = '%{control:${pool_name}}' \
	AND framedipaddress = '%{%{${req_attribute_name}}:-0.0.0.0}' \
	AND `status` = 'dynamic' \
	AND expiry_time < NOW() \
	FOR UPDATE SKIP LOCKED"

#
#  If the existing address can't be found this query will be run to
#  find a free address
#
allocate_find = "\
	SELECT framedipaddress FROM ${ippool_table} \
	WHERE pool_name = '%{control:${pool_name}}' \
	AND expiry_time < NOW() \
	AND `status` = 'dynamic' \
	ORDER BY expiry_time LIMIT 1 FOR UPDATE SKIP LOCKED"

#
#  The ORDER BY clause of this query tries to allocate the same IP-address
#  which the user last had.  Ensure that pool_key is unique to the user
#  within a given pool.
#

#
#  Alternatively do the operations in one query.  Depending on transaction
#  isolation mode, this can cause deadlocks
#
#allocate_find = "\
#	(SELECT framedipaddress, 1 AS o FROM ${ippool_table} \
#		WHERE pool_name = '%{control:${pool_name}}' \
#		AND pool_key = '${pool_key}' \
#		AND `status` IN ('dynamic', 'static') \
#		ORDER BY expiry_time DESC LIMIT 1 FOR UPDATE SKIP LOCKED \
#	) UNION ( \
#	SELECT framedipaddress, 2 AS o FROM ${ippool_table} \
#		WHERE pool_name = '%{control:${pool_name}}' \
#		AND framedipaddress = '%{%{${req_attribute_name}}:-0.0.0.0}' \
#		AND `status` = 'dynamic' \
#		AND ( pool_key = '${pool_key}' OR expiry_time < NOW() ) \
#		FOR UPDATE SKIP LOCKED \
#	) UNION ( \
#	SELECT framedipaddress, 3 AS o FROM ${ippool_table} \
#		WHERE pool_name = '%{control:${pool_name}}' \
#		AND expiry_time < NOW() \
#		AND `status` = 'dynamic' \
#		ORDER BY expiry_time LIMIT 1 FOR UPDATE SKIP LOCKED \
#	) ORDER BY o \
#	LIMIT 1"

#
#  If you prefer to allocate a random IP address every time, use this query instead.
#  Note: This is very slow if you have a lot of free IPs.
#
#allocate_find = "\
#	SELECT framedipaddress FROM ${ippool_table} \
#	WHERE pool_name = '%{control:${pool_name}}' \
#	AND expiry_time < NOW() \
#	AND `status` = 'dynamic' \
#	ORDER BY \
#		RAND() \
#	LIMIT 1 \
#	FOR UPDATE"

#
#  The above query again, but with SKIP LOCKED. This requires MySQL >= 8.0.1,
#  and InnoDB.
#
#allocate_find = "\
#	SELECT framedipaddress FROM ${ippool_table} \
#	WHERE pool_name = '%{control:${pool_name}}' \
#	AND expiry_time < NOW() \
#	AND `status` = 'dynamic' \
#	ORDER BY \
#		RAND() \
#	LIMIT 1 \
#	FOR UPDATE SKIP LOCKED"

#
#  If an IP could not be allocated, check to see if the pool exists or not
#  This allows the module to differentiate between a full pool and no pool
#  Note: If you are not running redundant pool modules this query may be
#  commented out to save running this query every time an ip is not allocated.
#
pool_check = "\
	SELECT id \
	FROM ${ippool_table} \
	WHERE pool_name='%{control:${pool_name}}' \
	LIMIT 1"

#
#  This is the final IP Allocation query, which saves the allocated ip details.
#
allocate_update = "\
	UPDATE ${ippool_table} \
	SET \
		gateway = '%{DHCP-Gateway-IP-Address}', pool_key = '${pool_key}', \
		expiry_time = NOW() + INTERVAL ${offer_duration} SECOND \
	WHERE framedipaddress = '%I'"

#
#  Use a stored procedure to find AND allocate the address. Read and customise
#  `procedure.sql` in this directory to determine the optimal configuration.
#
#allocate_begin = ""
#allocate_find = "\
#	CALL fr_dhcp_allocate_previous_or_new_framedipaddress( \
#		'%{control:${pool_name}}', \
#		'%{DHCP-Gateway-IP-Address}', \
#		'${pool_key}', \
#		${offer_duration}, \
#		'%{%{${req_attribute_name}}:-0.0.0.0}' \
#	)"
#allocate_update = ""
#allocate_commit = ""


# ****************
# * DHCP REQUEST *
# ****************

#
#  This query revokes any active offers for addresses that a client is not
#  requesting when a DHCP REQUEST packet arrives
#
start_update = "\
	UPDATE ${ippool_table} \
	SET \
		gateway = '', \
		pool_key = '', \
		expiry_time = NOW() \
	WHERE pool_name = '%{control:${pool_name}}' \
	AND pool_key = '${pool_key}' \
	AND framedipaddress <> '%{DHCP-Requested-IP-Address}' \
	AND expiry_time > NOW() \
	AND `status` = 'dynamic'"

#
#  This query extends an existing lease (or offer) when a DHCP REQUEST packet
#  arrives.  This query must update a row when a lease is succesfully requested
#  - queries that update no rows will result in a "notfound" response to
#  the module which by default will give a DHCP-NAK reply.  In this example
#  incrementing "counter" is used to achieve this.
#
alive_update = "\
	UPDATE ${ippool_table} \
	SET \
		expiry_time = NOW() + INTERVAL ${lease_duration} SECOND, \
		counter = counter + 1 \
	WHERE pool_name = '%{control:${pool_name}}' \
	AND pool_key = '${pool_key}' \
	AND framedipaddress = '%{%{DHCP-Requested-IP-Address}:-%{DHCP-Client-IP-Address}}'"


# ****************
# * DHCP RELEASE *
# ****************

#
#  This query frees an IP address when a DHCP RELEASE packet arrives
#
stop_clear = "\
	UPDATE ${ippool_table} \
	SET \
		gateway = '', \
		pool_key = '', \
		expiry_time = NOW() \
	WHERE pool_name = '%{control:${pool_name}}' \
	AND pool_key = '${pool_key}' \
	AND framedipaddress = '%{DHCP-Client-IP-Address}' \
	AND `status` = 'dynamic'"


#
#  This query is not applicable to DHCP
#
on_clear = ""


# ****************
# * DHCP DECLINE *
# ****************

#
#  This query marks an IP address as declined when a DHCP Decline
#  packet arrives
#
off_clear = "\
	UPDATE ${ippool_table} \
	SET status = 'declined' \
	WHERE pool_name = '%{control:${pool_name}}' \
	AND pool_key = '${pool_key}' \
	AND framedipaddress = '%{DHCP-Requested-IP-Address}'"
