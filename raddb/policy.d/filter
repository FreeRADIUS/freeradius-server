#
#	Example of forbidding all attempts to login via
#	realms.
#
deny_realms {
	if (&User-Name && (&User-Name =~ /@|\\/)) {
		reject
	}
}

#
#	Filter the username
#
#  Force some sanity on User-Name. This helps to avoid issues
#  issues where the back-end database is "forgiving" about
#  what constitutes a user name.
#
filter_username {
	if (!&User-Name) {
		noop
	}

	#
	#  reject mixed case e.g. "UseRNaMe"
	#

	#if (&User-Name != "%{tolower:%{User-Name}}") {
	#	reject
	#}

	#
	#  reject all whitespace
	#  e.g. "user@ site.com", or "us er", or " user", or "user "
	#
	if (&User-Name =~ / /) {
		update reply {
			&Reply-Message += 'Rejected: Username contains whitespace'
		}
		reject
	}

	#
	#  reject Multiple @'s
	#  e.g. "user@site.com@site.com"
	#
	if (&User-Name =~ /@.*@/ ) {
		update reply {
			&Reply-Message += 'Rejected: Multiple @ in username'
		}
		reject
	}

	#
	#  reject double dots
	#  e.g. "user@site..com"
	#
	if (&User-Name =~ /\.\./ ) {
		update reply {
			&Reply-Message += 'Rejected: Username contains ..s'
		}
		reject
	}

	#
	#  must have at least 1 string-dot-string after @
	#  e.g. "user@site.com"
	#
	if ((&User-Name =~ /@/) && (&User-Name !~ /@(.+)\.(.+)$/))  {
		update reply {
			&Reply-Message += 'Rejected: Realm does not have at least one dot separator'
		}
		reject
	}

	#
	#  Realm ends with a dot
	#  e.g. "user@site.com."
	#
	if (&User-Name =~ /\.$/)  {
		update reply {
			&Reply-Message += 'Rejected: Realm ends with a dot'
		}
		reject
	}

	#
	#  Realm begins with a dot
	#  e.g. "user@.site.com"
	#
	if (&User-Name =~ /@\./)  {
		update reply {
			&Reply-Message += 'Rejected: Realm begins with a dot'
		}
		reject
	}
}

#
#	Filter the User-Password
#
#  Some equipment sends passwords with embedded zeros.
#  This poliocy filters them out.
#
filter_password {
	if (&User-Password && \
	   (&User-Password != "%{string:User-Password}")) {
		update request {
			&Tmp-String-0 := "%{string:User-Password}"
			&User-Password := "%{string:Tmp-String-0}"
		}
	 }
}

filter_inner_identity {
	#
	#  No names, reject.
	#
	if (!&outer.request:User-Name || !&User-Name) {
		update request {
			Module-Failure-Message = "User-Name is required for tunneled authentication"
		}
		reject
	}

	#
	#  If the names are the same, it's OK.
	#
	#  Otherwise, do lots of sanity checks
	#
	if (&outer.request:User-Name != &User-Name) {
		#
		#  We require the outer User-Name
		#  to be "@realm", or "anon...",
		#  hopefully "anonymous", or "anonymous@realm"
		#
		#  The checks for "anonymous" are more relaxed
		#  because vendors send a variety of names
		#  instead of following the standards.
		#
		if ((&outer.request:User-Name !~ /^@/) && \
		    (&outer.request:User-Name !~ /^anon/)) {
			update request {
				Module-Failure-Message = "User-Name is not correctly anonymized"
			}
			reject
		}

		#
		#  Now we get complicated.  Look for the outer realm
		#
		if (&outer.request:User-Name =~ /@(.*)$/) {
			update request {
				Outer-Realm-Name = "%{1}"
			}
		}

		#
		#  And the inner realm
		#
		if (&User-Name =~ /@(.*)$/) {
			update request {
				Inner-Realm-Name = "%{1}"
			}
		}

		#
		#  It's OK to have outer "@example.com" and
		#  inner "bob".  We do more detailed checks
		#  only if the inner realm exists.
		#
		#  It's OK to have the same realm name, or
		#  the outer one is "example.com" and the inner
		#  is "secure.example.com"
		#
		if (&Inner-Realm-Name && \
		    (&Inner-Realm-Name != &Outer-Realm-Name) && \
		    (&Inner-Realm-Name !~ /\.%{Outer-Realm-Name}$/)) {
			update request {
				Module-Failure-Message = "Inner and outer realms are not compatible"
			}
			reject
		}

		#
		#  It's OK to have an outer realm and no inner realm.
		#
	}
}
