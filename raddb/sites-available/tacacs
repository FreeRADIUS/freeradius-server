#  -*- text -*-
######################################################################
#
#	As of version 4.0.0, the server also supports the TACACS+
#	protocol.
#
#	https://www.rfc-editor.org/rfc/rfc8907
#
#	$Id$
#
######################################################################

server tacacs {
	#
	#  namespace:: Needs to be "tacacs" for TACACS+ functionality.
	#
	namespace = tacacs

	#
	#  ### TACACS+ Configuration
	#
	#  All of the configuration for processing TACAC+ packets goes here.
	#
	tacacs {
		#
		#  #### Access-Request subsection
		#
		#  This section contains configuration which is
		#  specific to processing `Access-Request` packets.
		#
		#  Similar sections can be added, but are not
		#  necessary for Accounting-Request (and other)
		#  packets.  At this time, there is no configuration
		#  needed for other packet types.
		#
		Authentication {
			#
			#  log:: Logging configuration for TACACS+ authentication
			#
			log {
				#
				#  stripped_names:: Log the full
				#  `User-Name` attribute, as it was
				#  found in the request.
				#
				#  allowed values: {no, yes}
				#
				stripped_names = no

				#
				#  auth:: Log authentication requests
				#  to the log file.
				#
				#  allowed values: {no, yes}
				#
				auth = no

				#
				#  auth_goodpass:: Log "good"
				#  passwords with the authentication
				#  requests.
				#
				#  allowed values: {no, yes}
				#
				auth_goodpass = no

				#
				#  auth_badpass:: Log "bad"
				#  passwords with the authentication
				#  requests.
				#
				#  allowed values: {no, yes}
				#
				auth_badpass = no

				#
				#  msg_goodpass::
				#  msg_badpass::
				#
				#  Log additional text at the end of the "Login OK" messages.
				#  for these to work, the "auth" and "auth_goodpass" or "auth_badpass"
				#  configurations above have to be set to "yes".
				#
				#  The strings below are dynamically expanded, which means that
				#  you can put anything you want in them.  However, note that
				#  this expansion can be slow, and can negatively impact server
				#  performance.
				#
#				msg_goodpass = ""
#				msg_badpass = ""

				#
				#  msg_denied::
				#
				#  The message when the user exceeds the Simultaneous-Use limit.
				#
				msg_denied = "You are already logged in - access denied"
			}

			#
			#  session:: Controls how ongoing
			#  (multi-round) sessions are handled
			#
			#  This section is only useful for ASCII authentications.
			#  It is the only authentication type which supports
			#  sending challenges for further data.
			#
			session {
				#
				#  max:: The maximum number of concurrent ongoing sessions
				#
#				max = 4096

				#
				#  max_rounds: The maximum number of round trips which are allowed
				#
				#  This is only enforced for `Authentication-Type = ASCII`, when
				#  the server replies with `GetUser` or `GetPass` or `GetData`.
				#
				#  Some broken clients will send packets in a loop, forever.
				#  This configuration helps to catch and prevent that.
				#
				max_rounds = 4

				#
				#  timeout:: How long to wait before expiring a
				#  session.
				#
				#  The timer starts when a response
				#  with a state value is sent.  The
				#  timer stops when a request
				#  containing the previously sent
				#  state value is received.
				#
#				timeout = 15
			}
		}

		#
		#  There is currently no configuration for other packet types.
		#
	}

	listen {
		#
		#  type:: The type of packet to accept.
		#
		#  Multiple types can be accepted by using multiple
		#  lines of `type = ...`.
		#
		#  As described in RFC 8907, the packet types are:
		#
		type = Authentication-Start
		type = Authentication-Continue
		type = Authorization-Request
		type = Accounting-Request

		#
		#  transport:: The transport protocol.
		#
		#  Only `tcp` is allowed.  TACACS+ does not use UDP or TLS.
		#
		transport = tcp

		#
		#  ## Protocols
		#
		#  tcp { ... }:: TCP is configured here.
		#
		tcp {
			#
			#  NOTE: Don't change anything if you are not sure.
			#

			#
			#  port:: The port where we accept packets.
			#
			#  The port should be 49 for a production network.
			#
			port = 49

			#
			#  ipaddr:: The IP address where we accept packets.
			#
			ipaddr = *

			#
			#  interface:: Interface to bind to.
			#
#			interface = eth0

			#
			#  max_packet_size:: Our max packet size. may be different from the parent.
			#
#			max_packet_size = 4096

			#
			#  recv_buff:: How big the kernel's receive buffer should be.
			#
#			recv_buff = 1048576

			#
			#  send_buff:: How big the kernel's send buffer should be.
			#
#			send_buff = 1048576

			#
			#  src_ipaddr:: IP we open our socket on.
			#
#			src_ipaddr = ""
		}

		#
		#  limit:: limits for this socket.
		#
		#  The `limit` section contains configuration items
		#  which enforce various limits on the socket.  These
		#  limits are usually transport-specific.
		#
		#  Limits are used to prevent "run-away" problems.
		#
		limit {
			#
			#  max_connections:: The maximum number of
			#  connected sockets which will be accepted
			#  for this listener.
			#
			#  Each connection opens a new socket, so be
			#  aware of system file descriptor
			#  limitations.
			#
			#  If the listeners do not use connected
			#  sockets (e.g. TCP), then this configuration
			#  item is ignored.
			#
			max_connections = 256

			#
			#  idle_timeout:: Time after which idle
			#  connections are deleted.
			#
			#  Useful range of values: 5 to 600
			#
			idle_timeout = 60.0
		}
	}

	#
	#  ## Clients
	#
	#  A virtual server can have multiple `client` definitions.  These clients take priority
	#  over  the global `client` definitions.
	#
	#  See the main `clients.conf` file for documentation on the `client` section.
	#
	client tacacs {
		ipaddr = 127.0.0.1

		#
		#  This has to be specified for all TACACS+ clients.
		#
		#  There is no standard for TACACS+ over UDP.
		#
		proto = tcp

		#
		#  The TACACS+ key, or secret.  If a secret is defined, then
		#  it will be used.  All packets coming from this client MUST be
		#  encrypted with the shared secret.
		#
		#  The `secret` configuration item can be omitted or deleted,
		#  in which case all of the information (including passwords)
		#  are sent over the network in the clear.  This practice is
		#  not recommended.
		#
		secret = testing123
	}

	#
	#  ## Authentication-Start
	#

	#
	#  ### Recv
	#
	recv Authentication-Start {
		-sql

		#
		#  In general, it is not necessary to set `Auth-Type` here.  The packet header
		#  contains a TACACS `Authentication-Type` with value `PAP`, `CHAP`, etc.  That value will
		#  be used automatically.
		#
		#  The only reason to set `Auth-Type` here is when you want to use a custom
		#  authentication method, such as `ldap`.
		#
	}

	authenticate PAP {
		pap
	}

	authenticate CHAP {
		chap
	}

	#
	#  [NOTE]
	#  =====
	#  In order to use MSCHAP / MSCHAPv2 with TACACS, the instance of
	#  `rlm_mschap` being called must be configured correctly.
	#  The default configuration referrs to the attributes relevant to
	#  RADIUS.  The attributes have different names in TACACS.
	#
	#  If both RADIUS and TACACS virtual servers are defined and both
	#  are using `rlm_mschap`, then two instances of the module will
	#  need to be configured, one for each protocol.
	#
	#  See the `mschap` module for more details.
	#
	authenticate MSCHAP {
		mschap
	}

	authenticate MSCHAPv2 {
		mschap
	}

	#
	#  The automatic state machine will ensure that both User-Name
	#  and User-Password have been provided by this point making
	#  ASCII authentication equivalent to PAP.
	#
	#  Alternatively, if extra data is requried, set
	#  &reply.Authentication-Status := Getdata
	#  to request the extra data, which will be in &User-Message in
	#  the next packet (if the client provides it)
	#
	authenticate ASCII {
		pap
	}

	#
	#  ### Send
	#
	send Authentication-Pass {
		&reply.Server-Message := "Hello %{User-Name}"
	}

	send Authentication-Fail {
		&reply.Server-Message := "Failed login!"
	}

	#
	#  With ASCII methods, GetUser and GetPass typically send a prompt
	#  for the client to present to the user.
	#
	send Authentication-GetUser {
		&reply.Server-Message := "Username:"
	}

	send Authentication-GetPass {
		&reply.Server-Message := "Password:"
	}

	#
	#  ## Authentication-Continue
	#
	#  This should handle ASCII methods as PAP with challenge-response.
	#

	#
	#  ### Recv
	#
	recv Authentication-Continue {
		#
		#	https://tools.ietf.org/id/draft-ietf-opsawg-07.html#rfc.section.4.3
		#
		"%{Authentication-Continue-Flags}"
		"%{User-Message}"
		"%{Data}"
	}

	#
	#	## Authorization
	#

	#
	#	### Recv
	#
	recv Authorization-Request {
		"%{Authentication-Method}"
		"%{Privilege-Level}"
		"%{Authentication-Type}"
		"%{Authentication-Service}"
		"%{User-Name}"
		"%{Client-Port}"
		"%{Remote-Address}"
		"%{Argument-List}"
	}

	#
	#	### Send
	#
	send Authorization-Pass-Add {
		&reply.Authorization-Status := Pass-Add
		&reply.Server-Message := "authorization-response-server"
		&reply.Data := "authorization-response-data"
		&reply.Argument-List := "key1=var1"
	}

	#
	#	## Accounting
	#

	#
	#	### Recv
	#
	recv Accounting-Request {
		#
		#  Create a 'detail'ed log of the packets.
		#
		detail
	}

	#  First packet for a session
	accounting Start {
	}

	#  Updates a previous start
	accounting Watchdog-Update {
	}

	#  Updates a session
	accounting Watchdog {
	}

	#  Stops a session
	accounting Stop {
	}

	#
	#	### Send
	#
	send Accounting-Success {
		&reply.Server-Message := "Success"
	}

	send Accounting-Error {
		&reply.Server-Message := "Error"
	}

	#
	#	NOTE: Proxying of TACACS+ requests is NOT supported.
	#
}
