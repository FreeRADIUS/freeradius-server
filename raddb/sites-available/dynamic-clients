# -*- text -*-
######################################################################
#
#	Sample configuration file for dynamically updating the list
#	of RADIUS clients at run time.
#
#	Everything is keyed off a client "network" (for example,
#	192.168.0.2/24). This configuration lets the server know
#	that clients within that network are defined dynamically.
#
#	When the server receives a packet from an unknown IP address
#	within that network, it tries to find a dynamic definition
#	for that client.  If the definition is found, the IP address
#	(and other configuration) is added to the server's internal
#	cache of "known clients", with a configurable lifetime.
#
#	Further packets from that IP address result in the client
#	definition being found in the cache.  Once the lifetime is
#	reached, the client definition is deleted, and any new requests
#	from that client are looked up as above.
#
#	If the dynamic definition is not found, then the request is
#	treated as if it came from an unknown client, i.e. it is
#	silently discarded.
#
#	The server has a negative cache for denied dynamic clients.
#	Once a client is denied, it is added to the negative cache,
#	and all packets from that source IP are rejected for 30s.
#
#	$Id$
#
######################################################################

#
#  This virtual server is an EXAMPLE, and should not be enabled as-is.
#
#  To enable dynamic clients in an existing virtual server, copy
#  the "dynamic_clients" sub-section of the "udp" listener from
#  the below example. Then copy the "new client", "add client",
#  and "deny client" sub-sections into the virtual server.
#
#  When clients are added to a listener, they exist ONLY for that
#  listener.  Dynamic clients can process packets ONLY through the
#  virtual server in which they are defined.  Unlike v3, you CANNOT
#  define a global client, and point it to a different virtual server,
#
server dynamic_clients {
	#
	#  See the "default" virtual server for examples of how to
	#  configure a "listen" section.  Only the "dynamic_clients"
	#  changes are documented here.
	#
	listen {
		type = Access-Request

		transport = udp

		udp {
			ipaddr = *
			port = 2812
			cleanup_delay = 5

			#
			#  All of the dynamic client configuration
			#  is located in the "dynamic_clients"
			#  subsection.
			#
			dynamic_clients {
				#
				#  Packets will be accepted ONLY from
				#  these networks.  You can list as many
				#  'network' items as you need.
				#
				network = 192.0.2.0/24
				network = 127.0.0.0/8

				#
				#  The following configuration items
				#  help protect the server from DoS
				#  attacks.  If the list of networks
				#  above include the open Internet,
				#  then these limits should be set as
				#  low as possible.
				#
				#  If the list of networks above is
				#  limited to secure and local
				#  networks, then these limits can be
				#  set higher.
				#

				#
				#  The maximum number of dynamic
				#  clients which will be allocated.
				#  This should be set to the smallest
				#  number possible.
				#
				max_clients = 65536

				#
				#  The server can process multiple
				#  "new client" requests at the same
				#  time.  For security and DoS issues,
				#  this should be limited to a small
				#  value.
				#
				max_pending_clients = 256

				#
				#  While the server is trying to
				#  define a new client, it may receive
				#  more than one packet from that
				#  client.  These packets are placed
				#  onto a "pending" queue until the
				#  client is defined (or not).
				#
				#  If the client is defined, the
				#  packets are processed as normal.
				#
				#  If the client is not defined, the
				#  packets are discarded.
				#
				#  This configuration item allows
				#  administrators to protect the
				#  server against DoS attacks, by
				#  limiting the number of pending
				#  packets.
				#
				max_pending_packets = 4096

				#
				#  Lifetime of the dynamic client.
				#  Allowed values are 600..86400.
				#
				#  When a client expires, it is NOT
				#  deleted immediately.  Instead, the
				#  server waits until all outstanding
				#  packets have been processed before
				#  deleting the client.
				#
				#  If there is a steady stream of
				#  packets from the dynamic client,
				#  Then the client is *renewed* every
				#  'lifetime' seconds.
				#
				#  What this means is that the old
				#  packets are still processed, and
				#  replies are sent.  But new packets
				#  are placed onto a "pending" queue.
				#
				#  If the client is defined the same
				#  as previously, then the lifetime is
				#  extended, and the pending packets
				#  are processed.
				#
				#  If the client is not renewed, then
				#  the pending packets are discarded.
				#
				#  Allowed values: 30..86400
				#
				#  The special value of "0" means that
				#  the client lives forever.
				#
				lifetime = 3600
			}
		}
	}

	#
	#  When a request is received from an unknown client, it
	#  is initially passed through this 'new client' section
	#  to determine whether to add the client or not.
	#
	#  If the client is added, the request is then sent "for real"
	#  through the normal virtual server sections, as usual.
	#
	new client {
		#
		#  Put any modules you want here.  SQL, LDAP, "exec",
		#  Perl, etc.  The only requirements is that the
		#  attributes to define a new client MUST go into the
		#  control list.
		#
		#  The packet received here is a complete, normal,
		#  RADIUS packet.  All attributes are decoded and
		#  available.  However, all attributes that depend on
		#  the shared secret (e.g. User-Password, etc.) are
		#  blank.
		#

		#
		#  Example 1: Hard-code a client IP.  This example is
		#             useless, but it documents the attributes
		#             you need.
		#
		update control {

			#  Copy the IP address of the client from
			#  the request just received
			&FreeRADIUS-Client-IP-Address = "%{Packet-Src-IP-Address}"

			#  require_message_authenticator
			&FreeRADIUS-Client-Require-MA = no

			#  secret
			&FreeRADIUS-Client-Secret = "testing123"

			#  shortname
			&FreeRADIUS-Client-Shortname = "%{Packet-Src-IP-Address}"

			#  nas_type
			&FreeRADIUS-Client-NAS-Type = "other"

			#  virtual_server
			#
			#  This can ONLY be used if the network client
			#  definition (e.g. "client dynamic" above) has
			#  NO virtual_server defined.
			#
			#  If the network client definition does have a
			#  virtual_server defined, then that is used,
			#  and there is no need to define this attribute.
			#
			#&FreeRADIUS-Client-Virtual-Server = "something"

		}

		#
		#  Example 3: Look the clients up in SQL.
		#
		#  This requires the SQL module to be configured, of course.
		#
		#   @todo - use the new 'map' function to map the 'nastable' to the attributes
		#
		if ("%{sql: SELECT nasname FROM nas WHERE nasname = '%{Packet-Src-IP-Address}'}") {
			update control {
				#
				#  Echo the IP.
				&FreeRADIUS-Client-IP-Address = "%{Packet-Src-IP-Address}"

				#
				#  Do multiple SELECT statements to grab
				#  the various definitions.
				&FreeRADIUS-Client-Shortname = "%{sql: SELECT shortname FROM nas WHERE nasname = '%{Packet-Src-IP-Address}'}"

				&FreeRADIUS-Client-Secret = "%{sql: SELECT secret FROM nas WHERE nasname = '%{Packet-Src-IP-Address}'}"

				&FreeRADIUS-Client-NAS-Type = "%{sql: SELECT type FROM nas WHERE nasname = '%{Packet-Src-IP-Address}'}"

				&FreeRADIUS-Client-Virtual-Server = "%{sql: SELECT server FROM nas WHERE nasname = '%{Packet-Src-IP-Address}'}"
			}

		}

		
		#
		#  Example 3: Look the clients up in LDAP
		#
		#  @todo - use the new 'map' function to map the
		#         'nastable' to the attributes
		#
		#  Do an LDAP lookup in the elements OU, check to
		#  see if the Packet-Src-IP-Address object has an
		#  "ou" attribute, if it does continue.  Change
		#  "ACME.COM" to the real OU of your organization.
		#
		#  Assuming the following schema:
		#
		#    OU=Elements,OU=Radius,DC=ACME,DC=COM
		#
		#  Elements will hold a record of every NAS in your
		#  Network.  Create Group objects based on the IP
		#  Address of the NAS and set the "Location" or "l"
		#  attribute to the NAS Huntgroup the NAS belongs to
		#  allow them to be centrally managed in LDAP.
		#
		#  e.g. CN=10.1.2.3,OU=Elements,OU=Radius,DC=ACME,DC=COM
		#
		#  With a "l" value of "CiscoRTR" for a Cisco Router
		#  that has a NAS-IP-Address or Source-IP-Address of
		#  10.1.2.3.
		#
		#  And with a "ou" value of the shared secret password
		#  for the NAS element, i.e. "password".
		#
		if ("%{ldap:ldap:///OU=Elements,OU=Radius,DC=ACME,DC=COM?ou?sub?cn=%{Packet-Src-IP-Address}}") {
			update control {
				&FreeRADIUS-Client-IP-Address = "%{Packet-Src-IP-Address}"

				# Set the Client-Shortname to be the Location
				# "l" just like in the Huntgroups, but this
				# time to the shortname.

				&FreeRADIUS-Client-Shortname = "%{ldap:ldap:///OU=Elements,OU=Radius,DC=ACME,DC=COM?l?sub?cn=%{Packet-Src-IP-Address}}"

				# Lookup and set the Shared Secret based on
				# the "ou" attribute.
				&FreeRADIUS-Client-Secret = "%{ldap:ldap:///OU=Elements,OU=Radius,DC=ACME,DC=COM?ou?sub?cn=%{Packet-Src-IP-Address}}"
			}
		}

		#
		#  Tell the caller that the client was defined properly.
		#
		#  If the 'new client' section does NOT return "ok", then
		#  the new client is ignored.
		#
		ok
	}


	#
	#  This subsection is called if the client was added.
	#
	#  If this section is empty, you can just delete it entirely.
	#
	add client {
		ok
	}

	#
	#  This subsection is called if the client was NOT added.
	#
	#  If this section is empty, you can just delete it entirely.
	#
	deny client {
		ok
	}

	#
	#  Reject all packets sent to this dummy virtual server.
	#
	#  This virtual server is just an example for dynamic
	#  clients, and should not be used for authentication or
	#  accounting. Copy the above sections to the real virtual
	#  server being used instead.
	#
	recv Access-Request {
		reject
	}
}
