#
#  This module decrypts and validates Yubikey static and dynamic
#  OTP tokens.
#
yubikey {
	#
	#  The length (number of ASCII bytes) of the Public-ID portion
	#  of the OTP string.
	#
	#  Yubikey defaults to a 6 byte ID (2 * 6 = 12)
#	id_length = 12

	#
	#  If true, the authorize method of rlm_yubikey will attempt to split the
	#  value of User-Password, into the user's password, and the OTP token.
	#
	#  If enabled and successful, the value of User-Password will be truncated
	#  and request:Yubikey-OTP will be added.
	#
#	split = yes

	#
	#  Decrypt mode - Tokens will be decrypted and processed locally
	#
	#  In the authorize section, this module should be placed before the
	#  persistent storage module.
	#
	#  If the account's use of the OTP is required, then the
	#  yubikey_authorize_otpkey policy should be placed directly after the
	#  authorize section's persistent storage module.
	#
	#  The authenticate section should have the following added:
	#	 Auth-Type yubikey {
	#	#	pap
	#		yubikey
	#	#	yubikey_authenticate_id
	#	#	yubikey_authenticate_counter
	#	 }
	#
	#  If two factor authentication (password concatenated with OTP) is
	#  required, split configuration should be set to yes and the pap module
	#  should be uncommented. Each account will need a password added (either
	#  using attribute Cleartext-Password, SSHA-Password, etc.).
	#
	#  If the suggested check of the Yubikey-Private-ID for validation is
	#  required, uncomment the yubikey_authenticate_id policy. Each account
	#  will need the Yubikey-Private-ID attribute added.
	#
	#  If the suggested check of the Yubikey-Counter for replay attack is
	#  required, uncomment the yubikey_authenticate_counter policy. Each
	#  account will need the Yubikey-Counter attribute added.
	#
	#  The module itself does not provide persistent storage as this
	#  would be duplicative of functionality already in the server.
	#  See the post-auth section below.
	#
	#  Yubikey authentication requires the following control attribute
	#  retrieved from persistent storage:
	#    * Yubikey-Key     - The AES key used to decrypt the OTP data.
	#                        The value is a 16-byte binary blob.
	#
	#  These attributes are available after authorization:
	#    * Yubikey-Public-ID  - The public portion of the OTP string
	#                           The value is a id_len modhex string.
	#
	#  The Yubikey-Public-Id and/or User-Name attributes may be used to
	#  retrieve  the Yubikey-Key, Yubikey-Private-ID, etc. from persistant
	#  st rage. For the sql module, modify the main queries from:
	#	sql_user_name = "%{User-Name}"
	#  to
	#	sql_user_name = "%{Yubikey-Public-ID}"
	#  or
	#	sql_user_name = "%{%{Yubikey-Public-ID}:-%{User-Name}}"
	#
	#  If Yubikey-Public-ID is used for attribute retrieval and detection
	#  of token misappropriation is required, the yubikey_authorize_username
	#  policy should be placed directly after the authorize section's
	#  persistent storage module. Each token will need the User-Name
	#  attribute added.
	#
	#  These attributes are available after authentication (if successful):
	#    * Yubikey-Private-ID - The encrypted ID included in OTP data,
	#                           should be verified for increased security.
	#                           The value is a 6-byte binary blob.
	#    * Yubikey-Counter    - The last counter value (should be recorded).
	#                           The value is a concatenation of the 16-bit
	#                           session count & 8-bit use count which form a
	#                           24-bit monotonically strictly increasing
	#                           integer (until the invidual count ceilings
	#                           are hit)
	#    * Yubikey-Timestamp  - Token's internal clock (mainly useful for debugging).
	#                           The value is a 24-bit increasing integer @ 8 Hz
	#                           with rollover which is randomly initialized
	#                           each session.
	#    * Yubikey-Random     - Randomly generated value from the token.
	#                           The value is a 16-bit integer.
	#
	#  If storage of the updated attributes in a SQL database is required,
	#  the post-auth section should have the yubikey policy placed near the
	#  oher persistent storage modules. The yubisql configuration at the end
	#  of this file will also need to be uncommented appropriately and the
	#  dialect set.
	#
	decrypt = no

	#
	#  Validation mode - Tokens will be validated against a Yubicloud server
	#
	validate = no

	#
	#  Settings for validation mode.
	#
	validation {
		#
		#  URL of validation server, multiple URL config items may be used
		#  to list multiple servers.
		#
		# - %d is a placeholder for public ID of the token
		# - %s is a placeholder for the token string itself
		#
		#  If no URLs are listed, will default to the default URLs in the
		#  ykclient library, which point to the yubico validation servers.
		servers {
#			uri = 'http://api.yubico.com/wsapi/2.0/verify?id=%d&otp=%s'
#			uri = 'http://api2.yubico.com/wsapi/2.0/verify?id=%d&otp=%s'
		}

		#
		#  API Client ID
		#
		#  Must be set to your client id for the validation server.
		#
#		client_id = 00000

		#
		#  API Secret key (Base64 encoded)
		#
		#  Must be set to your API key for the validation server.
		#
#		api_key = '000000000000000000000000'

		#
		#  Connection pool parameters
		#
		pool {
			# Number of connections to start
			start = ${thread[pool].start_servers}

			# Minimum number of connections to keep open
			min = ${thread[pool].min_spare_servers}

			# Maximum number of connections
			#
			# If these connections are all in use and a new one
			# is requested, the request will NOT get a connection.
			#
			# NOTE: This should be greater than or equal to "min" above.
			max = ${thread[pool].max_servers}

			# Spare connections to be left idle
			#
			# NOTE: Idle connections WILL be closed if "idle_timeout"
			# is set.  This should be less than or equal to "max" above.
			spare = ${thread[pool].max_spare_servers}

			# Number of uses before the connection is closed
			#
			# NOTE: A setting of 0 means infinite (no limit).
			uses = 0

			# The lifetime (in seconds) of the connection
			#
			# NOTE: A setting of 0 means infinite (no limit).
			lifetime = 0

			# The idle timeout (in seconds).  A connection which is
			# unused for this length of time will be closed.
			#
			# NOTE: A setting of 0 means infinite (no timeout).
			idle_timeout = 60

			# NOTE: All configuration settings are enforced.  If a
			# connection is closed because of "idle_timeout",
			# "uses", or "lifetime", then the total number of
			# connections MAY fall below "min".  When that
			# happens, it will open a new connection.  It will
			# also log a WARNING message.
			#
			# The solution is to either lower the "min" connections,
			# or increase lifetime/idle_timeout.

			# Enable LRU (Least Recently Used)
			#
			# The yubico library uses curl multihandles. If the
			# multihandle is reused before all requests are completed
			# the connections are re-established.
			#
			# The cost of re-establishing the connections is greater
			# than the benefit of maintaining a small pool of
			# connections or optimising for link latency.
			spread = yes
		}
	}
}

#sql yubisql {
#	#
#	#  Settings if sql persistent storage is required.
#	#
#
#	# These must match sql module configuration.
#	dialect = "sqlite"
#	authcheck_table = "radcheck"
#
#	sql_user_name = "%{User-Name}"
#	sql_user_name = "%{Yubikey-Public-ID}"
#	sql_user_name = "%{%{Yubikey-Public-ID}:-%{User-Name}}"
#
#	sqlite {
#		filename = "/var/lib/radiusd/freeradius.db"
#	}
#
#	driver = "rlm_sql_${dialect}"
#	$INCLUDE ${modconfdir}/${.:name}/yubikey/${dialect}/queries.conf
#}
