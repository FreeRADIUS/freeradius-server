# -*- text -*-
#
# :toc:
#
# # Client Definitions
#
#	$Id$

#######################################################################
#
#  The `clients.conf file defines global clients.  These clients are
#  systems which are permitted to send packets to the server.  For
#  security, packets from other IP addresses are ignored.
#
# ## Client subsection
#
#  A client is defined via a section called `client NAME { ... }`.
#  The NAME field is mandatory, and is used as the "short name" of the
#  client.
#
#  The default configuration allows packets from 127.0.0.1, and no
#  other IP address.  This configuration is to allow testing of the
#  server after an initial installation.  If you are not going to be
#  permitting RADIUS queries from localhost, we suggest that you
#  delete, or comment out, the 'localhost' entry.
#
client localhost {
	# ipaddr:: define the unique IP address (or network) for this client.
	#
	#  NOTE: Only *one* of ipaddr, ipv4addr, ipv6addr may be
	#  specified for a client.
	#
	#  `ipaddr` will accept IPv4 or IPv6 addresses with optional CIDR
	#  notation `/<mask>` to specify ranges.  e.g. `192.168/16`.
	#
	#  `ipaddr` will also accept domain names e.g. `example.org`,
	#  and will resolve the name via DNS.
	#
	#  If both A and AAAA records are found, A records will be
	#  used in preference to AAAA.
	ipaddr = 127.0.0.1

	#  ipv4addr:: Similar to `ipaddr`, but uses v4 addresses
	#  only. Looks up A record for domain names.
	#
	#  * `*` is "any" address.
	#  * `127.0.0.1` is localhost.
	#
#	ipv4addr = *

	#  ipv6addr:: Similar to `ipaddr` but uses v6 addresses
	#  only. Looks up AAAA record for domain names.
	#
	#  * `::` is "any" address.
	#  * `::1` is localhost.
	#
#	ipv6addr = ::

	#
	#  NOTE: We STRONGLY recommend using IP addresses instead of
	#  host names.  Using host names means that the server will do
	#  DNS lookups when it starts, making it dependent on DNS.
	#  i.e. If anything goes wrong with DNS, the server won't
	#  start!
	#
	#  The server also looks up the IP address from DNS once, and
	#  only once, when it starts.  If the DNS record is later
	#  updated, the server WILL NOT see that update.
	#

	#
	#  proto:: The transport protocol used by this client.
	#
	#  If unspecified, defaults to "udp", which is the traditional
	#  RADIUS transport.  It may also be "tcp", in which case the
	#  server will accept connections from this client ONLY over TCP.
	#
	proto = *

	#
	#  secret:: The shared secret use to "encrypt" and "sign"
	#  packets between the NAS and FreeRADIUS.  You MUST change
	#  this secret from the default, otherwise it's not a secret
	#  any more!
	#
	#  The secret can be any string, up to 8k characters in length.
	#
	#  Control codes can be entered vi octal encoding,
	#	e.g. `\101\102` is the same as `AB`
	#  Quotation marks can be entered by escaping them,
	#	e.g. `foo\"bar`
	#
	#  IMPORTANT:  The security of the RADIUS protocol
	#  depends COMPLETELY on this secret!  We recommend using a
	#  shared secret that is composed of:
	#
	#	upper case letters
	#	lower case letters
	#	numbers
	#
	#  And is at LEAST 8 characters long, preferably 16 characters in
	#  length.  The secret MUST be random, and should not be words,
	#  phrase, or anything else that is recognisable.
	#
	#  The default secret below is only for testing, and should
	#  not be used in any real environment.
	#
	secret = testing123

	#
	#  require_message_authenticator:: Control whether or not all
	#  Access-Request packets have a Message-Authenticator
	#  attribute.
	#
	#  Old-style clients do not send a Message-Authenticator
	#  in an Access-Request.  RFC 5080 suggests that all clients
	#  SHOULD include it in an Access-Request.  The configuration
	#  item below allows the server to require it.  If a client
	#  is required to include a Message-Authenticator and it does
	#  not, then the packet will be silently discarded.
	#
	#  allowed values: yes, no
	require_message_authenticator = no

	#
	#  short_name:: An shorter alias for the "long" name.
	#
	#  The short name is used as an alias for the fully qualified
	#  domain name, or the IP address.
	#
	#  By default, `shortname` is set to the name of the subsection.
	#  e.g. if we have `client localhost { ...}`, then `shortname`
	#  is set to `localhost`.
	#
#	shortname = localhost

	#
	#  the following three fields are optional, but may be used by
	#  checkrad.pl for simultaneous use checks
	#

	#
	#  ## Connection Limiting
	#
	#  Connection limiting for is clients which use `proto = tcp`.
	#
	#  The `limit` section is ignored for clients which use UDP
	#  transport.
	#
	limit {
		#
		#  Limit the number of simultaneous TCP connections from a client
		#
		#  The default is 16.
		#  Setting this to 0 means "no limit"
		max_connections = 16

		#  The per-socket "max_requests" option does not exist.

		#
		#  The lifetime, in seconds, of a TCP connection.  After
		#  this lifetime, the connection will be closed.
		#
		#  Setting this to 0 means "forever".
		lifetime = 0

		#
		#  The idle timeout, in seconds, of a TCP connection.
		#  If no packets have been received over the connection for
		#  this time, the connection will be closed.
		#
		#  Setting this to 0 means "no timeout".
		#
		#  We STRONGLY RECOMMEND that you set an idle timeout.
		#
		idle_timeout = 30
	}
}

# An IPv6 Client for `localhost`.
client localhost_ipv6 {
	ipv6addr	= ::1
	secret		= testing123
}

# All IPv6 Site-local clients
#
#client sitelocal_ipv6 {
#	ipv6addr	= fe80::/16
#	secret		= testing123
#}
#

#
#client example.org {
#	ipaddr		= radius.example.org
#	secret		= testing123
#}

#
#  You can now specify one secret for a network of clients.
#  When a client request comes in, the BEST match is chosen.
#  i.e. The entry from the smallest possible network.
#
#client private-network-1 {
#	ipaddr		= 192.0.2.0/24
#	secret		= testing123-1
#}

#client private-network-2 {
#	ipaddr		= 198.51.100.0/24
#	secret		= testing123-2
#}
