#  -*- text -*-
#
#  test configuration file.  Do not install.
#
#  $Id$
#

#
#  Minimal radiusd.conf for testing
#

testdir      = $ENV{TESTDIR}
output       = $ENV{OUTPUT}
run_dir      = ${output}
raddb        = raddb
pidfile      = ${run_dir}/radiusd.pid
panic_action = "gdb -batch -x src/tests/panic.gdb %e %p > ${run_dir}/gdb.log 2>&1; cat ${run_dir}/gdb.log"

maindir      = ${raddb}
radacctdir   = ${run_dir}/radacct
modconfdir   = ${maindir}/mods-config
certdir      = ${maindir}/certs
cadir        = ${maindir}/certs
test_port    = $ENV{TEST_PORT}

#  Only for testing!
#  Setting this on a production system is a BAD IDEA.
security {
	allow_vulnerable_openssl = yes
}

policy {
	files.authorize {
		if (&User-Name == "bob") {
			&control.Password.Cleartext := "bob"
		}
	}
	$INCLUDE ${maindir}/policy.d/
}

client localhost {
	ipaddr = 127.0.0.1
	secret = testing123
}

modules {
	always reject {
		rcode = reject
	}
	always fail {
		rcode = fail
	}
	always ok {
		rcode = ok
	}
	always handled {
		rcode = handled
	}
	always invalid {
		rcode = invalid
	}
	always disallow {
		rcode = disallow
	}
	always notfound {
		rcode = notfound
	}
	always noop {
		rcode = noop
	}
	always updated {
		rcode = updated
	}

	totp totp_6digit {
		time_step = 30
		otp_length = 6
		lookback_steps = 1
		lookback_interval = 30
	}

	totp totp_8digit {
		time_step = 30
		otp_length = 8
		lookback_steps = 1
		lookback_interval = 30
	}
}

#
#  This virtual server is chosen for processing requests when using:
#
#	radiusd -Xd src/tests/ -i 127.0.0.1 -p 12340 -n test
#
server test {
	namespace = radius

	listen {
		type = Access-Request
		type = Accounting-Request
		transport = udp

		udp {
			ipaddr = 127.0.0.1
			port = ${test_port}
		}
	}

	recv Access-Request {
		# Key...
		&control.TOTP.key = "$ENV{TOTP_KEY}"
#		&control.TOTP.Secret = $ENV{TOTP_KEY}

		# Then, let's get the token
		if (&request.User-Name =~ /^([a-zA-Z0-9]+)\+([0-9]+)$/) {
			&request.User-Name := %{1}
			&request.TOTP.From-User := %{2}

			if (%(length:%{request.TOTP.From-User}) == 6) {
				totp_6digit
			} elsif (%(length:%{request.TOTP.From-User}) == 8) {
				totp_8digit
			} else {
				&reply.Reply-Message := "FAILED! Token has incorrect length. Expected 6 or 8"
				reject
			}

			if (ok) {
				&reply.Reply-Message := "TOTP@%{request.TOTP.From-User} OK"
				accept
			} else {
				&reply.Reply-Message := "TOTP@%{request.TOTP.From-User} FAILED"
				reject
			}
		} else {
			&reply.Reply-Message := "FAILED! Excepted format: username+token"
			reject
		}
	}

	authenticate totp_6digit {
		totp_6digit
	}

	authenticate totp_8digit {
		totp_8digit
	}
}
