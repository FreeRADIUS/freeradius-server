#  -*- text -*-
#
#  test configuration file.  Do not install/
#
#  $id: $
#

#
#  Minimal radiusd.conf for testing
#

testdir      = $ENV{TESTDIR}
output       = $ENV{OUTPUT}
run_dir      = ${output}
raddb        = raddb
pidfile      = ${run_dir}/radiusd.pid
panic_action = "gdb -batch -x src/tests/panic.gdb %e %p > ${run_dir}/gdb.log 2>&1; cat ${run_dir}/gdb.log"

maindir      = ${raddb}
radacctdir   = ${run_dir}/radacct
modconfdir   = ${maindir}/mods-config
certdir      = ${maindir}/certs
cadir        = ${maindir}/certs
test_port    = $ENV{TEST_PORT}

#  Only for testing!
#  Setting this on a production system is a BAD IDEA.
security {
	allow_vulnerable_openssl = yes
	allow_core_dumps = yes
}

global {
	ldap {
		ldap_debug = 0x0801
	}
}

#  Dummy global trigger section to enable triggers
trigger {
}

policy {
	$INCLUDE ${maindir}/policy.d/
}

client localhost {
	ipaddr = 127.0.0.1
	secret = testing123
}

modules {

	linelog {
		format = "%{Packet-Type} %{LDAP-Sync.DN} %{LDAP-Sync.Entry-DN} %{Proto.radius.User-Name} %{SMB-Account-CTRL} %{User-Category}"
		destination = file

		file {
			filename = "${run_dir}/%{Packet-Type}%{Proto.radius.User-Name}.out"
		}
	}

	always reject {
		rcode = reject
	}
	always fail {
		rcode = fail
	}
	always ok {
		rcode = ok
	}
	always handled {
		rcode = handled
	}
	always invalid {
		rcode = invalid
	}
	always disallow {
		rcode = disallow
	}
	always notfound {
		rcode = notfound
	}
	always noop {
		rcode = noop
	}
	always updated {
		rcode = updated
	}

}

#
#  This virtual server connects to an LDAP server and listens
#  for packets received as the result of directory changes.
#
server test {
	namespace = ldap_sync

	listen {
		transport = ldap

		ldap {
			server = $ENV{ACTIVE_DIRECTORY_TEST_SERVER}
			identity = 'administrator@example.com'
			password = 'secret123!'

			options {
				res_timeout = 120
				srv_timelimit = 60
				idle = 60
				probes = 3
				interval = 3
				reconnection_delay = 10
			}
		}

		sync {
			base_dn = "CN=Users,dc=example,dc=com"
			filter = "(userAccountControl:1.2.840.113556.1.4.803:=512)"
			scope = 'sub'

			update {
				Proto.radius.User-Name = 'sAMAccountName'
				SMB-Account-CTRL = 'userAccountControl'
			}

			trigger {
				start = %file.touch("${run_dir}/sync_started")
			}
		}

		sync {
			base_dn = "CN=Deleted Objects,dc=example,dc=com"
			filter = "(userAccountControl:1.2.840.113556.1.4.803:=512)"
			sub = "one"

			update {
				Proto.radius.User-Name = 'sAMAccountName'
				SMB-Account-CTRL = 'userAccountControl'
				User-Category = 'isDeleted'
			}
		}
	}

	load Cookie {
	}

	store Cookie {
	}

	recv Add {
		linelog
	}

	recv Modify {
		linelog
	}

	recv Delete {
		#
		#  The DN changes for each deleted object - normalise the variable bit
		#  so we can check the output
		#
		if (&LDAP-Sync.Entry-DN =~ /(CN=.+:)[a-f0-9-]+(,CN=Deleted Objects,DC=example,DC=com)/) {
			request.LDAP-Sync.Entry-DN := "%regex.match(1)oldid%regex.match(2)"
		}
		linelog
	}

	recv Present {
	}

}
