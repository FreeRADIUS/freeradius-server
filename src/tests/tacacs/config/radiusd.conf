#  -*- text -*-
#
#  test configuration file.  Do not install.
#
#  $Id$
#

#
#  Minimal radiusd.conf for tacacs server
#

testdir      = $ENV{TESTDIR}
output       = $ENV{OUTPUT}
run_dir      = ${output}
raddb        = raddb
pidfile      = ${run_dir}/radiusd.pid
panic_action = "gdb -batch -x src/tests/panic.gdb %e %p > ${run_dir}/gdb.log 2>&1; cat ${run_dir}/gdb.log"

maindir      = ${raddb}
radacctdir   = ${run_dir}/radacct
modconfdir   = ${maindir}/mods-config
certdir      = ${maindir}/certs
cadir        = ${maindir}/certs
test_port    = $ENV{TEST_PORT}

#  Only for testing!
#  Setting this on a production system is a BAD IDEA.
security {
	allow_vulnerable_openssl = yes
}

policy {
	files.authorize {
		if (&User-Name == "bob") {
			update control {
				&Password.Cleartext := "bob"
			}
		}
	}
	$INCLUDE ${maindir}/policy.d/
}

client localhost {
	ipaddr = 127.0.0.1
	secret = testing123
	proto = tcp
}

modules {
	$INCLUDE ${maindir}/mods-available/pap
	$INCLUDE ${maindir}/mods-available/chap

	detail {
		filename = ${radacctdir}/%{%{Packet-Src-IP-Address}:-%{Packet-Src-IPv6-Address}}/detail-%Y%m%d
		escape_filenames = no
		permissions = 0600
		header = "%t"
	}

	always reject {
		rcode = reject
	}
	always fail {
		rcode = fail
	}
	always ok {
		rcode = ok
	}
	always handled {
		rcode = handled
	}
	always invalid {
		rcode = invalid
	}
	always disallow {
		rcode = disallow
	}
	always notfound {
		rcode = notfound
	}
	always noop {
		rcode = noop
	}
	always updated {
		rcode = updated
	}
}

#
#  This virtual server is chosen for processing requests when using:
#
#	radiusd -Xd src/tests/output -i 127.0.0.1 -p 12340 -n test
#
server test {
	namespace = tacacs

	listen {
		type = Authentication-Start
		type = Authentication-Continue
		type = Authorization-Request
		type = Accounting-Request

		transport = tcp

		tcp {
			port = ${test_port}
			ipaddr = *
#			interface = eth0
#			max_packet_size = 4096
#			recv_buff = 1048576
#			send_buff = 1048576
#			src_ipaddr = ""
		}
	}

 	recv Authentication-Start {
 		if (&User-Name == "tapioca") {
 			update reply {
				&Authentication-Status := Pass
				&Server-Message := "Authentication-Start accepted"
			}
			ok

 		} else {
 			update reply {
				&Authentication-Status := Fail
				&Server-Message := "Authentication-Start failed for %{User-Name}"
			}
 		}
	}

	send Authentication-Start-Reply {
		update reply {
			&Data := "Authentication-Data"
		}
	}

	recv Authentication-Continue {
 		if (&User-Name == "tapioca") {
 			update reply {
				&Authentication-Status := Pass
				&Server-Message := "Authentication-Cont accepted"
			}
			ok

 		} else {
 			update reply {
				&Authentication-Status := Fail
				&Server-Message := "Authentication-Cont failed for %{User-Name}"
			}
 		}
	}

	send Authentication-Continue-Reply {
		update reply {
			&Data := "Authentication-Data"
		}
	}

	recv Authorization-Request {
 		if (&User-Name == "tapioca") {
 			update reply {
				&Authorization-Status := Pass-Add
				&Server-Message := "Authorization-Request accepted"
			}
			ok

 		} else {
 			update reply {
				&Authorization-Status := Error
				&Server-Message := "Authorization-Request failed for %{User-Name}"
			}
 		}
	}

	send Authorization-Response {
		update reply {
			&Data := "Authorization-Data"
		}
	}

	recv Accounting-Request {
		#
		#  Create a 'detail'ed log of the packets.
		#
		detail
	}

	#	First packet for a session
	accounting Start {
		update reply {
			&Server-Message := "Accounting-Start Section"
		}
	}

	#	Updates a session
	accounting Watchdog {
		update reply {
			&Server-Message := "Accounting-Watchdog Section"
		}
	}

	#	Stops a session
	accounting Stop {
		update reply {
			&Server-Message := "Accounting-Stop Section"
		}
	}

	send Accounting-Reply {
		update reply {
			&Accounting-Status := Success
			&Data := 0x12
		}
	}
}
