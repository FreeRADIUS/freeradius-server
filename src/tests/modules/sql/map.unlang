# Clear out any rows with priority 0 (each test should use a different
# priority, so they don't interfere with each other).
string sqlcmd
string userfield
string groupfield

%sql("DELETE FROM radusergroup WHERE priority <= 1")

# Module should return NOOP if there's no result set to work with
map sql 'SELECT * FROM radusergroup WHERE priority <= 1' {
	&control.User-Name	:= 'username'
	&control.Filter-Id	:= 'groupname'
	&control.NAS-Port	:= 'priority'
}
if (!notfound) {
	test_fail
}

if (&control.User-Name) {
	test_fail
}

if (&control.Filter-Id) {
	test_fail
}

if (&control.NAS-Port) {
	test_fail
}

# Insert our first test row
%sql("INSERT INTO radusergroup (username, groupname, priority) VALUES ('bob', 'bar', 0)")

# Retrieve our test row
map sql 'SELECT * FROM radusergroup WHERE priority = 0' {
	&control.User-Name	:= 'username'
	&control.Filter-Id	:= 'groupname'
	&control.NAS-Port	:= 'priority'
}
if (!updated) {
	test_fail
}

if !(&control.User-Name == 'bob') {
	test_fail
}

if !(&control.Filter-Id == 'bar') {
	test_fail
}

if !(&control.NAS-Port == 0) {
	test_fail
}

# Clear the control list
&control -= &User-Name[*]
&control -= &Filter-Id[*]
&control -= &NAS-Port[*]

# Insert our second test row
%sql("INSERT INTO radusergroup (username, groupname, priority) VALUES ('oof', 'rab', 1)")

# Retrieve our test row(s) - With := we should get the values from the second row
map sql 'SELECT * FROM radusergroup WHERE priority <= 1 ORDER BY priority' {
	&control.User-Name	:= 'username'
	&control.Filter-Id	:= 'groupname'
	&control.NAS-Port	:= 'priority'
}

if (!updated) {
	test_fail
}

if !(&control.User-Name == 'oof') {
	test_fail
}

if !(&control.Filter-Id == 'rab') {
	test_fail
}

if !(&control.NAS-Port == 1) {
	test_fail
}

# Clear the control list
&control -= &User-Name[*]
&control -= &Filter-Id[*]
&control -= &NAS-Port[*]

# Retrieve our test row(s) - With = we should get the values from the first row
map sql 'SELECT * FROM radusergroup WHERE priority <= 1 ORDER BY priority' {
	&control.User-Name	= 'username'
	&control.Filter-Id	= 'groupname'
	&control.NAS-Port	= 'priority'
}

if (!updated) {
	test_fail
}

if !(&control.User-Name == 'bob') {
	test_fail
}

if !(&control.Filter-Id == 'bar') {
	test_fail
}

if !(&control.NAS-Port == 0) {
	test_fail
}

# Clear the control list
&control -= &User-Name[*]
&control -= &Filter-Id[*]
&control -= &NAS-Port[*]

# Retrieve our test row(s) - With ^= we should get the values from the second row then the first
map sql 'SELECT * FROM radusergroup WHERE priority <= 1 ORDER BY priority' {
	&control.User-Name	^= 'username'
	&control.Filter-Id	^= 'groupname'
	&control.NAS-Port	^= 'priority'
}

if (!updated) {
	test_fail
}

debug_control

if ((&control.User-Name[0] != 'oof') || (&control.User-Name[1] != 'bob')) {
	test_fail
}

if ((&control.Filter-Id[0] != 'rab') || (&control.Filter-Id[1] != 'bar')) {
	test_fail
}

if ((&control.NAS-Port[0] != 1) || (&control.NAS-Port[1] != 0)) {
	test_fail
}

# Clear the control list
&control -= &User-Name[*]
&control -= &Filter-Id[*]
&control -= &NAS-Port[*]

# Retrieve our test row(s) - With += we should get the values from both rows
map sql 'SELECT * FROM radusergroup WHERE priority <= 1 ORDER BY priority' {
	&control.User-Name	+= 'username'
	&control.Filter-Id	+= 'groupname'
	&control.NAS-Port	+= 'priority'
}

if !("%{control.User-Name[#]}" == 2) {
	test_fail
}

if !("%{control.Filter-Id[#]}" == 2) {
	test_fail
}

if !("%{control.NAS-Port[#]}" == 2) {
	test_fail
}

if ((&control.User-Name[0] == 'bob') && (&control.User-Name[1] == 'oof')) {
	test_pass
}
else {
	test_fail
}

if ((&control.Filter-Id[0] == 'bar') && (&control.Filter-Id[1] == 'rab')) {
	test_pass
}
else {
	test_fail
}

if ((&control.NAS-Port[0] == 0) && (&control.NAS-Port[1] == 1)) {
	test_pass
}
else {
	test_fail
}

# Clear the control list
&control -= &User-Name[*]
&control -= &Filter-Id[*]
&control -= &NAS-Port[*]

# Retrieve the username column only (should result in noop because not in map)
map sql 'SELECT username FROM radusergroup WHERE priority = 0' {
	&control.Filter-Id	+= 'groupname'
	&control.NAS-Port	+= 'priority'
}

if (!noop) {
	test_fail
}

# Retrieve test row with specific username (using xlat'd query)
map sql "SELECT * FROM radusergroup WHERE priority <= 1 AND username = '%{User-Name}'" {
	&control.User-Name	= 'username'
	&control.Filter-Id	= 'groupname'
	&control.NAS-Port	= 'priority'
}

if (!updated) {
	test_fail
}

if !(&control.User-Name == 'bob') {
	test_fail
}

if !(&control.Filter-Id == 'bar') {
	test_fail
}

if !(&control.NAS-Port == 0) {
	test_fail
}

&sqlcmd := %sql.safe("SELECT * FROM radusergroup WHERE priority <= 1 AND username = '%sql.escape(%{User-Name})'")

# Clear the control list
&control -= &User-Name[*]
&control -= &Filter-Id[*]
&control -= &NAS-Port[*]

# Retrieve test row with specific username (using ref'd query)
map sql &sqlcmd {
	&control.User-Name	= 'username'
	&control.Filter-Id	= 'groupname'
	&control.NAS-Port	= 'priority'
}

if (!updated) {
	test_fail
}

if !(&control.User-Name == 'bob') {
	test_fail
}

if !(&control.Filter-Id == 'bar') {
	test_fail
}

if !(&control.NAS-Port == 0) {
	test_fail
}

# Clear the control list
&control -= &User-Name[*]
&control -= &Filter-Id[*]
&control -= &NAS-Port[*]

&userfield := 'username'
&groupfield := 'name'

# Retrieve our test row(s) - Using different RHS types
map sql 'SELECT * FROM radusergroup WHERE priority = 0' {
	&control.User-Name	= &userfield
	&control.Filter-Id	= "group%{groupfield}"
	&control.NAS-Port	= `/bin/echo priority`
}

if (!updated) {
	test_fail
}

if !(&control.User-Name == 'bob') {
	test_fail
}

if !(&control.Filter-Id == 'bar') {
	test_fail
}

if !(&control.NAS-Port == 0) {
	test_fail
}

# NAS-Identifier has un-safe SQL characters - check escaping works
map sql "SELECT attribute FROM radcheck WHERE username = '%{NAS-Identifier}'" {
	&control.Filter-Id	= 'attribute'
}

if (!notfound) {
	test_fail
}

# Clear the control list
&control -= &User-Name[*]
&control -= &Filter-Id[*]

# Check behaviour of NULL vs empty string returns.
# radacct is used here as the default schema allows NULL in many columns
%sql("DELETE FROM radacct WHERE acctuniqueid = 'nullmap'")
%sql("INSERT INTO radacct (acctuniqueid, acctsessionid, nasipaddress, username) VALUES ('nullmap', 'nullmap', '10.11.12.13', '')")
map sql "SELECT username, connectinfo_start, nasipaddress FROM radacct WHERE acctuniqueid = 'nullmap'" {
	&control.User-Name := 'username'
	&control.Filter-Id := 'connectinfo_start'
	&control.NAS-IP-Address := 'nasipaddress'
}

if !(&control.User-Name == '') {
	test_fail
}
if (&control.Filter-Id) {
	test_fail
}
if !(&control.NAS-IP-Address == 10.11.12.13) {
	test_fail
}

test_pass
