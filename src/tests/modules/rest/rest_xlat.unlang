#
# PRE rest_module eval
#
string server_host
uint32 server_port
uint32 server_ssl_port
string test_string
string result_string

&server_host := "$ENV{REST_TEST_SERVER}"
&server_port := "$ENV{REST_TEST_SERVER_PORT}"
&server_ssl_port := "$ENV{REST_TEST_SERVER_SSL_PORT}"
&test_string := 'notfound'

# Retrieve a plain text file
&result_string := %rest('GET', "http://%{server_host}:%uri.safe(%{server_port})/test.txt")

if (!(&REST-HTTP-Status-Code == 200)) {
	test_fail
}

if (!(&result_string == "Sample text response\n")) {
	test_fail
}

# Take host from incoming packet
&result_string := %rest('GET', "http://%{Login-IP-Host}:%uri.safe(%{server_port})/test.txt")

if (!(&REST-HTTP-Status-Code == 200) || !(&result_string == "Sample text response\n")) {
	test_fail
}

# Port is not allowed from incoming packets
&result_string := %rest('GET', "http://%{server_host}:%{NAS-Port}/test.txt")

if (!(&Module-Failure-Message == "Failed escaping URI: Unsafe input \"8080\" not allowed in URI part port") || &result_string) {
	test_fail
}

# Check a "not found" gives a 404 status code
&result_string := %rest('GET', "http://%{server_host}:%uri.safe(%{server_port})/%{test_string}")

if (!(&REST-HTTP-Status-Code == 404)) {
	test_fail
}

# GET with URL parameters
&test_string := %rest('GET', "http://%{server_host}:%uri.safe(%{server_port})/user/%{User-Name}/mac/%{Called-Station-Id}")

if (!(&REST-HTTP-Status-Code == 200)) {
	test_fail
}

map json &test_string {
	&control.Callback-Id := '$.control\.Callback-Id'
	&control.User-Name := '$.control\.User-Name.value'
}

if !(&control.Callback-Id == '[ "GET", "\/user\\/<username>\/mac\/<client>" ]') {
	test_fail
}

if (!(&control.User-Name == "Bob")) {
	test_fail
}

&control.User-Name := 'dummy'

# Directly use json map and prepend the returned value
map json %rest('GET', "http://%{server_host}:%uri.safe(%{server_port})/user/%{User-Name}/mac/%{Called-Station-Id}") {
	&control.User-Name ^= '$.control\.User-Name.value'
}

if (!(&control.User-Name[0] == 'Bob') || !(&control.User-Name[1] == 'dummy')) {
	test_fail
}

&test_string := %json.encode('&request.NAS-IP-Address')

# POST to https with JSON body data
&result_string := %rest('POST', "https://%{server_host}:%uri.safe(%{server_ssl_port})/user/%{User-Name}/mac/%{Called-Station-Id}?section=accounting", %{test_string})

if (!(&REST-HTTP-Status-Code == 200)) {
	test_fail
}

map json &result_string {
	&control.Callback-Id := '$.control\.Callback-Id'
	&control.User-Name := '$.control\.User-Name.value'
	&control.NAS-IP-Address := '$.control\.NAS-IP-Address.value'
}

if (!(&control.Callback-Id == '[ "POST", "\/user\/<username>\/mac\/<client>" ]')) {
	test_fail
}

if (!(&control.User-Name == "Bob")) {
	test_fail
}

if (!(&control.NAS-IP-Address == "192.168.1.1")) {
	test_fail
}

&result_string := "NAS=%{NAS-IP-Address}&user=%{User-Name}"

# POST to https with POST body data
&result_string := %rest('POST', "https://%{server_host}:%uri.safe(%{server_ssl_port})/post/test?section=dummy", %{result_string})

if (!(&REST-HTTP-Status-Code == 200)) {
	test_fail
}

if (!(&result_string == "Section: dummy, User: Bob\n")) {
	test_fail
}

# URI with tainted values in the arguments - input argument includes URI argument
# separator - make sure this doesn't end up generating extra arguments, but gets escaped.
group {
	string headers
	string arguments
	string body

	map json %rest('POST', "http://%{server_host}:%uri.safe(%{server_port})/user/%{User-Name}/reflect/?station=%{Calling-Station-Id}", "{\"test\":\"foo\"}") {
		&headers := '$.reply\.Reply-Message.value[0]'
		&arguments := '$.reply\.Reply-Message.value[1]'
		&body := '$.reply\.Reply-Message.value[2]'
	}

	&headers := (string)%base64.decode(%{headers})
	&arguments := (string)%base64.decode(%{arguments})
	&body := (string)%base64.decode(%{body})

	if (!(&arguments == "{\"station\":\"dummy&unsafe=escaped\"}" )) {
		test_fail
	}

	if (!(&headers =~ /"user-agent":"FreeRADIUS.*"/)) {
		test_fail
	}

	if (!(&headers =~ /"x-freeradius-server":"default"/)) {
		test_fail
	}

	if (!(&headers =~ /"x-custom-header":\["test","Bob"\]/)) {
		test_fail
	}

	if (!(&body == "{\"test\":\"foo\"}")) {
		test_fail
	}
}

# Zero length untainted value - check parsing doesn't break on zero length string
group {
	string headers
	string arguments

	&test_string := ""

	map json %rest('GET', "http://%{server_host}:%uri.safe(%{server_port})/user/%{User-Name}/reflect/%{test_string}?station=%{User-Name}") {
		&headers := '$.reply\.Reply-Message.value[0]'
		&arguments := '$.reply\.Reply-Message.value[1]'
	}

	&headers := (string)%base64.decode(%{headers})
	&arguments := (string)%base64.decode(%{arguments})

	if (!(&arguments == "{\"station\":\"Bob\"}" )) {
		test_fail
	}

	if (!(&headers =~ /"user-agent":"FreeRADIUS.*"/)) {
		test_fail
	}

	if (!(&headers =~ /"x-freeradius-server":"default"/)) {
		test_fail
	}

	# Some weird escaping issue prevents matching application/json
	if (!(&headers =~ /"content-type":"application.+json"/)) {
		test_fail
	}
}

# Zero length tainted value - check escaping doesn't break on zero length string
group {
	string arguments

	map json %rest('GET', "http://%{server_host}:%uri.safe(%{server_port})/user/%{User-Name}/reflect/%{NAS-Identifier}?station=%{Called-Station-Id}") {
		&arguments := '$.reply\.Reply-Message.value[1]'
	}

	&arguments := (string)%base64.decode(%{arguments})

	if (!(&arguments == "{\"station\":\"aa:bb:cc:dd:ee:ff\"}" )) {
		test_fail
	}
}

# Test against endpoint which will time out
&result_string := %restshorttimeout('GET', "http://%{server_host}:%uri.safe(%{server_port})/delay")

if (&REST-HTTP-Status-Code) {
	test_fail
}

if (!(&Module-Failure-Message == "curl request failed: Timeout was reached (28)")) {
	test_fail
}

test_pass
