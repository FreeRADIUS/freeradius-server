#
#	Evaluation tests
#
uint32 test_integer
int64 test_int64
string test_string

&Filter-Id := "{\"foo\":\"bar\"}"

# 0. Simple field access
map json &Filter-Id {
	&Callback-Id := '$.foo'
}

if !(&Callback-Id == 'bar') {
	test_fail
}

&Filter-Id := "\
{\
	\"my_array\": [0, 1, 2, 3, 4, 5], \
	\"my_object\": { \
		\"foo\": \"bar\", \
		\"num\" : 42 \
	}, \
	\"num\": 99, \
	\"double\": 5.9, \
	\"null\": null, \
	\"bool_true\": true, \
	\"bool_false\": false \
}"

&request -= &Callback-Id[*]

# Check conversion of all JSON types to strings
map json &Filter-Id {
	&Callback-Id += '$.*'
}

# 1. Array type
if !(&Callback-Id[0] == '[ 0, 1, 2, 3, 4, 5 ]') {
	test_fail
}

# 2. Object type
if !(&Callback-Id[1] == '{ "foo": "bar", "num": 42 }') {
	test_fail
}

# 3. Integer type
if !(&Callback-Id[2] == '99') {
	test_fail
}

# 4. Double type
if !(&Callback-Id[3] == '5.9') {
	test_fail
}

# 5. null type
if !(&Callback-Id[4] == 'null') {
	test_fail
}

# 6. Boolean true
if !(&Callback-Id[5] == 'yes') {
	test_fail
}

# 7. Boolean false
if (&Callback-Id[6] != 'no') {
	test_fail
}

&request -= &Callback-Id[*]

#
# Now check array slicing operates correctly
#

# 8. String form
map json &Filter-Id {
	&Callback-Id := '$.my_array'
}
if !(&Callback-Id == '[ 0, 1, 2, 3, 4, 5 ]') {
	test_fail
}

&request -= &Callback-Id[*]

# 9. Simple index
map json &Filter-Id {
	&NAS-Port := '$.my_array[0]'
}
if !(&NAS-Port == 0) {
	test_fail
}

&request -= &NAS-Port[*]

# 9a. All of the array
map json &Filter-Id {
	&NAS-Port += '$.my_array.*'
}
if (!(&NAS-Port[0] == 0) || !(&NAS-Port[1] == 1) || !(&NAS-Port[2] == 2) || !(&NAS-Port[3] == 3) || !(&NAS-Port[4] == 4) || !(&NAS-Port[5] == 5)) {
	test_fail
}

&NAS-Port := 9

# 9b. All of the array using prepend, places the array before the existing value
map json &Filter-Id {
	&NAS-Port ^= '$.my_array.*'
}
if (!(&NAS-Port[0] == 0) || !(&NAS-Port[1] == 1) || !(&NAS-Port[2] == 2) || !(&NAS-Port[3] == 3) || !(&NAS-Port[4] == 4) || !(&NAS-Port[5] == 5) || !(&NAS-Port[6] == 9)) {
	test_fail
}

&request -= &NAS-Port[*]

# 10. End of the array
map json &Filter-Id {
	&NAS-Port := '$.my_array[5]'	# Past the end of the array (should be skipped)
}
if !(&NAS-Port == 5) {
	test_fail
}

&request -= &NAS-Port[*]

# 11. Past end of the array
map json &Filter-Id {
	&NAS-Port := '$.my_array[6]'	# Past the end of the array (should be skipped)
}
if (&NAS-Port) {
	test_fail
}

&request -= &NAS-Port[*]

# 12. Simple slice
map json &Filter-Id {
	&NAS-Port += '$.my_array[0:2]'	# A single value
}
if (!(&NAS-Port[0] == 0) || !(&NAS-Port[1] == 1)) {
	test_fail
}

&request -= &NAS-Port[*]

# 13. Slice with negative start
map json &Filter-Id {
	&NAS-Port += '$.my_array[-1:6]'	# A single value (last eelement of the array)
}
if !(&NAS-Port == 5) {
	test_fail
}

&request -= &NAS-Port[*]

# 14. Slice with negative start and negative end
map json &Filter-Id {
	&NAS-Port += '$.my_array[-1:-3]'	# Start after end (should be skipped)
}
if (&NAS-Port) {
	test_fail
}

# 15. Slice with start and negative end
map json &Filter-Id {
	&NAS-Port += '$.my_array[1:-3]'
}
if (!(&NAS-Port[0] == 1) && !(&NAS-Port[1] == 2)) {
	test_fail
}

&request -= &NAS-Port[*]

# 16. Slice with start, end and negative step
map json &Filter-Id {
	&NAS-Port += '$.my_array[4:2:-1]'
}
if (!(&NAS-Port[0] == 4) || !(&NAS-Port[1] == 3)) {
	test_fail
}

&request -= &NAS-Port[*]

# 17. Slice with start, end (inverted) and negative step
map json &Filter-Id {
	&NAS-Port += '$.my_array[2:4:-1]'
}
if (&NAS-Port) {
	test_fail
}

&request -= &NAS-Port[*]

# 18. Slice with start, end and positive step
map json &Filter-Id {
	&NAS-Port += '$.my_array[2:4:1]'
}
if (!(&NAS-Port[0] == 2) || !(&NAS-Port[1] == 3)) {
	test_fail
}

&request -= &NAS-Port[*]

# 19. Slice with start, end and positive step > 1
map json &Filter-Id {
	&NAS-Port += '$.my_array[1:5:2]'
}
if (!(&NAS-Port[0] == 1) && !(&NAS-Port[1] == 3)) {
	test_fail
}

&request -= &NAS-Port[*]

# 20. Slice with start, end and positive step > end of array
map json &Filter-Id {
	&NAS-Port += '$.my_array[1:5:4]'
}
if (!(&NAS-Port[0] == 1) || &NAS-Port[1]) {
	test_fail
}

&request -= &NAS-Port[*]

# 21. Slice with start, end and positive step > end of array
map json &Filter-Id {
	&NAS-Port += '$.my_array[5:1:-4]'
}
if (!(&NAS-Port[0] == 5) || &NAS-Port[1]) {
	test_fail
}

&request -= &NAS-Port[*]

# 22. No start/end 3 step
map json &Filter-Id {
	&NAS-Port += '$.my_array[::3]'
}
if (!(&NAS-Port[0] == 0) || !(&NAS-Port[1] == 3) || &NAS-Port[2]) {
	test_fail
}

&request -= &NAS-Port[*]

# 23. No start/end 3 step
map json &Filter-Id {
	&NAS-Port += '$.my_array[::-3]'
}
if (!(&NAS-Port[0] == 5) || !(&NAS-Port[1] == 2) || &NAS-Port[2]) {
	test_fail
}

&request -= &NAS-Port[*]

# 24. No end 3 step
map json &Filter-Id {
	&NAS-Port += '$.my_array[3::-3]'
}
if (!(&NAS-Port[0] == 3) || !(&NAS-Port[1] == 0) || &NAS-Port[2]) {
	test_fail
}

&request -= &NAS-Port[*]

# 25. End 0, 3 step
map json &Filter-Id {
	&NAS-Port += '$.my_array[3:0:-3]'
}
if (!(&NAS-Port[0] == 3) || &NAS-Port[1]) {
	test_fail
}

&request -= &NAS-Port[*]

# 26. End 0, 3 step
map json &Filter-Id {
	&NAS-Port += '$.my_array[0::-3]'
}
if (!(&NAS-Port[0] == 0) || &NAS-Port[1]) {
	test_fail
}

&request -= &NAS-Port[*]

# 27. Everything two levels deep
map json &Filter-Id {
	&Callback-Id += '$.*.*'
}

if (!(&Callback-Id[0] == '0') || \
    !(&Callback-Id[1] == '1') || \
    !(&Callback-Id[2] == '2') || \
    !(&Callback-Id[3] == '3') || \
    !(&Callback-Id[4] == '4') || \
    !(&Callback-Id[5] == '5') || \
    !(&Callback-Id[6] == 'bar') || \
    !(&Callback-Id[7] == '42')) {
	test_fail
}

&request -= &Callback-Id[*]

# 28. Everything three levels deep (nothing)
map json &Filter-Id {
	&Callback-Id += '$.*.*.*'
}

if (&Callback-Id) {
	test_fail
}

# 29. Array access on a field (nothing)
map json &Filter-Id {
	&Callback-Id += '$.my_object[0]'
}

if (&Callback-Id) {
	test_fail
}

# 30. Non-existent field
map json &Filter-Id {
	&Callback-Id += '$.my_object.my_other_object'
}

if (&Callback-Id) {
	test_fail
}

# Some big numbers in nested arrays
&Filter-Id := "\
[\
	9223372036854775807, \
	-9223372036854775807, \
	18446744073709551615, \
	[ \
		2147483647, \
		-2147483647, \
		4294967295, \
	] \
]"

# 31. Unsigned 32bit integers (are supported)
# Will get smushed to INT32_MAX with json-c <= 0.10, or might wrap, it's
# version/system dependent *sigh*.
redundant {
	group {
		map json &Filter-Id {
			&NAS-Port := '$[3][2]'
		}
	}
	noop
}
if (!noop && (!(&NAS-Port == 4294967295) && !(&NAS-Port == 2147483647))) {
	test_fail
}

# 32. Unsigned 32bit integers (are supported)
map json &Filter-Id {
	&NAS-Port := '$[3][0]'
}
if !(&NAS-Port == 2147483647) {
	test_fail
}

&request -= &NAS-Port[*]

# 33. Signed 64bit integers
if (0) {
map json &Filter-Id {
	&test_int64 := '$[0]'
}
if !(&test_int64 == (int64)9223372036854775807) {
	test_fail
}

# 34. Signed 64bit integers
map json &Filter-Id {
	&test_int64 := '$[1]'
}
if !(&test_int64 == -9223372036854775807) {
	test_fail
}

&request -= &test_int64[*]

# 35. Unsigned 64bit integers (not allowed by json so gets truncated)
map json &Filter-Id {
	&Acct-Input-Octets64 := '$[2]'
}
if !(&Acct-Input-Octets64 == 9223372036854775807) {
	test_fail
}
}

&request -= &Acct-Input-Octets64[*]

# 36. Multiple array indices
map json &Filter-Id {
	&Cache-TTL += '$[3][0,1]'
}
if (!(&Cache-TTL[0] == 2147483647) || !(&Cache-TTL[1] == -2147483647)) {
	test_fail
}

&request -= &Cache-TTL[*]

# 37. Path containing dynamic expansion
&test_integer := 0

map json &Filter-Id {
	&NAS-Port += "$[3][%{test_integer}]"
}
if !(&NAS-Port == 2147483647) {
	test_fail
}
&request -= &NAS-Port[*]

# 38. An expanded field name with bad chars
&Filter-Id := "\
{\
	\"foo.bar\": \"baz\" \
}"
&test_string := "%taint('foo.bar')"

map json &Filter-Id {
	&Callback-Id := "$.%{test_string}"
}

if !(&Callback-Id == 'baz') {
	test_fail
}

&request -= &Callback-Id[*]

&Filter-Id := "\
{\
	\"my_array\": [0, 1, 2, 3, 4, 5], \
	\"my_object\": { \
		\"foo\": \"bar\", \
		\"num\" : 42, \
		\"my_deep_object\": { \
			\"foo\": \"baz\", \
			\"num\": 99, \
			\"bool\": true\
		}, \
		\"my_cats\": [\
			\"fluffy\", \
			\"scratchy\", \
			\"flat\" \
		], \
	}, \
	\"my_cats\": [\
		\"spikey\", \
		\"clawy\", \
		\"woofy\" \
	], \
}"

# 39. Recursive descent with field match
map json &Filter-Id {
	&Callback-Id += '$..bool'
}

if (!("%{Callback-Id[#]}" == 1) || !(&Callback-Id == 'yes')) {
	test_fail
}

&request -= &Callback-Id[*]

# 40. Recursive descent with element match (2nd element in each array)
map json &Filter-Id {
	&Callback-Id += '$..[1]'
}
if (!("%{Callback-Id[#]}" == 3) || !(&Callback-Id[0] == '1') || !(&Callback-Id[1] == 'scratchy') || !(&Callback-Id[2] == 'clawy')) {
	test_fail
}
&request -= &Callback-Id[*]

# 41. Recursive descent with field then element match
map json &Filter-Id {
	&Callback-Id += '$..my_cats[2]'
}
if (!("%{Callback-Id[#]}" == 2) || !(&Callback-Id[0] == 'flat') || !(&Callback-Id[1] == 'woofy')) {
	test_fail
}

&request -= &Callback-Id[*]

test_pass
