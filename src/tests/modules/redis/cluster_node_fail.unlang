#
#  Run the "redis" xlat
#
$INCLUDE cluster_reset.inc

#  Hashes to Redis cluster node master 1
if ("%{redis:SET b 'boom'}" != 'OK') {
	test_fail
}

if ("%{redis:GET b}" != 'boom') {
	test_fail
}

#  Leave some time (100ms) for the synchronisation
update request {
	&Tmp-String-0 := `/bin/sleep 0.1`
}

#  Cause one of the redis cluster nodes to SEGV
if ("%{redis:@%{redis_node:b 0} DEBUG SEGFAULT}" != '') {
	test_fail
}

#  Forcefully failover the slave for that node
if ("%{redis:@%{redis_node:b 1} CLUSTER FAILOVER TAKEOVER}" != 'OK') {
	test_fail
}

#  FR debounces remapping if been done in the past 1s
update request {
	&Tmp-String-0 := `/bin/sleep 1.1`
}

if ("%{redis:GET b}" != 'boom') {
	test_fail
}

#  Kill that one too (promoted to master so has id 0)
if ("%{redis:@%{redis_node:b 0} DEBUG SEGFAULT}" != '') {
	test_fail
}

#  FR debounces remapping if been done in the past 1s
update request {
	&Tmp-String-0 := `/bin/sleep 1.1`
}

# No alternatives...
if ("%{redis:GET b}" == 'boom') {
	test_fail
}

test_pass
