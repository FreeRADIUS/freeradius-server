#
#  Check handling of node failures in a redis cluster
#
string redismaster
string redisreplica
string takeoverresult

$INCLUDE cluster_reset.inc

#  Hashes to Redis cluster node master 1
if (!(%redis(SET, b, 'boom') == 'OK')) {
	test_fail
}

#  Leave some time (500ms) for the synchronisation
%delay(0.5)

#  Note the current master
&redismaster := %redis.node(b, 0)

#  Note the current replica
&redisreplica := %redis.node(b, 1)

#  Cause one of the redis cluster nodes to SEGV
if (%redis(@%redis.node(b, 0), DEBUG, SEGFAULT)) {
	test_fail
}

#  Forcefully failover the slave for that node
#  If the failover has happened automatically, then there is no result
#  which sometimes happens when running tests with sanitizers, due to
#  slowness introduced by the sanitizers.
try {
	&takeoverresult = %redis(@%{redisreplica}, CLUSTER, FAILOVER, TAKEOVER)
}
catch fail {
	&takeoverresult = 'OK'
}
if (&takeoverresult != 'OK') {
	test_fail
}

#  Allow time for the takeover to propagate to other nodes
foreach &control.Filter-Id {
	# Keep remapping the cluster
	%redis.remap(%{redisreplica})

	if (%redis.node(b, 0) == &redisreplica) {
		break
	}
	%delay(0.5)
}

if (!(%redis(GET, b) == 'boom')) {
	test_fail
}

#  Kill that one too
if (%redis(@%redis.node(b), DEBUG, SEGFAULT)) {
	test_fail
}

# No alternatives...
%delay(0.5)
if (%redis(GET, b) == 'boom') {
	test_fail
}

test_pass
