#
#  Minimal radiusd.conf for testing modules
#

raddb		= raddb

modconfdir	= ${raddb}/mods-config

#  Only for testing!
#  Setting this on a production system is a BAD IDEA.
security {
	allow_vulnerable_openssl = yes
}

delete_from_radacct = "DELETE FROM radcheck WHERE AcctSessionId ="
delete_from_radcheck = "DELETE FROM radcheck WHERE username ="
delete_from_radreply = "DELETE FROM radreply WHERE username ="
insert_into_radcheck = "INSERT INTO radcheck (username, attribute, op, value) VALUES"
insert_into_radreply = "INSERT INTO radreply (username, attribute, op, value) VALUES"

modules {
	$INCLUDE ${raddb}/mods-enabled/always

	$INCLUDE ${raddb}/mods-enabled/pap

	$INCLUDE $ENV{MODULE_TEST_DIR}/module.conf
}

$-INCLUDE $ENV{MODULE_TEST_DIR}/global.conf

$-INCLUDE $ENV{MODULE_TEST_DIR}/triggers.conf

$-INCLUDE $ENV{MODULE_TEST_DIR}/clients.conf

server default {
	namespace = radius

	listen {
		type = Access-Request
	}

	recv Access-Request {
		#
		# Include the test file specified by the
		# KEYWORD environment variable.
		#
		$INCLUDE $ENV{MODULE_TEST_UNLANG}

		pap
	}

	authenticate pap {
		pap
	}
}

policy {
	test_pass {
		&control.Auth-Type := Accept
	}

	test_fail {
		&reply += {
			&Reply-Message = "Failure in test at line %(interpreter:...line)"
		}
		reject
	}

	#
	#  Outputs the contents of the control list in debugging (-X) mode
	#
	debug_control {
		if("%(debug_attr:control[*])" == '') {
			noop
		}
	}

	#
	#  Outputs the contents of the request list in debugging (-X) mode
	#
	debug_request {
		if("%(debug_attr:request[*])" == '') {
			noop
		}
	}

	#
	#  Outputs the contents of the reply list in debugging (-X) mode
	#
	debug_reply {
		if("%(debug_attr:reply[*])" == '') {
			noop
		}
	}

	#
	#  Outputs the contents of the session state list in debugging (-X) mode
	#
	debug_session_state {
		if("%(debug_attr:session-state[*])" == '') {
			noop
		}
	}

	#
	#  Outputs the contents of the main lists in debugging (-X) mode
	#
	debug_all {
		debug_control
		debug_request
		debug_reply
		debug_session_state
	}

	#
	#  Return within a policy
	#
	policy_return {
		if ("bar" == "bar") {
			return
		}
		# Must return else we fail
		test_fail
	}

	$-INCLUDE $ENV{MODULE_TEST_DIR}/policy.conf
}
