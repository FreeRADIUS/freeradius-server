#
#  Run the "redis" xlat
#
$INCLUDE cluster_reset.inc

update control {
	&IP-Pool.Name := 'test_update'
}

#
#  Add IP addresses
#
update request {
	&Tmp-String-0 := `./build/bin/local/rlm_redis_ippool_tool -a 192.168.0.1/32 $ENV{REDIS_IPPOOL_TEST_SERVER}:30001 %{control.IP-Pool.Name} 192.168.0.0`
}

# 1. Check allocation
redis_ippool
if (updated) {
	test_pass
} else {
	test_fail
}

# 2.
if (&reply.Framed-IP-Address == 192.168.0.1) {
	test_pass
} else {
	test_fail
}

# 3. Check the expiry attribute is present and correct
if (&reply.Session-Timeout == 30) {
	test_pass
} else {
	test_fail
}

# 4. Verify the gateway was set
if ("%{redis:HGET {%{control.IP-Pool.Name}%}:ip:%{reply.Framed-IP-Address} gateway}" == '127.0.0.1') {
	test_pass
} else {
	test_fail
}

# 5. Add another IP addresses
update request {
	&Tmp-String-0 := `./build/bin/local/rlm_redis_ippool_tool -a 192.168.1.1/32 $ENV{REDIS_IPPOOL_TEST_SERVER}:30001 %{control.IP-Pool.Name} 192.168.1.0`
}

# 6. Verify that the lease time is extended
update {
	&request.Framed-IP-Address := &reply.Framed-IP-Address
	&request.NAS-IP-Address := 127.0.0.2
	&control.IP-Pool.Action := Renew
}
redis_ippool
if (updated) {
	test_pass
} else {
	test_fail
}

# 7. Lease time should now be 60 seconds
if (&reply.Session-Timeout == 60) {
	test_pass
} else {
	test_fail
}

# 8. Check ZSCORE reflects that
update request {
	&Tmp-Date-0 := "%l"
}

if ("%{expr:%{redis:ZSCORE '{%{control.IP-Pool.Name}%}:pool' '%{reply.Framed-IP-Address}'} - %(integer:%{Tmp-Date-0})}" > 50) {
	test_pass
} else {
	test_fail
}

# 9.
if ("%{expr:%{redis:ZSCORE '{%{control.IP-Pool.Name}%}:pool' '%{reply.Framed-IP-Address}'} - %(integer:%{Tmp-Date-0})}" < 70) {
	test_pass
} else {
	test_fail
}

# 10. Verify the lease is still associated with the device
if (&reply.Framed-IP-Address == "%{redis:GET '{%{control.IP-Pool.Name}%}:device:%{Calling-Station-ID}'}") {
	test_pass
} else {
	test_fail
}

# 11. And that the device object will expire a suitable number of seconds into the future
if ("%{redis:TTL '{%{control.IP-Pool.Name}%}:device:%{Calling-Station-ID}'}" == 60) {
	test_pass
} else {
	test_fail
}

# 12. Verify the gateway was updated
if ("%{redis:HGET {%{control.IP-Pool.Name}%}:ip:%{request.Framed-IP-Address} gateway}" == '127.0.0.2') {
	test_pass
} else {
	test_fail
}

# 13. and that the range attribute was set
if (&reply.IP-Pool.Range && (&reply.IP-Pool.Range == '192.168.0.0')) {
	test_pass
} else {
	test_fail
}

# Change the ip address to one that doesn't exist in the pool and check we *can't* update it
update request {
	&request.Framed-IP-Address := 192.168.3.1
}
redis_ippool {
	invalid = 1
}
# 14.
if (notfound) {
	test_pass
} else {
	test_fail
}
update request {
	&request.Framed-IP-Address := 192.168.0.1
}

# 15. Now change the calling station ID and check that we *can't* update the lease
update request {
	&Calling-Station-ID := 'naughty'
}
redis_ippool {
	invalid = 1
}
if (invalid) {
	test_pass
} else {
	test_fail
}

# 16. Verify the lease is still associated with the previous device
if (&reply.Framed-IP-Address == "%{redis:GET '{%{control.IP-Pool.Name}%}:device:00:11:22:33:44:55'}") {
	test_pass
} else {
	test_fail
}

update {
	&reply !* ANY
}
