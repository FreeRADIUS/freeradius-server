#  -*- text -*-
#
#  test configuration file.  Do not install.
#
#  $Id$
#

#
#  Minimal radiusd.conf for testing
#

testdir      = $ENV{TESTDIR}
output       = $ENV{OUTPUT}
run_dir      = ${output}
raddb        = raddb
pidfile      = ${run_dir}/radiusd.pid
panic_action = "gdb -batch -x src/tests/panic.gdb %e %p > ${run_dir}/gdb.log 2>&1; cat ${run_dir}/gdb.log"

maindir      = ${raddb}
radacctdir   = ${run_dir}/radacct
modconfdir   = ${maindir}/mods-config
certdir      = ${maindir}/certs
cadir        = ${maindir}/certs
test_port    = $ENV{TEST_PORT}

#  Only for testing!
#  Setting this on a production system is a BAD IDEA.
security {
	allow_vulnerable_openssl = yes
}

policy {
	files.authorize {
		if (&User-Name == "bob") {
			&control.Password.Cleartext := "bob"
		}
	}
	$INCLUDE ${maindir}/policy.d/
}

modules {
	always reject {
		rcode = reject
	}
	always fail {
		rcode = fail
	}
	always ok {
		rcode = ok
	}
	always handled {
		rcode = handled
	}
	always invalid {
		rcode = invalid
	}
	always disallow {
		rcode = disallow
	}
	always notfound {
		rcode = notfound
	}
	always noop {
		rcode = noop
	}
	always updated {
		rcode = updated
	}

	radius {
		mode = proxy

		type = Access-Request
		type = Accounting-Request

		transport = udp
		udp {
			ipaddr = 127.0.0.1
			port = $ENV{TEST_PORT}
			secret = testing123
		}

	}
}

#
#  This virtual server is chosen for processing requests when using:
#
#	radiusd -Xd src/tests/ -i 127.0.0.1 -p 12340 -n test
#
server test {
	namespace = radius

	listen {
		type = Access-Request
		type = Accounting-Request

                udp {
                        ipaddr = *
                        port = ${test_port}
                        dynamic_clients = true
                        networks {
                                allow = 0.0.0.0/0
                        }
                }
                transport = udp

                #
                #  Dynamic client section
                #
                limit {
                        max_clients = 0
                        max_connections = 0
                        idle_timeout = 600.0
                        nak_lifetime = 10.0
                        cleanup_delay = 5.0
                }
        }

        new client {
                &control.FreeRADIUS-Client-IP-Address := 127.0.0.1
                &control.FreeRADIUS-Client-Secret := 'testing123'
                &control.FreeRADIUS-Client-Shortname := 'test-client'
                &control.FreeRADIUS-Client-NAS-Type := 'test'
		ok
        }

        add client {
                ok
        }

        deny client {
                ok
        }

	recv Access-Request {
		#
		#  Ensure that we can send unknown attributes back.
		#
		if (&NAS-Identifier == "auth_4") {
			&reply.Class := 0x483d342c493d34
			&reply += {
				&raw.26 = &reply.Class
				&raw.26 = 0x483d342c493d43
			}
		}

		if (&User-Name == "proxy") {
			if (!&Proxy-State) {
				&control.Auth-Type := ::proxy
				return
			}

			accept
			return
		}

		if (&User-Name == "bob") {
			accept
		} else {
			reject
		}

	}

	authenticate proxy {
		radius
	}

	send Access-Accept {
		if (&Proxy-State) {
			&reply.Reply-Message := "Have Proxy-State"
		}
	}

	send Access-Challenge {
	}

	send Access-Reject {
	}

	recv Accounting-Request {
		ok
	}

	send Accounting-Response {
	}

}
