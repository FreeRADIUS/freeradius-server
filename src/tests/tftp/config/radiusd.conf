#  -*- text -*-
#
#  test configuration file.  Do not install.
#
#  $Id$
#

#
#  Minimal radiusd.conf for tftp server
#

testdir      = $ENV{TESTDIR}
output       = $ENV{OUTPUT}
run_dir      = ${output}
raddb        = raddb
pidfile      = ${run_dir}/radiusd.pid
panic_action = "gdb -batch -x src/tests/panic.gdb %e %p > ${run_dir}/gdb.log 2>&1; cat ${run_dir}/gdb.log"

maindir      = ${raddb}
radacctdir   = ${run_dir}/radacct
modconfdir   = ${maindir}/mods-config
certdir      = ${maindir}/certs
cadir        = ${maindir}/certs
test_port    = $ENV{TEST_PORT}

#  Only for testing!
#  Setting this on a production system is a BAD IDEA.
security {
	allow_vulnerable_openssl = yes
}

policy {

}

client localhost {
	ipaddr = 127.0.0.1
	secret = testing123
	proto = udp
}

modules {
	detail {
		filename = ${radacctdir}/%{%{Packet-Src-IP-Address}:-%{Packet-Src-IPv6-Address}}/detail-%Y%m%d
		escape_filenames = no
		permissions = 0600
		header = "%t"
	}

	always reject {
		rcode = reject
	}
	always fail {
		rcode = fail
	}
	always ok {
		rcode = ok
	}
	always handled {
		rcode = handled
	}
	always invalid {
		rcode = invalid
	}
	always disallow {
		rcode = disallow
	}
	always notfound {
		rcode = notfound
	}
	always noop {
		rcode = noop
	}
	always updated {
		rcode = updated
	}
}

#
#  This virtual server is chosen for processing requests when using:
#
#	radiusd -Xd src/tests/output -i 127.0.0.1 -p 12340 -n test
#
server test {
	namespace = tftp

	listen {
		directory = "${modconfdir}/tftp"
		type = Read-Request
		type = Acknowledgement
		max_blksize = 1400

		transport = udp
		udp {
			ipaddr = *
			port = ${test_port}
		}

		limit {
			idle_timeout = 30.0
		}
	}

	recv Read-Request {
		detail

		#
		#	You could deny a file by a specific IP.
		#
		if (&Packet-Src-IP-Address == "192.168.1.22") {
			update reply {
				&TFTP-Opcode := Error
				&TFTP-Error-Code := Access-Violation
				&TFTP-Error-Message := "You're not allowed"
			}
			reject
		}

		#
		#  ... Or overwrite the FILE's like:
		#
		if (&TFTP-Mode == ASCII && &TFTP-Filename == "test-ascii") {
			update reply {
				&TFTP-Filename := "sample-netascii.txt"
			}
			updated
		}
		if (&TFTP-Mode == OCTET && &TFTP-Filename == "test-octet") {
			update reply {
				&TFTP-Filename := "sample-octet.png"
			}
			updated
		}

		#
		#  ... Or If you have FILES's in a database, you can `select` like:
		#
#		if (&TFTP-Filename == "firmware.bin") {
#			update reply {
#				&TFTP-Filename := "%{sql:SELECT firmware_file WHERE ipaddr='%{Packet-Src-IP-Address}'}"
#			}
#		}
	}

	send Data {
		ok
	}

	recv Acknowledgement {
		ok
	}

	send Error {
		#
		#  Add contents here!
		#
		update reply {
			&TFTP-Opcode := Error
			&TFTP-Error-Code := Access-Violation
		}
	}

	send Do-Not-Respond {
		ok
	}
}
