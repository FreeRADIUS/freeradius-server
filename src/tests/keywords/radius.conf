modules {
	$INCLUDE ${raddb}/mods-enabled/always

	$INCLUDE ${raddb}/mods-enabled/pap

	$INCLUDE ${raddb}/mods-enabled/expr

	$INCLUDE ${raddb}/mods-enabled/escape

	delay reschedule {
		force_reschedule = yes
	}

	delay delay_10s {
		delay = 10
	}

	test {

	}

	csv {
		key = "%{tolower:%{User-Name}}"
		filename = ${keyword}/csv.conf
		fields = "field1,,field3"
		index_field = 'field1'
	}

	unpack {

	}

	dhcpv4 {

	}

	soh {

	}

	date {
		format = "%a %d %b %H:%M:%S %Z %Y"
		utc = yes
	}

	date localdate {
		format = "%Y-%m-%d %H:%M:%S"
		utc = no
	}

	date sqldate {
		format = "%Y-%m-%d %H:%M:%S"
		utc = yes
  	}
  
	idn {
		allow_unassigned = no
		use_std3_ascii_rules = yes
	}

	mschap {

	}

	perl {
		filename = ${keyword}/perl.conf
		func_xlat = xlat
	}
}

policy {
$INCLUDE policy.conf

	#
	#  Return within a policy
	#
	policy_return {
		if ("bar" == "bar") {
			return
		}
		# Must return else we fail
		test_fail
	}

	accept {
		update control {
			&Auth-Type := Accept
		}
	}

}

instantiate {
	#
	#  Just check that this can be referred to as "virtual_instantiate.post-auth"
	#
	load-balance virtual_instantiate {
		ok
		ok
	}
}

#
#  Virtual server for the RADIUS protocol.
#
server default {
	namespace = radius

	listen {
		type = Access-Request
	}

	recv Access-Request {
		update control {
			&Password.Cleartext := 'hello'
		}

		#
		# Include the test file specified by the
		# KEYWORD environment variable.
		#
		$INCLUDE ${keyword}/$ENV{KEYWORD}

		if (&control.Password.Cleartext) {
			pap
		}
		else {
			accept
		}
	}

	authenticate pap {
		pap
	}
}

server second {
	namespace = radius

	listen {
		type = Access-Request
	}

	recv Access-Request {
		update reply {
			&Reply-Message := "call second"
		}

		accept
	}
}
