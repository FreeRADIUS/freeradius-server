modules {
	$INCLUDE ${raddb}/mods-enabled/always

	$INCLUDE ${raddb}/mods-enabled/pap

	$INCLUDE ${raddb}/mods-enabled/escape

	delay reschedule {
		force_reschedule = yes
	}

	delay delay_10s {
		delay = 10
	}

	#
	#  This should set the "test.short"
	#
	test {

	}
	test.short = 65535


	csv {
		key = "%tolower(%{User-Name})"
		filename = ${keyword}/csv.conf
		fields = "field1,,field3"
		index_field = 'field1'
	}

	unpack {

	}

	date {
		format = "%a %d %b %H:%M:%S %Z %Y"
		utc = yes
	}

	date localdate {
		format = "%Y-%m-%d %H:%M:%S"
		utc = no
	}

	date sqldate {
		format = "%Y-%m-%d %H:%M:%S"
		utc = yes
  	}

	exec {
		wait = yes
		input_pairs = &request
		shell_escape = yes
		env_inherit = no
		timeout = 1
	}

	mschap {
		attributes {
			username = &User-Name
			chap_error = &Vendor-Specific.Microsoft.CHAP-Error
			chap_challenge = &Vendor-Specific.Microsoft.CHAP-Challenge
			chap_response = &Vendor-Specific.Microsoft.CHAP-Response
			chap2_response = &Vendor-Specific.Microsoft.CHAP2-Response
			chap2_success = &Vendor-Specific.Microsoft.CHAP2-Success
			chap_mppe_keys = &Vendor-Specific.Microsoft.CHAP-MPPE-Keys
			mppe_encryption_policy = &Vendor-Specific.Microsoft.MPPE-Encryption-Policy
			mppe_recv_key = &Vendor-Specific.Microsoft.MPPE-Recv-Key
			mppe_send_key = &Vendor-Specific.Microsoft.MPPE-Send-Key
			mppe_encryption_types = &Vendor-Specific.Microsoft.MPPE-Encryption-Types
			chap2_cpw =  &Vendor-Specific.Microsoft.CHAP2-CPW
		}
	}

	#
	#  Tests for in-line templates
	#
	template template_test {
		rcode = ok
	}

	always template_test {
		$TEMPLATE template_test
	}

	#
	#  Just check that this can be referred to as "virtual_instantiate.post-auth"
	#
	load-balance virtual_instantiate {
		ok
		updated
	}

	test test1 {
	}

	test test2 {
	}

	redundant redundant_test {
		test1
		test2
	}

}

policy {
$INCLUDE policy.conf

	#
	#  Return within a policy
	#
	policy_return {
		if ("bar" == "bar") {
			return
		}
		# Must return else we fail
		test_fail
	}

	accept {
		&control.Auth-Type := ::Accept
	}

}

#
#  Virtual server for the RADIUS protocol.
#
server default {
	namespace = radius

	listen {
		type = Access-Request
	}

	dictionary {
		tlv my-tlv {
			uint32 a
			uint32 b
			string c
			ipaddr d
		}
	}

	recv Access-Request {
		&control.Password.Cleartext := "hello"

		#
		#  Include the test file specified by the
		#  KEYWORD environment variable.
		#
		#  Wrap it in a "group" so that the test
		#  can put local variable definitions at the
		#  top of the file.
		#
		group keyword-wrapper {
			$INCLUDE ${keyword}/$ENV{KEYWORD}
		}

		if (&control.Password.Cleartext) {
			pap
		}
		else {
			accept
		}
	}

	authenticate pap {
		pap
	}
}

server second {
	namespace = radius

	listen {
		type = Access-Request
	}

	recv Access-Request {
		&reply.Reply-Message := "call second"

		accept
	}
}
