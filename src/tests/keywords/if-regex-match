# PRE: if
#
string test_string
string dummy_string
uint32 test_integer

test_integer := '123456789'

# Non matching on attribute ref
if !(User-Name =~ /^([0-9])_([0-9])?_([0-9]*)_([0-9]+)_([^_])_(6)_([7-8])%{test_string}/) {
	test_fail
}

# Matching on xlat expanded value
if !("%{User-Name}" =~ /^([0-9])_([0-9])?_([0-9]*)_([0-9]+)_([^_])_(6)_([7-8])%{test_string}/) {
	test_fail
}

# Matching on attribute ref with capture groups
if (User-Name =~ /^([0-9])_([0-9])?_([0-9]*)_([0-9]+)_([^_])_(6)_([7-8])%{test_string}/) {
	# Test all the capture groups
	reply.User-Name := "%regex.match(7)_%regex.match(6)_%regex.match(5)_%regex.match(4)_%regex.match(3)_%regex.match(2)_%regex.match(1)_%regex.match(0)"
}
else {
	test_fail
}

# Checking capture groups are cleared out correctly
if (User-Name =~ /^([0-9])_%{test_string}/) {
	if (!("%regex.match(0)%regex.match(1)%regex.match(2)%regex.match(3)%regex.match(4)%regex.match(5)%regex.match(6)%regex.match(7)" == '1_1')) {
		test_fail
	}
}
else {
	test_fail
}

# Checking capture groups are cleared out correctly when there are no matches
if (User-Name =~ /^.%{test_string}/) {
	if (!("%regex.match(0)%regex.match(1)%regex.match(2)%regex.match(3)%regex.match(4)%regex.match(5)%regex.match(6)%regex.match(7)" == '1')) {
		test_fail
	}
}
else {
	test_fail
}

# Checking full capture group range
if ('a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_x_y_z_A_B_C_D_E_F' =~ /^(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)$/) {
	if (!("%regex.match(0)%regex.match(1)%regex.match(2)%regex.match(3)%regex.match(4)%regex.match(5)%regex.match(6)%regex.match(7)%regex.match(8)%regex.match(9)%regex.match(10)%regex.match(11)%regex.match(12)%regex.match(13)%regex.match(14)%regex.match(15)%regex.match(16)%regex.match(17)%regex.match(18)%regex.match(19)%regex.match(20)%regex.match(21)%regex.match(22)%regex.match(23)%regex.match(24)%regex.match(25)%regex.match(26)%regex.match(27)%regex.match(28)%regex.match(29)%regex.match(30)%regex.match(31)%regex.match(32)" == 'a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_x_y_z_A_B_C_D_E_FabcdefghijklmnopqrstuvwxyzABCDEF')) {
		test_fail
	}
}
else {
	test_fail
}

# Checking full capture group overrun
if ('a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_x_y_z_A_B_C_D_E_F_G' =~ /^(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)_(.)$/) {
	if (!("%regex.match(0)%regex.match(1)%regex.match(2)%regex.match(3)%regex.match(4)%regex.match(5)%regex.match(6)%regex.match(7)%regex.match(8)%regex.match(9)%regex.match(10)%regex.match(11)%regex.match(12)%regex.match(13)%regex.match(14)%regex.match(15)%regex.match(16)%regex.match(17)%regex.match(18)%regex.match(19)%regex.match(20)%regex.match(21)%regex.match(22)%regex.match(23)%regex.match(24)%regex.match(25)%regex.match(26)%regex.match(27)%regex.match(28)%regex.match(29)%regex.match(30)%regex.match(31)%regex.match(32)" == 'a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_x_y_z_A_B_C_D_E_F_GabcdefghijklmnopqrstuvwxyzABCDEF')) {
		test_fail
	}
}
else {
	test_fail
}

# uncompiled - ref - insensitive
if !(Calling-Station-Id =~ /:roamyroam%{test_string}$/i) {
	test_fail
}

# uncompiled - expansion - insensitive
if !(Calling-Station-Id =~ /:roamyroam%{test_string}$/i) {
	test_fail
}

# uncompiled - enum - ref - insensitive
if !(Service-Type =~ /^framed-user%{test_string}$/i) {
	test_fail
}

# uncompiled - enum - expansion - insensitive
if !("%{Service-Type}" =~ /^framed-user%{test_string}$/i) {
	test_fail
}

# uncompiled - enum - ref
if (Service-Type =~ /^framed-user%{test_string}$/) {
	test_fail
}

# uncompiled - integer - ref
if !(test_integer =~ /%{test_integer}/) {
	test_fail
}

test_string := "foo\nbar"

# uncompiled - ref - multiline
if !(test_string =~ /^foo$%{dummy_string}/m) {
	test_fail
}

# uncompiled - ref - non-multiline
if (test_string =~ /^foo$%{dummy_string}/) {
	test_fail
}

# uncompiled - ref - non-multiline
if !(test_string =~ /^foo\nbar%{dummy_string}$/) {
	test_fail
}

# uncompiled - ref - multiline
if !(test_string =~ /^bar%{dummy_string}$/m) {
	test_fail
}

# uncompiled - ref - multiline - sensitive
if (test_string =~ /^BAR%{dummy_string}$/m) {
	test_fail
}

# uncompiled - ref - multiline - insensitive
if !(test_string =~ /^BAR%{dummy_string}$/mi) {
	test_fail
}

# uncompiled - ref - multiline - insensitive (flag order reversed)
if !(test_string =~ /^BAR%{dummy_string}$/im) {
	test_fail
}
